Перем Тз,ТЗзз,Тз2,тз1,тзз,тз3,тз4,тз5,тз6,тз7,тз8,тз9,ТекущийПользователь,Открывать,хб,хб1,хб2,СписокДокументов,
ЗапускБЫЛ,ТаблицаЗапроса,режим,Слово,ОсновнаяНоменклатурнаяГруппа,Юрлицо,Укр,
Конфигурация20, ВсяНомеклатураАйко, Ошибок, ЗначенияВостановлены;
Перем НачИменаКолонок, УмныеИменаКолонок, НачИменаКолонок1, УмныеИменаКолонок1, НачИменаКолонок2, УмныеИменаКолонок2, НачИменаКолонок3, УмныеИменаКолонок3, 
НачИменаКолонок4, УмныеИменаКолонок4, НачИменаКолонок5, УмныеИменаКолонок5, НачИменаКолонок6, УмныеИменаКолонок6, НачИменаКолонок7, УмныеИменаКолонок7, 
НачИменаКолонок8, УмныеИменаКолонок8, НачИменаКолонок9, УмныеИменаКолонок9, Форма, ФормаНастройки,ВерсияАйко,ДатаДокумМесяц;


Функция ПолучитьНомерДокумента(номер, дата, префикс, коммент)
	дата=УдалитьПроб(СокрЛП(дата));
	Если АналитикаДокументов="День" Тогда
		Год=Сред(дата,7,4);
		Месяц=Сред(дата,4,2);
		День=Лев(дата,2);
		дл=СтрДлина(префикс); 
		Если дл > 10 Тогда
			Сообщить("Номер документа "+коммент+": "+номер+" превышает допустимый лимит в 11 символов. Документ не записан.", СтатусСообщения.ОченьВажное);
			возврат ложь;
		КонецЕсли;
		ДатаДокумМесяц=Дата(Год,Месяц,День,23,0,0);
		возврат префикс+ФормаНастройки.ДобитьПробелы(Прав(Год, 2)+"."+Месяц+"."+День,11-дл);
	ИначеЕсли АналитикаДокументов="Месяц" Тогда
		ДатаДокумМесяц=КонецМесяца(дата);
		Год=Сред(ДатаДокумМесяц,7,4);
		Месяц=Сред(ДатаДокумМесяц,4,2);	
		дл=СтрДлина(префикс); 
		Если дл > 7 Тогда
			Сообщить("Номер документа "+коммент+": "+номер+" превышает допустимый лимит в 11 символов. Документ не записан.", СтатусСообщения.ОченьВажное);
			возврат ложь;
		КонецЕсли;
		возврат префикс+ФормаНастройки.ДобитьПробелы(Год+"/"+Месяц,11-дл);
	КонецЕсли;
	ДатаДокумМесяц=дата;
	Возврат номер;
КонецФункции	

Функция Модуль(Числ)
	Если Числ<0 Тогда
		Возврат -Числ;
	Иначе
		Возврат Числ;
	КонецЕсли;	
КонецФункции

Функция ПолучитьСтавкуНДС(СтавкаЧисло,Сумма,СуммаНДС)
	Если Укр=0 Тогда
		// ALEXV: Ставка всегда указывается как БезНДС, НДС10 или НДС18
		//Если СтавкаЧисло=0 Тогда
			Ставка=Перечисления.СтавкиНДС.БезНДС;
		//Иначе
			//РазницаСверху=Модуль(СуммаНДС-Сумма*СтавкаЧисло/100);
			//РазницаВТЧ=Модуль(СуммаНДС-Сумма*СтавкаЧисло/(100+СтавкаЧисло));
			//Если РазницаСверху>РазницаВТЧ Тогда
				Если СтавкаЧисло=18 Тогда
					Ставка=Перечисления.СтавкиНДС.НДС18;
			//		Ставка= Перечисления.СтавкиНДС.НДС18_118;
			//	Иначе
			//		Ставка=Перечисления.СтавкиНДС.НДС10_110;
				КонецЕсли;	
			//Иначе
				Если СтавкаЧисло=10 Тогда
					Ставка= Перечисления.СтавкиНДС.НДС10;
			//	Иначе
			//		Ставка=Перечисления.СтавкиНДС.НДС18;
				КонецЕсли;	
			//КонецЕсли;	
		//КонецЕсли;	
	Иначе
		//Если СтавкаЧисло=0 Тогда
		//	Ставка=Перечисления.СтавкиНДС.БезНДС;
		//	//ИначеЕсли СтавкаЧисло=20 Тогда
		//Иначе
			Ставка= Перечисления.СтавкиНДС.НДС20;
		//	//Иначе
		//	//	Сообщить("Ставка НДС: "+СтавкаЧисло);
		//КонецЕсли;	
	КонецЕсли;
	Возврат Ставка;
КонецФункции

Функция ПолучитьСтавкуНДС2(СтавкаСтрока)
	СтавкаЧисло=Число(СокрЛП(СтавкаСтрока));
	Если Укр=0 Тогда
		Если СтавкаЧисло=18 Тогда
			Возврат Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;	
		Если СтавкаЧисло=10 Тогда
			Возврат Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;	
		Возврат Перечисления.СтавкиНДС.БезНДС;
	Иначе
		Если СтавкаЧисло = 0 Тогда
			Возврат Перечисления.СтавкиНДС.НДС20;
		Иначе
			Возврат Перечисления.СтавкиНДС.БезНДС;		
		КонецЕсли;			
	КонецЕсли	
КонецФункции

Процедура ИнвертироватьВыборНажатие(Элемент)
	// ALEXV: Инвертируем выбор флажков
	Для Каждого стр из Докум Цикл
		стр.Выбор = не стр.Выбор;
	КонецЦикла;
КонецПроцедуры

функция ТруКодн(стр)
	Если Укр=1 тогда
		Возврат СокрЛП(стр);
	Иначе
		Возврат ФормаНастройки.ДобитьПробелы(СокрЛП(стр),11);
	КонецЕСли;	
КонецФункции

Функция ДопустимыйНомер(стр,префикс,кодТП,коммент)
	Если НомерПлюсКодТП=1 Тогда
		пр=СтрДлина(кодТП)+СтрДлина(префикс); 
	Иначе	
		пр=СтрДлина(префикс);
	КонецЕсли;
	Если СтрДлина(СокрЛП(стр))+пр>11 тогда 
		Сообщить("Номер документа "+коммент+": "+стр+" превышает допустимый лимит в "+(11-пр)+" символов. Документ не записан.", СтатусСообщения.ОченьВажное);
		возврат ложь;
	КонецЕсли;	
	Возврат истина;
КонецФункции	

функция НомерНакладной(стр1,номер,префикс,префиксДата,коммент)
	Если АналитикаДокументов<>"ПоДокументам" Тогда
		Возврат номер;//ПолучитьНомерДокумента(номер,стр1.Дата,префиксДата,коммент);
	КонецЕсли;

	Если не ДопустимыйНомер(номер,префикс,стр1.ТорговоеПредприятиеКод,коммент) Тогда 
		возврат неопределено;
	КонецЕсли;
	Если НомерПлюсКодТП=1 Тогда
		пр=СтрДлина(стр1.ТорговоеПредприятиеКод)+СтрДлина(префикс); 
		Возврат префикс+стр1.ТорговоеПредприятиеКод+ФормаНастройки.ДобитьПробелы(СокрЛП(номер),11-пр);
	Иначе	
		пр=СтрДлина(префикс);
		Возврат префикс+ФормаНастройки.ДобитьПробелы(СокрЛП(номер),11-пр);
	КонецЕсли;	
КонецФункции
	
//Функция РодительПервогоУровня(номм)
//	номмм=Номм.ПолучитьОбъект();
//	Пока Номмм.Уровень()>0 Цикл
//		Номмм=Номмм.Родитель;
//		прервать;
//	КонецЦикла;	
//	Возврат Номмм.ссылка;
//КонецФункции	

Процедура КаталогЭкспортаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Каталог1с);
КонецПроцедуры

//Процедура КаталогЭкспортаОткрытие1(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	ЗапуститьПриложение(КаталогСоответствия);
//КонецПроцедуры


Процедура КнопкаВыбораПериодаНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	НачПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
КонецПроцедуры

Процедура ЗаписатьСтроку(invoice, invoiceItem)
	Если ЗначениеЗаполнено(invoiceItem.Article)=Истина тогда
		Если Число(invoiceItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(invoiceItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз.Добавить();
			НоваяСтрока.Дата= invoice.Date;
			НоваяСтрока.НомерДок= invoice.Number;
			НоваяСтрока.Входномер= invoice.IncomingNumber;
			НоваяСтрока.Входдата= invoice.IncomingDate_DateTimeAsString;
			НоваяСтрока.КИННИИКО= invoice.SupplierINN;
			НоваяСтрока.ККодИИКО= invoice.SupplierCode;
			НоваяСтрока.КНаименованиеИИКО= invoice.SupplierName;
			НоваяСтрока.СчетФактура= invoice.invoice;
			// ALEXV: Добавляем код и название сотрудника
			НоваяСтрока.СотрудникКод= invoice.StaffCode;
			НоваяСтрока.СотрудникНаименование= invoice.StaffName;			

			НоваяСтрока.НКодИИКО= invoiceItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= invoiceItem.Nomenclature;    
			НоваяСтрока.ГруппаучетаНазвание= invoiceItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод= invoiceItem.AccountingCategoryCode;   
			НоваяСтрока.СкладКод= invoiceItem.StoreCode;    
			НоваяСтрока.СкладНаименование= invoiceItem.StoreName;    
			НоваяСтрока.Колво= invoiceItem.Amount_DecimalAsString;    
			НоваяСтрока.ЦенасНДС= invoiceItem.PriceWithNds_DecimalAsString;    
			НоваяСтрока.СуммасНДС= invoiceItem.SumWithNds_DecimalAsString;    
			НоваяСтрока.СуммаНДС= invoiceItem.Nds_DecimalAsString;    
			НоваяСтрока.СтавкаНДС= invoiceItem.NdsPercent_DecimalAsString; 
			НоваяСтрока.ЮЛИНН= invoiceItem.JuristicPersonINN;
			НоваяСтрока.ЮЛнаименование= invoiceItem.JuristicPersonName;
			// ALEXV: Добавляем код и название подразделения
			НоваяСтрока.Торговоепредприятиекод= invoiceItem.DepartmentCode;
			НоваяСтрока.Торговоепредприятиенаименование= invoiceItem.DepartmentName;
			НоваяСтрока.Единицаизмеренияназвание=invoiceItem.MeasureUnitName;
			Попытка
				НоваяСтрока.Комментарий = invoice.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры "+invoiceItem.Nomenclature+" не задан код!!!");
	КонецЕсли;
КонецПроцедуры 

Процедура ЗаписатьрСтроку(document, documentItem)
	Если ЗначениеЗаполнено(documentItem.Article)=Истина тогда
		Если Число(documentItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(documentItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз8.Добавить();
			НоваяСтрока.Дата= document.Date;
			НоваяСтрока.НомерДок= document.Number;
			НоваяСтрока.СкладКод= documentItem.StoreCode;    
			НоваяСтрока.СкладНаименование= documentItem.StoreName;   
			НоваяСтрока.НКодИИКО= documentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= documentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание= documentItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод= documentItem.AccountingCategoryCode;
			НоваяСтрока.Количество= documentItem.Amount_DecimalAsString;    
			НоваяСтрока.ЦенапродажисНДС= documentItem.PriceWithNds_DecimalAsString;    
			НоваяСтрока.СуммапродажисНДС= documentItem.SumWithNds_DecimalAsString;    
			НоваяСтрока.СуммаНДСспродаж= documentItem.Nds_DecimalAsString;    
			НоваяСтрока.СтавкаНДСспродаж= documentItem.NdsPercent_DecimalAsString;
			НоваяСтрока.СебестоимостьзаедбезНДС= documentItem.CostPriceByUnit_DecimalAsString;    
			НоваяСтрока.СебестоимостьбезНДС= documentItem.CostPrice_DecimalAsString;    
			НоваяСтрока.СтавкаНДС= documentItem.NdsProductPercent_DecimalAsString;    
			НоваяСтрока.Торговоепредприятиекод= documentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование= documentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН= documentItem.JuristicPersonINN;
			НоваяСтрока.ЮЛнаименование= documentItem.JuristicPersonName;
			НоваяСтрока.Операция= documentItem.Operation;
			НоваяСтрока.Операцияназвание= documentItem.OperationName;
			НоваяСтрока.Типсписания= documentItem.WriteoffType;
			НоваяСтрока.Типсписанияназвание= documentItem.WriteoffTypeName;
			НоваяСтрока.Единицаизмеренияназвание=documentItem.MeasureUnitName;
			НоваяСтрока.Движениеденежныхсредствкод= document.RevenueAccountCode;
			НоваяСтрока.Движениеденежныхсредств= document.RevenueAccountName;
			НоваяСтрока.Статьярасходовкод= document.WriteoffAccountCode;
			НоваяСтрока.Статьярасходов= document.WriteoffAccountName;
			НоваяСтрока.КИННИИКО= document.CustomerINN;
			НоваяСтрока.ККодИИКО= document.CustomerCode;
			НоваяСтрока.КНаименованиеИИКО= document.CustomerName;   
			Попытка
				НоваяСтрока.Комментарий = document.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры "+documentItem.Nomenclature+" не задан код!!!");
	КонецЕсли;
КонецПроцедуры 

Процедура ЗаписатьСТрокуПеремещения(Document, DocumentItem)
	Если ЗначениеЗаполнено(DocumentItem.Article)=Истина тогда
		Если Число(DocumentItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(DocumentItem.JuristicPersonOutcomeName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз2.Добавить();
			НоваяСтрока.Дата= Document.Date;
			НоваяСтрока.НомерДок= Document.Number;
			НоваяСтрока.Торговоепредприятиеотправителькод= DocumentItem.DepartmentOutcomeCode;
			НоваяСтрока.Торговоепредприятиеотправительнаименование= DocumentItem.DepartmentOutcomeName;
			НоваяСтрока.ЮЛотправительИНН= DocumentItem.JuristicPersonOutcomeINN;
			НоваяСтрока.ЮЛотправительнаименование= DocumentItem.JuristicPersonOutcomeName;
			НоваяСтрока.Складотправителькод= DocumentItem.StoreOutcomeCode;
			НоваяСтрока.Складотправительнаименование= DocumentItem.StoreOutcomeName;
			НоваяСтрока.Торговоепредприятиеполучателькод= DocumentItem.DepartmentIncomeCode;    
			НоваяСтрока.Торговоепредприятиеполучательнаименование= DocumentItem.DepartmentIncomeName;   
			НоваяСтрока.ЮЛполучательИНН= DocumentItem.JuristicPersonIncomeINN;    
			НоваяСтрока.ЮЛполучательнаименование= DocumentItem.JuristicPersonIncomeName;    
			НоваяСтрока.Складполучателькод= DocumentItem.StoreIncomeCode;    
			НоваяСтрока.Складполучательнаименование= DocumentItem.StoreIncomeName;    
			НоваяСтрока.НКодИИКО= DocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= DocumentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание= DocumentItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод= DocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество= DocumentItem.Amount_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС= DocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС= DocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС= DocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Единицаизмеренияназвание=DocumentItem.MeasureUnitName;
			Попытка
				НоваяСтрока.Комментарий = Document.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры "+DocumentItem.Nomenclature+" не задан код!!!");
	КонецЕсли;
КонецПроцедуры 

Процедура ЗаписатьСТрокуПриготовления(Document, DocumentItem,знак)
	Если ЗначениеЗаполнено(DocumentItem.Article)=Истина тогда
		Если Число(DocumentItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(DocumentItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз3.Добавить();
			НоваяСтрока.Дата= Document.Date;
			НоваяСтрока.НомерДок= Document.Number;
			Если Знак=0 Тогда
				НоваяСтрока.Складсписаниякод= DocumentItem.StoreCode;
				НоваяСтрока.Складсписаниянаименование= DocumentItem.StoreName;
				НоваяСтрока.Складприходакод= DocumentItem.StoreCode;
				НоваяСтрока.Складприходанаименование= DocumentItem.StoreName;
			Иначе
				НоваяСтрока.Складприходакод= DocumentItem.StoreCode;
				НоваяСтрока.Складприходанаименование= DocumentItem.StoreName;
				НоваяСтрока.Складсписаниякод= DocumentItem.StoreCode;
				НоваяСтрока.Складсписаниянаименование= DocumentItem.StoreName;
			КонецЕсли;
			НоваяСтрока.Знакоперации=DocumentItem.Operation;    
			НоваяСтрока.Знакоперацииназвание= DocumentItem.OperationName;   
			НоваяСтрока.НКодИИКО= DocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= DocumentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание= DocumentItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод= DocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество= DocumentItem.Amount_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС= DocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС= DocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС= DocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод= DocumentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование= DocumentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН= DocumentItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование= DocumentItem.JuristicPersonName; 
			НоваяСтрока.Единицаизмеренияназвание=DocumentItem.MeasureUnitName;
			Попытка
				НоваяСтрока.Комментарий = Document.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры "+DocumentItem.Nomenclature+" не задан код!!!");
	КонецЕсли;
КонецПроцедуры 

Процедура ЗаписатьСТрокуПереработки(Document, DocumentItem,знак)
	Если ЗначениеЗаполнено(DocumentItem.Article)=Истина тогда
		Если Число(DocumentItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(DocumentItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз5.Добавить();
			НоваяСтрока.Дата= Document.Date;
			НоваяСтрока.НомерДок= Document.Number;
			Если Знак=0 Тогда
				НоваяСтрока.Складсписаниякод= DocumentItem.StoreCode;
				НоваяСтрока.Складсписаниянаименование= DocumentItem.StoreName;
				НоваяСтрока.Складприходакод= DocumentItem.StoreCode;
				НоваяСтрока.Складприходанаименование= DocumentItem.StoreName;
			Иначе
				НоваяСтрока.Складприходакод= DocumentItem.StoreCode;
				НоваяСтрока.Складприходанаименование= DocumentItem.StoreName;
				НоваяСтрока.Складсписаниякод= DocumentItem.StoreCode;
				НоваяСтрока.Складсписаниянаименование= DocumentItem.StoreName;
			КонецЕсли;
			НоваяСтрока.Знакоперации=DocumentItem.Operation;    
			НоваяСтрока.Знакоперацииназвание= DocumentItem.OperationName;   
			НоваяСтрока.НКодИИКО= DocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= DocumentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание= DocumentItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод= DocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество= DocumentItem.Amount_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС= DocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС= DocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС= DocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод= DocumentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование= DocumentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН= DocumentItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование= DocumentItem.JuristicPersonName; 
			НоваяСтрока.Единицаизмеренияназвание=DocumentItem.MeasureUnitName;
			Попытка
				НоваяСтрока.Комментарий = Document.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры "+DocumentItem.Nomenclature+" не задан код!!!");
	КонецЕсли;
КонецПроцедуры 

Процедура ЗаписатьСтрокуПродаж(oSale, oSaleItem)
	Если ЗначениеЗаполнено(oSaleItem.Article) тогда
		Если Число(oSaleItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(oSaleItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз1.Добавить();
			НоваяСтрока.Дата= oSale.Date;
			НоваяСтрока.НомерДок= oSale.Number;
			НоваяСтрока.Движениеденежныхсредствкод= oSale.RevenueAccountCode;
			НоваяСтрока.Движениеденежныхсредств= oSale.RevenueAccountName;
			НоваяСтрока.СкладКод= oSaleItem.StoreCode;    
			НоваяСтрока.СкладНаименование= oSaleItem.StoreName;    
			НоваяСтрока.Операция= ""+oSaleItem.Operation;
			НоваяСтрока.Операцияназвание= oSaleItem.OperationName;
			НоваяСтрока.НКодИИКО= oSaleItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= oSaleItem.Nomenclature;  
			НоваяСтрока.Группаучетаназвание= oSaleItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод= oSaleItem.AccountingCategoryCode;
			НоваяСтрока.Количество= oSaleItem.Amount_DecimalAsString;
			НоваяСтрока.ЦенапродажисНДС= oSaleItem.PriceWithNds_DecimalAsString;
			НоваяСтрока.СуммапродажисНДС= oSaleItem.SumWithNds_DecimalAsString;
			НоваяСтрока.СуммаНДСспродаж= oSaleItem.Nds_DecimalAsString;
			НоваяСтрока.СтавкаНДСспродаж= oSaleItem.NdsPercent_DecimalAsString; 
			//НоваяСтрока.СтавкаНДС= oSaleItem.NdsPercent_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС= oSaleItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС= oSaleItem.CostPrice_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод= oSaleItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование= oSaleItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН= oSaleItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование= oSaleItem.JuristicPersonName; 
			НоваяСтрока.ТипСписания= oSaleItem.WriteoffType; 
			НоваяСтрока.ТипСписанияНазвание= oSaleItem.WriteoffTypeName; 
			НоваяСтрока.Единицаизмеренияназвание=oSaleItem.MeasureUnitName;
			Если ВерсияАйко>=2 Тогда
				НоваяСтрока.ПроданноеБлюдоКод= oSaleItem.SoldWithDishCode; 
				НоваяСтрока.ПроданноеБлюдоНазвание= oSaleItem.SoldWithDishName;  
			КонецЕсли;
			Попытка
				НоваяСтрока.Комментарий = oSale.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтроку() 

Процедура ЗаписатьСтрокуСписаний(oSale, oWriteoffItem)
	Если ЗначениеЗаполнено(oWriteoffItem.Article) тогда
		Если Число(oWriteoffItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(oWriteoffItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз1.Добавить();
			НоваяСтрока.Дата= oSale.Date;
			НоваяСтрока.НомерДок= oSale.Number;
			НоваяСтрока.Движениеденежныхсредствкод= oSale.RevenueAccountCode;
			НоваяСтрока.Движениеденежныхсредств= oSale.RevenueAccountName;
			НоваяСтрока.СкладКод= oWriteoffItem.StoreCode;    
			НоваяСтрока.СкладНаименование= oWriteoffItem.StoreName;    
			НоваяСтрока.Операция= oWriteoffItem.Operation;
			НоваяСтрока.Операцияназвание= oWriteoffItem.OperationName;
			НоваяСтрока.НКодИИКО= oWriteoffItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= oWriteoffItem.Nomenclature;  
			НоваяСтрока.Группаучетаназвание= oWriteoffItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод= oWriteoffItem.AccountingCategoryCode;
			НоваяСтрока.Количество= oWriteoffItem.Amount_DecimalAsString;
			НоваяСтрока.СтавкаНДСспродаж= oWriteoffItem.NdsNomenclaturePercent_DecimalAsString; 
			//НоваяСтрока.СтавкаНДС= oWriteoffItem.NdsNomenclaturePercent_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС= oWriteoffItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС= oWriteoffItem.CostPrice_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод= oWriteoffItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование= oWriteoffItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН= oWriteoffItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование= oWriteoffItem.JuristicPersonName; 
			НоваяСтрока.Единицаизмеренияназвание=oWriteoffItem.MeasureUnitName;
			Попытка
				НоваяСтрока.Комментарий = oSale.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуСписаний() 

Процедура ЗаписатьСтрокуСписания(oDocument, oDocumentItem)
	Если ЗначениеЗаполнено(oDocumentItem.Article) тогда
		Если Число(oDocumentItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(oDocumentItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз6.Добавить();
			НоваяСтрока.Дата= oDocument.Date;
			НоваяСтрока.НомерДок= oDocument.Number;
			НоваяСтрока.СкладКод= oDocumentItem.StoreCode;    
			НоваяСтрока.СкладНаименование= oDocumentItem.StoreName;    
			НоваяСтрока.НКодИИКО= oDocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= oDocumentItem.Nomenclature;  
			НоваяСтрока.Группаучетаназвание= oDocumentItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод= oDocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество= oDocumentItem.Amount_DecimalAsString;
			НоваяСтрока.СебестоимостьзаедбезНДС= oDocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС= oDocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС= oDocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод= oDocumentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование= oDocumentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН= oDocumentItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование= oDocumentItem.JuristicPersonName; 
			НоваяСтрока.СтатьяРасходов= oDocument.WriteoffAccountName;
			НоваяСтрока.ТипСписания= oDocumentItem.WriteoffType;
			НоваяСтрока.ТипСписанияНазвание= oDocumentItem.WriteoffTypeName;
			НоваяСтрока.Операция= oDocumentItem.Operation;
			НоваяСтрока.Операцияназвание= oDocumentItem.OperationName;
			НоваяСтрока.Единицаизмеренияназвание=oDocumentItem.MeasureUnitName;
			Попытка
				НоваяСтрока.Комментарий = oDocument.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуСписаний() 

Процедура ЗаписатьСтрокуИнвентаризации(oDocument, oDocumentItem)
	Если ЗначениеЗаполнено(oDocumentItem.Article) тогда
		//Если Число(oDocumentItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(oDocumentItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз7.Добавить();
			НоваяСтрока.Дата= oDocument.Date;
			НоваяСтрока.НомерДок= oDocument.Number;
			НоваяСтрока.Складкод= oDocumentItem.StoreCode;    
			НоваяСтрока.СкладНаименование= oDocumentItem.StoreName;    
			НоваяСтрока.НКодИИКО= oDocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= oDocumentItem.Nomenclature;  
			НоваяСтрока.Группаучетаназвание= oDocumentItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод= oDocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество= oDocumentItem.Amount_DecimalAsString;
			НоваяСтрока.СебестоимостьзаедбезНДС= oDocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС= oDocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС= oDocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод= oDocumentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование= oDocumentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН= oDocumentItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование= oDocumentItem.JuristicPersonName; 
			НоваяСтрока.Счетнедостачикод= oDocument.AccountShortageCode;
			НоваяСтрока.Счетнедостачинаименование= oDocument.AccountShortageName;
			НоваяСтрока.Счетизлишковкод= oDocument.AccountSurplusCode;
			НоваяСтрока.Счетизлишковнаименование= oDocument.AccountSurplusName;
			НоваяСтрока.Типноменклатурыкод= oDocumentItem.NomenclatureType;
			НоваяСтрока.Типноменклатурыназвание= oDocumentItem.NomenclatureTypeName;
			НоваяСтрока.ИзлишкиНедостачаКоличество=oDocumentItem.DiffAmount;
			НоваяСтрока.ИзлишкиНедостачаСумма=oDocumentItem.DiffCost;
			НоваяСтрока.Единицаизмеренияназвание=oDocumentItem.MeasureUnitName;
			Попытка
				НоваяСтрока.Комментарий = oDocument.Comment;
			Исключение 
			КонецПопытки;
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуСписаний() 

Процедура ЗаписатьСтрокуПКВ(oDocument, oDocumentItem)
	Если Число(oDocumentItem.Sum_DecimalAsString)<>0 Тогда
		Если ЗначениеЗаполнено(ЮрЛицо) тогда
			Если СокрЛП(oDocumentItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
				Возврат;
			КонецЕСли;	
		КонецЕСли;	
		НоваяСтрока = Тз4.Добавить();
		НоваяСтрока.Дата= oDocument.Date;
		НоваяСтрока.НомерДок= oDocument.Number;
		НоваяСтрока.Торговоепредприятиекод= oDocumentItem.DepartmentCode; 
		НоваяСтрока.Торговоепредприятиенаименование= oDocumentItem.DepartmentName; 
		НоваяСтрока.ЮЛИНН= oDocumentItem.JuristicPersonINN; 
		НоваяСтрока.ЮЛнаименование= oDocumentItem.JuristicPersonName; 
		НоваяСтрока.Сумма= oDocumentItem.Sum_DecimalAsString;
		НоваяСтрока.Видоплатыкод= oDocumentItem.PaymentTypeId;
		НоваяСтрока.Видоплатынаименование= oDocumentItem.PaymentTypeName;
		НоваяСтрока.Номеркарты= oDocumentItem.Card;
		НоваяСтрока.Номеркассы= oDocument.CashRegisterNumber;
		НоваяСтрока.РегномерККМ= oDocument.CashRegisterSerial;
		НоваяСтрока.Номерсмены= oDocument.SessionNumber;
		НоваяСтрока.ПокупательИНН= oDocumentItem.CardHolderCompanyINN;
		НоваяСтрока.Покупательнаименование= oDocumentItem.CardHolderCompanyName;
		НоваяСтрока.Фамилия= oDocumentItem.CardHolderLastName;
		НоваяСтрока.Имя= oDocumentItem.CardHolderFirstName;
		НоваяСтрока.Отчество= oDocumentItem.CardHolderMiddleName;
		НоваяСтрока.Датарождения= oDocumentItem.CardHolderBirthday_DateTimeAsString;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуСписаний() 

Процедура ЗаписатьСтрокуВН(oDocument, oDocumentItem)
	Если Число(oDocumentItem.Amount_DecimalAsString)<>0 Тогда
		Если ЗначениеЗаполнено(ЮрЛицо) тогда
			Если СокрЛП(oDocumentItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
				Возврат;
			КонецЕСли;	
		КонецЕСли;	

		НоваяСтрока = Тз9.Добавить();
		
		НоваяСтрока.Дата= oDocument.Date;
		НоваяСтрока.НомерДок= oDocument.Number;
		НоваяСтрока.Складкод= oDocumentItem.StoreCode; 
		НоваяСтрока.Складнаименование= oDocumentItem.StoreName; 
		
		НоваяСтрока.НКодИИКО= oDocumentItem.Article; 
		НоваяСтрока.ННаименованиеИИКО= oDocumentItem.Nomenclature; 
		НоваяСтрока.Группаучетаназвание= oDocumentItem.AccountingCategory;
		НоваяСтрока.ГруппаучетаКод= oDocumentItem.AccountingCategoryCode;
		НоваяСтрока.Количество= oDocumentItem.Amount_DecimalAsString;
		НоваяСтрока.ЦенапродажисНДС= oDocumentItem.PriceWithNds_DecimalAsString;
		
		НоваяСтрока.СуммапродажисНДС= oDocumentItem.SumWithNds_DecimalAsString;
		НоваяСтрока.СуммаНДСспродаж= oDocumentItem.Nds_DecimalAsString;
		НоваяСтрока.СтавкаНДСспродаж= oDocumentItem.NdsPercent_DecimalAsString;
		НоваяСтрока.СебестоимостьзаедбезНДС= oDocumentItem.CostPriceByUnit_DecimalAsString;
		НоваяСтрока.СебестоимостьбезНДС= oDocumentItem.CostPrice_DecimalAsString;
		
		НоваяСтрока.СтавкаНДС= oDocumentItem.NdsProductPercent_DecimalAsString;
		НоваяСтрока.Торговоепредприятиекод= oDocumentItem.DepartmentCode;
		НоваяСтрока.Торговоепредприятиенаименование= oDocumentItem.DepartmentName;
		НоваяСтрока.ЮЛИНН= oDocumentItem.JuristicPersonINN;
		НоваяСтрока.ЮЛнаименование= oDocumentItem.JuristicPersonName;
		
		//НоваяСтрока.Операция= oDocument.RevenueAccountCode;
		//НоваяСтрока.Операцияназвание= oDocument.RevenueAccountName;
		НоваяСтрока.КИННИИКО= oDocument.CustomerINN;
		НоваяСтрока.ККодИИКО= oDocument.CustomerCode;
		НоваяСтрока.КНаименованиеИИКО= oDocument.CustomerName;
		
		НоваяСтрока.Приходнаянакладнаядата= oDocument.IncomingInvoiceDate_DateTimeAsString;
		НоваяСтрока.Приходнаянакладнаяномер= oDocument.IncomingInvoiceNumber;
		НоваяСтрока.Счетфактура= oDocument.Invoice;
		НоваяСтрока.Типноменклатурыкод= oDocumentItem.NomenclatureType;
		НоваяСтрока.Типноменклатурыназвание= oDocumentItem.NomenclatureTypeName;
		НоваяСтрока.Единицаизмеренияназвание=oDocumentItem.MeasureUnitName;
		Попытка
			НоваяСтрока.Комментарий = oDocument.Comment;
		Исключение 
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуСписаний() 

Функция ЗаписатьНакладную(Invoice)
	Попытка
		oInvoiceItem = Invoice.GetFirstInvoiceItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТроку(Invoice,oInvoiceItem);   
			oInvoiceItem = invoice.GetNextInvoiceItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьРНакладную(Document)
	Попытка
		oDocumentItem = document.GetFirstOutgoingInvoiceItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьрсТроку(document,oDocumentItem);   
			oDocumentItem = document.GetNextOutgoingInvoiceItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьПеремещение(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstInternalTransferItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПеремещения(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextInternalTransferItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьПриготовление(oDocument)
	Попытка
		oDocumentItem = odocument.GetFirstIncomeItems();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПриготовления(oDocument,oDocumentItem,1);   
			oDocumentItem = oDocument.GetNextIncomeItems();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		oDocumentItem = odocument.GetFirstOutcomeItems();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПриготовления(oDocument,oDocumentItem,0);   
			oDocumentItem = oDocument.GetNextOutcomeItems();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьПереработку(oDocument)
	
	Попытка
		oDocumentItem = odocument.GetFirstIncomeItems();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПереработки(oDocument,oDocumentItem,1);   
			oDocumentItem = oDocument.GetNextIncomeItems();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		oDocumentItem = odocument.GetFirstOutcomeItems();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПереработки(oDocument,oDocumentItem,0);   
			oDocumentItem = oDocument.GetNextOutcomeItems();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьПродажу(oSale)
	Попытка
		oSaleItem = oSale.GetFirstSaleItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПродаж(oSale,oSaleItem);   
			oSaleItem = oSale.GetNextSaleItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Попытка
	 oWriteoffItem = oSale.GetFirstWriteoffItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	Пока Истина Цикл
		Попытка
			ЗаписатьСтрокуСписаний(oSale,oWriteoffItem);   
			oWriteoffItem = oSale.GetNextWriteoffItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьСписание(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstWriteoffDocItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуСписания(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextWriteoffDocItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьИнвентаризацию(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstInventoryItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуИнвентаризации(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextInventoryItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьПКВ(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstProfitTakingItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПКВ(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextProfitTakingItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()

Функция ЗаписатьВН(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstReturnedInvoiceItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуВН(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextReturnedInvoiceItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ЗаписатьСтроку()
  
Процедура ЗаполнитьДокументы(тззз,ВидДокумента,ДатаПрефикс)
	Если ДатаПрефикс<>неопределено и АналитикаДокументов<>"ПоДокументам" Тогда
		Для каждого стр из Тззз цикл
			стр.НомерДок=ПолучитьНомерДокумента(стр.НомерДок, стр.Дата, ДатаПрефикс, ВидДокумента);
			стр.Дата=ДатаДокумМесяц;
		КонецЦикла;
	КонецЕсли;
	
	СуммаЭтоСуммаСНДС=ложь;
	СуммаЭтоСуммапродажисНДС=ложь;
	СуммаЭтоСумма=ложь;
	Если (ВидДокумента="Приходная Накладная") тогда
		СуммаЭтоСуммаСНДС=истина;
	ИначеЕсли (ВидДокумента="Акт Реализации")или(ВидДокумента="Расходная Накладная")или(ВидДокумента="Возвратная Накладная") тогда
		СуммаЭтоСуммапродажисНДС=истина;
	ИначеЕсли (ВидДокумента="Прием кассовой выручки") тогда
		СуммаЭтоСумма=истина;
	КонецЕсли;
	ИгнорироватьСумму=ложь;
	Если (ВидДокумента = "Акт Приготовления")или(ВидДокумента = "Акт Переработки") Тогда
		ИгнорироватьСумму=истина;	
	КонецЕсли;
	ИгнорироватьСумму2=ложь;
	Если (ВидДокумента = "Акт Списания") Тогда
		ИгнорироватьСумму2=истина;	
	КонецЕсли;
	таб=тззз.Скопировать();
	таб.Колонки.Добавить("СуммаДок");
	Для Каждого стр из таб цикл
		Если СуммаЭтоСуммаСНДС тогда
			Стр.СуммаДок=Стр.СуммасНДС;
		ИначеЕсли СуммаЭтоСуммапродажисНДС тогда
			Стр.СуммаДок=Стр.СуммапродажисНДС;
		ИначеЕсли СуммаЭтоСумма тогда
			Стр.СуммаДок=Стр.Сумма;
		Иначе
			Стр.СуммаДок=Стр.СебестоимостьбезНДС;
		КонецЕсли;
		Если ИгнорироватьСумму и Число(СокрЛП(стр.Знакоперации))=2 Тогда
			Стр.СуммаДок=0;
		ИначеЕсли ИгнорироватьСумму2 и Число(СокрЛП(стр.операция))=2 Тогда
			Стр.СуммаДок=0;
		КонецЕсли;
	КонецЦикла;	
	
	ИмеетКонтрагента=(ВидДокумента="Приходная Накладная")или(ВидДокумента="Расходная Накладная")или(ВидДокумента="Возвратная Накладная");
	
	Если ИмеетКонтрагента тогда
		строкаСвертки="Дата,НомерДок,КНаименованиеИИКО,ЮЛнаименование,ККодИИКО";
	ИначеЕсли (ВидДокумента="Внутреннее Перемещение") Тогда
		строкаСвертки="Дата,НомерДок,ЮЛотправительнаименование";
	Иначе
		строкаСвертки="Дата,НомерДок,ЮЛнаименование";
	КонецЕсли;
	Если (ВидДокумента="Внутреннее Перемещение") Тогда 
    	таб.свернуть(строкаСвертки+",СкладОтправительКод","СуммаДок");
		таб.Колонки.Добавить("СкладКод");
		Для каждого дд из таб Цикл
			дд.СкладКод=дд.СкладОтправительКод;
		КонецЦикла;
		таб.Колонки.Удалить("СкладОтправительКод");
	ИначеЕсли (ВидДокумента = "Акт Приготовления")или(ВидДокумента = "Акт Переработки") Тогда 
		таб.свернуть(строкаСвертки+",СкладСписанияКод,СкладПриходаКод","СуммаДок"); 
		таб.Колонки.Добавить("СкладКод");
		таб2 = таб.Скопировать();
		таб2.свернуть(строкаСвертки,"СуммаДок");
		таб2.Колонки.Добавить("СкладКод");
	
		ПараметрыОтбора = Новый Структура;
		Для каждого дд из таб2 Цикл
			Склады1="";
			ПараметрыОтбора.Вставить("НомерДок", дд.НомерДок);
			Для каждого стр из таб.НайтиСтроки(ПараметрыОтбора) Цикл
				Склады1=Склады1+стр.СкладСписанияКод+";"+стр.СкладПриходаКод+";";
			КонецЦикла;
			дд.СкладКод=Склады1;
		КонецЦикла;
		таб = таб2.Скопировать();
	КонецЕсли;
	Если ВидДокумента = "Прием кассовой выручки" Тогда 
		таб.свернуть(строкаСвертки,"СуммаДок");
	Иначе
		таб.свернуть(строкаСвертки+",СкладКод","СуммаДок");
	КонецЕсли;	
		
	Если АналитикаДокументов<>"ПоДокументам" и ВидДокумента<>"Прием кассовой выручки"  Тогда
		//таб2 = Новый ТаблицаЗначений;
		таб2 = таб.Скопировать();
		таб.свернуть(строкаСвертки,"СуммаДок");
		таб.Колонки.Добавить("СкладКод");
		
		ПараметрыОтбора = Новый Структура;
		Для каждого дд из таб Цикл
			Склады1="";
			ПараметрыОтбора.Вставить("НомерДок", дд.НомерДок);
			Для каждого стр из таб2.НайтиСтроки(ПараметрыОтбора) Цикл
				Склады1=Склады1+стр.СкладКод+";";
			КонецЦикла;
			дд.СкладКод=Склады1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого стр из таб Цикл
		Стрр=Докум.Добавить();
		Стрр.ВидДок=ВидДокумента;
		стрр.Выбор=Истина;
		стрр.Дата=ФормаНастройки.ПолучитьДату(стр.Дата);
		Стрр.НомерДок=стр.НомерДок;
		Стрр.СуммаДок=Стр.СуммаДок;
		//Если (ВидДокумента = "Акт Приготовления")или(ВидДокумента = "Акт Переработки")или(ВидДокумента = "Акт Списания") Тогда
		//	Стрр.СуммаДок=Стрр.СуммаДок/2;
		//КонецЕсли;	

		Стрр.Документ=СокрЛП(стр.НомерДок)+"!"+СокрЛП(ВидДокумента);
		// ALEXV: Добавляем колонку с наименованием контрагента
		Если ИмеетКонтрагента тогда
			Попытка
				Стрр.Контрагент = стр.КНаименованиеИИКО;
				Стрр.КонтрагентКодАйко=стр.ККодИИКО;
			Исключение
				Сообщить(ВидДокумента);
			КонецПопытки;
		КонецЕсли;	
		// ALEXV: Добавляем колонку с наименованием Организации
		Если (ВидДокумента="Внутреннее Перемещение") Тогда
			Стрр.Организация = СокрЛП(стр.ЮЛотправительнаименование);
			Стрр.СкладКодАйко=стр.СкладКод;
		ИначеЕсли ВидДокумента<>"Прием кассовой выручки" Тогда
			Стрр.Организация = СокрЛП(стр.ЮЛнаименование);
			Стрр.СкладКодАйко=стр.СкладКод;
		КонецЕсли;
	КонецЦикла;	
	Докум.Сортировать("Дата Возр,НомерДок Возр");
КонецПроцедуры

Функция ПолучитьТЗ(Текст,НачИменаКолонок,УмныеИменаКолонок)
	Тззз=Новый ТаблицаЗначений;  
	Стр1=Текст.ПрочитатьСтроку();
	Спис=ИзСтрокиВСпис(Стр1);
	Если не ЗначениеЗаполнено(Спис) Тогда
		Возврат Ложь;
	КонецЕсли;
	ПравильныеКолонки = Новый Массив(Спис.Количество());
	Для ии=0 по Спис.Количество()-1 цикл
		индекс=НачИменаКолонок.НайтиПоЗначению(Спис[ии]);
		Если индекс<>неопределено Тогда
			ПравильныеКолонки[ии]= СокрЛП(УмныеИменаКолонок[НачИменаКолонок.Индекс(индекс)]);
			Тззз.Колонки.Добавить(ПравильныеКолонки[ии]);		
		Иначе
			//Сообщить("Спис[ии]="+Спис[ии]);
		КонецЕсли;
	КонецЦикла;
	Ткст = Текст.Прочитать();
	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Основной;
	ЭлементыФормы.Индикатор1.МинимальноеЗначение = 0;
	ЭлементыФормы.Индикатор1.МаксимальноеЗначение = СтрЧислоСтрок(Ткст)-2;
	ЭлементыФормы.Индикатор1.Значение = 0;
	ЭтаФорма.Обновить();
	Для ии = 1 По СтрЧислоСтрок(Ткст) Цикл 
		Стр1 = СтрПолучитьСтроку(Ткст,ии);
		Стр2 = Тззз.Добавить();
		Спис1=ИзСтрокиВСпис(Стр1);
		Для хх=0 по ПравильныеКолонки.Количество()-1 цикл
			индекс=ПравильныеКолонки[хх];
			Если индекс<>неопределено Тогда
				Если Спис1.Количество()>хх Тогда
					Стр2[индекс]=Спис1[хх];      
				Иначе
					Стр2[индекс]="";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		ЭлементыФормы.Индикатор1.Значение = ии;
	КонецЦикла;
	Возврат Тззз;
КонецФункции //ПолучитьТЗ(Текст)

Процедура ОбновитьГрупперовку()
	ЕстьНоменклатура=Ложь;
	ЕстьГрупперовка=Ложь;
	Номенклатура.Очистить();
	Группировка.Очистить();
	Для Каждого Стр из ВсяНомеклатураАйко Цикл
		катег=БухгалтерскаяКатегория.Найти(Стр.ГруппаУчетаКод, "КатегорияАйкоКод");
		Если катег.Аналитика="Аналитика" Тогда
			ЕстьНоменклатура=Истина;
			н=Номенклатура.Добавить();
			н.НКодИИКО=Стр.НКодИИКО;
			н.ННаименованиеИИКО=Стр.ННаименованиеИИКО;
			н.Категория=Стр.ГруппаУчетаНазвание;
			ном=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.Номенклатура.Найти(Стр.НКодИИКО,"КодАйко");
			Если ЗначениеЗаполнено(ном) тогда
				н.Номенклатура = ном.Значение;
				Если ЗначениеЗаполнено(н.Номенклатура) и не н.Номенклатура.ЭтоГруппа Тогда
					Если укр=0 тогда
						н.Код1С = ТруКодН(н.Номенклатура.Код);
					Иначе
						н.Код1С = н.Номенклатура.Код;
					КонецЕсли;	
					н.Наименование1С = н.Номенклатура.Наименование;
				Иначе
					н.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;	
			КонецЕсли;
		Иначе              
			ЕстьГрупперовка=Истина;
			Если катег.Аналитика="НДС" Тогда
				ндс=СокрЛП(Стр.СтавкаНДС);
			Иначе
				ндс=СокрЛП(Стр.ГруппаУчетаНазвание)+"/"+СокрЛП(Стр.СтавкаНДС);
			КонецЕсли;
			
			Если (Группировка.Найти(ндс, "СтавкаНДС")=Неопределено) или 
					(Группировка.Найти(Стр.ГруппаУчетаНазвание, "Категория")=Неопределено) Тогда
				г=Группировка.Добавить();
				г.СтавкаНДС=ндс;
				г.Категория=Стр.ГруппаУчетаНазвание;
				г.НДС=СокрЛП(Стр.СтавкаНДС);
			КонецЕсли;	                      
			гр=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.Группировка.Найти(ндс+"-"+СокрЛП(Стр.ГруппаУчетаНазвание),"КодАйко");
			Если гр<>Неопределено и не ЗначениеЗаполнено(г.Номенклатура) тогда
				г.Номенклатура = гр.Значение;
				//Сообщить(ндс+"-"+СокрЛП(Стр.ГруппаУчетаНазвание)+": "+гр.Код1С+", "+г.Номенклатура.Код);
				Если г.Номенклатура.ЭтоГруппа тогда
					г.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	//ТЗНом=ВсяНомеклатураАйко.Скопировать();
	//ТЗНом.Свернуть("НКодИИКО,ННаименованиеИИКО");
	//Номенклатура.Загрузить(ВсяНомеклатураАйко);
	
	ЭлементыФормы.Панель1.Страницы.Номенклатура.Видимость = ЕстьНоменклатура;
	ЭлементыФормы.Панель1.Страницы.Группировка.Видимость = ЕстьГрупперовка;
КонецПроцедуры	

Функция НайтиНоменклатуру(Код, Ставка, ГруппаУчета)
	категория=БухгалтерскаяКатегория.Найти(ГруппаУчета, "");
	Если категория=Неопределено Тогда
		Сообщить("Не найдена категория "+ГруппаУчета+" для номенклатуры: " + Код + ", загрузка невозможна!", СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если категория.Аналитика="Аналитика" Тогда
		 ном=Номенклатура.Найти(Код,"НКодИИКО");
	ИначеЕсли категория.Аналитика="НДС" Тогда
		 ном=Группировка.Найти(СокрлП(Ставка),"СтавкаНДС");
	Иначе	
		 ном=Группировка.Найти(СокрлП(ГруппаУчета)+"/"+СокрлП(Ставка),"СтавкаНДС");
	КонецЕсли;
	Если ном=Неопределено Тогда
		Сообщить("Не найдена номенклатура "+Код+", ндс: "+Ставка+", категория: "+ГруппаУчета+", загрузка невозможна!", СтатусСообщения.ОченьВажное);	
	КонецЕсли;	
	Возврат ном;
КонецФункции	

Процедура ЗагрузитьНоменклатуру(тззз, продажи)
	для Каждого нн из тззз Цикл
		Если продажи тогда
			СтавкаНДС=нн.СтавкаНДСспродаж;
		Иначе
			СтавкаНДС=нн.СтавкаНДС;
		КонецЕсли;
		Если ВсяНомеклатураАйко.Найти(нн.НКодИИКО+"-"+СтавкаНДС,"Ключ")=неопределено Тогда
			Если не ЗначениеЗаполнено(нн.ГруппаУчетаКод) Тогда
				Сообщить("Неизвестный товар: " + нн.ННаименованиеИИКО);
				продолжить;
			КонецЕсли;
			ххх=ВсяНомеклатураАйко.Добавить();
			ххх.Ключ=нн.НКодИИКО+"-"+СтавкаНДС;
			ххх.НКодИИКО=нн.НКодИИКО;
			ххх.ННаименованиеИИКО=нн.ННаименованиеИИКО;
			ххх.СтавкаНДС=СтавкаНДС;
			ххх.ГруппаУчетаКод=нн.ГруппаУчетаКод;
			ххх.ГруппаУчетаНазвание=нн.ГруппаУчетаНазвание;
			ххх.ЕдиницаИзмерения=нн.Единицаизмеренияназвание;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры 

Процедура ФильтрПоЮрЛицам(ТабЗнач, юл)
	кво=ТабЗнач.Количество()-1;
	Для ии=0 по кво цикл
		Если СокрЛП(ТабЗнач[ии].ЮЛнаименование)<>юл тогда
			ТабЗнач.Удалить(ии);
			ии = ии-1;
			кво=ТабЗнач.Количество()-1;
		КонецЕсли;		
		Если ии=кво Тогда
			//Для ии=0 по ТабЗнач.Количество()-1 цикл
			//	Сообщить(""+ии+") " + ТабЗнач[ии].ЮЛнаименование)	
			//КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЦикла;     	
	//Для ии=0 по ТабЗнач.Количество()-1 цикл
	//	Сообщить(""+ии+") " + ТабЗнач[ии].ЮЛнаименование)	
	//КонецЦикла;
КонецПроцедуры //ФильтрПоЮрЛицам()

Процедура ФильтрПоЮрЛицамПеремещение(ТабЗнач, юл)
	кво=ТабЗнач.Количество()-1;
	Для ии=0 по кво цикл
		Если СокрЛП(ТабЗнач[ии].ЮЛотправительнаименование)<>юл тогда
			ТабЗнач.Удалить(ии);
			ии = ии-1;
			кво=ТабЗнач.Количество()-1;
		КонецЕсли;		
		Если ии=кво Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;     	
КонецПроцедуры //ФильтрПоЮрЛицамПеремещение()

Функция ВыбратьЮрлицо()
 	Если Юр=0 Тогда
		Возврат "";
	КонецЕсли;	   
	СписокЮрлиц=Новый СписокЗначений;
	Если пн Тогда
		Для каждого Стр из Тз Цикл   
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли;
	Если ВП Тогда
		Для каждого Стр из  Тз2 Цикл   
			Если ЗначениеЗаполнено(Стр.ЮЛотправительнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛотправительнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛотправительнаименование);   
				КонецЕсли;  
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли;
	Если РН Тогда
		Для каждого Стр из  Тз8 Цикл  
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли;
	Если АП Тогда
		Для каждого Стр из  Тз3 Цикл  
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли;
	Если АР Тогда
		Для каждого Стр из  Тз1 Цикл 
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);     
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли;
	Если АС Тогда
		Для каждого Стр из  Тз6 Цикл  
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;  
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли;
	Если ИН Тогда
		Для каждого Стр из  Тз7 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли; 
	Если ВН Тогда
		Для каждого Стр из  Тз9 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли; 
	Если АПЕР Тогда
		Для каждого Стр из  Тз5 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли; 
	Если БезналичныеОплаты="ИзПриемаКассовойВыручки" Тогда
		Для каждого Стр из  Тз4 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование)=неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
	КонецЕсли; 

	// нужно выбирать всегда, т.к. в выгрузке может быть одно ненужое Юр. лицо.
	Если СписокЮрлиц.Количество()>0 Тогда
		Стрр=СписокЮрлиц.ВыбратьЭлемент("Выберите Юр.Лицо!",);
		юл=СокрЛП(Стрр);
		Если ВП=1 Тогда
			ФильтрПоЮрЛицамПеремещение(Тз2, юл);  
		КонецЕсли;
		Если ПН=1 Тогда
			ФильтрПоЮрЛицам(Тз, юл);   
		КонецЕсли; 
		Если АР=1 Тогда
			ФильтрПоЮрЛицам(Тз1, юл);   
		КонецЕсли;             
		Если АП=1 Тогда
			ФильтрПоЮрЛицам(Тз3, юл);   
		КонецЕсли;
		Если РН=1 Тогда
			ФильтрПоЮрЛицам(Тз8, юл);   
		КонецЕсли;             
		Если АС=1 Тогда
			ФильтрПоЮрЛицам(Тз6, юл);   
		КонецЕсли;             
		Если ИН=1 Тогда
			ФильтрПоЮрЛицам(Тз7, юл);   
		КонецЕсли;  
		Если ВН=1 Тогда
			ФильтрПоЮрЛицам(Тз9, юл);   
		КонецЕсли;  
		Если АПЕР Тогда
			ФильтрПоЮрЛицам(Тз5, юл);   
		КонецЕсли; 
		Если БезналичныеОплаты="ИзПриемаКассовойВыручки" Тогда
			ФильтрПоЮрЛицам(Тз4, юл);   
		КонецЕсли; 
	Иначе
		Стрр="";
	КонецЕсли;         
	Возврат СокрЛП(Стрр);
КонецФункции   

Процедура ИнициализироватьИменаКолонок()
	// Приходная накладная
	НачИменаКолонок = Новый СписокЗначений;
	НачИменаКолонок.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Вход. номер;Вход. дата;Поставщик (ИНН);Поставщик (код);Поставщик (наименование);Сотрудник (код);Сотрудник (наименование);Склад(код);Склад (наименование);Счет-фактура;Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена с НДС;Сумма с НДС;Сумма НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Комментарий"));
	УмныеИменаКолонок = ИзСтрокиВСпис("Дата;НомерДок;Входномер;Входдата;КИННИИКО;ККодИИКО;КНаименованиеИИКО;Сотрудниккод;Сотрудникнаименование;СкладКод;СкладНаименование;СчетФактура;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Колво;ЦенасНДС;СуммасНДС;СуммаНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;Комментарий");
		// Акт реализации
	НачИменаКолонок1 = Новый СписокЗначений;
	//НачИменаКолонок1.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад(код);Склад (наименование);Операция;Операция (название);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена продажи с НДС;Сумма продажи с НДС;Сумма НДС с продаж;Ставка НДС с продаж;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип списания;Тип списания (название);Движение денежных средств (код);Движение денежных средств;Статья расходов(код);Статья расходов;Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название);Проданное блюдо (код);Проданное блюдо (название)"));
	//УмныеИменаКолонок1 = ИзСтрокиВСпис("Дата;НомерДок;Складкод;СкладНаименование;Операция;Операцияназвание;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;ТипСписания;ТипСписанияНазвание;Движениеденежныхсредствкод;Движениеденежныхсредств;Статьярасходовкод;Статьярасходов;Типноменклатурыкод;Типноменклатурыназвание;Целевоеблюдокод;Целевоеблюдоназвание;Единицаизмерениякод;Единицаизмеренияназвание;ПроданноеБлюдоКод;ПроданноеБлюдоНазвание");	
	НачИменаКолонок1.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад(код);Склад (наименование);Операция;Операция (название);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена продажи с НДС;Сумма продажи с НДС;Сумма НДС с продаж;Ставка НДС с продаж;Себестоимость за ед. без НДС;Себестоимость без НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип списания;Тип списания (название);Движение денежных средств (код);Движение денежных средств;Проданное блюдо (код);Проданное блюдо (название);Единица измерения (название);Комментарий"));
	УмныеИменаКолонок1 = ИзСтрокиВСпис("Дата;НомерДок;Складкод;СкладНаименование;Операция;Операцияназвание;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;ТипСписания;ТипСписанияНазвание;Движениеденежныхсредствкод;Движениеденежныхсредств;ПроданноеБлюдоКод;ПроданноеБлюдоНазвание;Единицаизмеренияназвание;Комментарий");	
	// Внутренне перемещение
	НачИменаКолонок2 = Новый СписокЗначений;
	НачИменаКолонок2.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Торговое предприятие отправитель (код);Торговое предприятие отправитель (наименование);ЮЛ отправитель (ИНН);ЮЛ отправитель (наименование);Склад отправитель (код);Склад отправитель (наименование);Торговое предприятие получатель(код);Торговое предприятие получатель (наименование);ЮЛ получатель (ИНН);ЮЛ получатель (наименование);Склад получатель (код);Склад получатель (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Комментарий"));
	УмныеИменаКолонок2 = ИзСтрокиВСпис("Дата;НомерДок;Торговоепредприятиеотправителькод;Торговоепредприятиеотправительнаименование;ЮЛотправительИНН;ЮЛотправительнаименование;Складотправителькод;Складотправительнаименование;Торговоепредприятиеполучателькод;Торговоепредприятиеполучательнаименование;ЮЛполучательИНН;ЮЛполучательнаименование;Складполучателькод;Складполучательнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;Комментарий");	
	// Акт приготовления / Акт переработки
	НачИменаКолонок3 = Новый СписокЗначений;
	
	//                                                  Дата;Номер;Склад списания(код);Склад списания (наименование);Склад прихода(код);Склад прихода (наименование);Знак операции;Знак операции (название);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название)
	НачИменаКолонок3.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад списания(код);Склад списания (наименование);Склад прихода(код);Склад прихода (наименование);Знак операции;Знак операции (название);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название);Комментарий"));
	УмныеИменаКолонок3 = ИзСтрокиВСпис("Дата;НомерДок;Складсписаниякод;Складсписаниянаименование;Складприходакод;Складприходанаименование;Знакоперации;Знакоперацииназвание;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Типноменклатурыкод;Типноменклатурыназвание;Целевоеблюдокод;Целевоеблюдоназвание;Единицаизмерениякод;Единицаизмеренияназвание;Комментарий");	
	//                                                                                                  5                                                                                   10                                                                                       15                                                                                      20                                                                                                25                       26
	НачИменаКолонок4 = Новый СписокЗначений;
	НачИменаКолонок4.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Сумма;Вид оплаты(код);Вид оплаты(наименование);Номер карты;Номер кассы;Рег. номер ККМ;Номер смены;Покупатель(ИНН);Покупатель (наименование);Фамилия;Имя;Отчество;Дата рождения;Комментарий"));
	УмныеИменаКолонок4 = ИзСтрокиВСпис("Дата;НомерДок;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Сумма;Видоплатыкод;Видоплатынаименование;Номеркарты;Номеркассы;РегномерККМ;Номерсмены;ПокупательИНН;Покупательнаименование;Фамилия;Имя;Отчество;Датарождения;Комментарий");	
	// Акт списания
	НачИменаКолонок6 = Новый СписокЗначений;
	НачИменаКолонок6.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Статья расходов;Статья расходов(код);Тип списания;Тип списания (название);Операция;Операция (название);Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название);Проданное блюдо (код);Проданное блюдо (название);Комментарий"));
	УмныеИменаКолонок6 = ИзСтрокиВСпис("Дата;НомерДок;Складкод;Складнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Статьярасходов;Статьярасходовкод;Типсписания;Типсписанияназвание;Операция;Операцияназвание;Типноменклатурыкод;Типноменклатурыназвание;Целевоеблюдокод;Целевоеблюдоназвание;Единицаизмерениякод;Единицаизмеренияназвание;ПроданноеБлюдоКод;ПроданноеБлюдоНазвание;Комментарий");	
	// Инвентаризация
	НачИменаКолонок7 = Новый СписокЗначений;
	
	//                                                  Дата;Номер;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Счет недостачи (код);Счет недостачи (наименование);Счет излишков (код);Счет излишков (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название)
	// "Себестоимость за ед. без НДС" переименован в "Себестоимость за ед.", добавим обе колонки
	НачИменаКолонок7.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед.;Себестоимость;Ставка НДС;Счет недостачи (код);Счет недостачи (наименование);Счет излишков (код);Счет излишков (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Излишки/Недостача (количество);Излишки/Недостача (сумма);Себестоимость за ед. без НДС;Себестоимость без НДС;Комментарий"));
	УмныеИменаКолонок7 = ИзСтрокиВСпис("Дата;НомерДок;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Складкод;Складнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Счетнедостачикод;Счетнедостачинаименование;Счетизлишковкод;Счетизлишковнаименование;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;ИзлишкиНедостачаКоличество;ИзлишкиНедостачаСумма;СебестоимостьбезНДС;СебестоимостьзаедбезНДС;Комментарий");	
	//                                                                                                          5                                                           10                                                                                         15                                                                                           20                                                                                     24
	// Расходная накладная
	НачИменаКолонок8 = Новый СписокЗначений;
	НачИменаКолонок8.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена продажи с НДС;Сумма продажи с НДС;Сумма НДС с продаж;Ставка НДС с продаж;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Операция;Операция (название);Тип списания;Тип списания (название);Движение денежных средств (код);Движение денежных средств;Статья расходов(код);Статья расходов;Покупатель (ИНН);Покупатель (код);Покупатель (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название);Комментарий"));
	УмныеИменаКолонок8 = ИзСтрокиВСпис("Дата;НомерДок;Складкод;Складнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Операция;Операцияназвание;Типсписания;Типсписанияназвание;Движениеденежныхсредствкод;Движениеденежныхсредств;Статьярасходовкод;Статьярасходов;КИННИИКО;ККодИИКО;КНаименованиеИИКО;Типноменклатурыкод;Типноменклатурыназвание;Целевоеблюдокод;Целевоеблюдоназвание;Единицаизмерениякод;Единицаизмеренияназвание;Комментарий");	
	// Возвратная накладная
	НачИменаКолонок9 = Новый СписокЗначений;
	НачИменаКолонок9.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена продажи с НДС;Сумма продажи с НДС;Сумма НДС с продаж;Ставка НДС с продаж;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Движение денежных средств (код);Движение денежных средств;Статья расходов(код);Статья расходов;Покупатель (ИНН);Покупатель (код);Покупатель (наименование);Приходная накладная (дата);Приходная накладная (номер);Счет-фактура;Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Комментарий"));
	УмныеИменаКолонок9 = ИзСтрокиВСпис("Дата;НомерДок;Складкод;Складнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Движениеденежныхсредствкод;Движениеденежныхсредств;Статьярасходовкод;Статьярасходов;КИННИИКО;ККодИИКО;КНаименованиеИИКО;Приходнаянакладнаядата;Приходнаянакладнаяномер;Счетфактура;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;Комментарий");
КонецПроцедуры	

Процедура ЗагрузитьДокументыИзФайлов()
		Если пн  тогда
			Текст = Новый ЧтениеТекста(Каталог1с+"\Приходная накладная.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Приходная накладная.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл приходных накладных "+Каталог1с+"\Приходная накладная.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз=ПолучитьТЗ(Текст,НачИменаКолонок,УмныеИменаКолонок);
			Если ТЗ=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		Если ар  тогда
			Текст1 = Новый ЧтениеТекста(Каталог1с+"\Акт реализации.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Акт реализации.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл актов реализации "+Каталог1с+"\Акт реализации.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз1=ПолучитьТЗ(Текст1,НачИменаКолонок1,УмныеИменаКолонок1);
			Если ТЗ1=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			Если Тз1.Колонки.Найти("ПроданноеБлюдоКод")<>неопределено Тогда
				ВерсияАйко=2;
			КонецЕсли;	
		КонецЕсли;
		
		Если вп  тогда
			Текст2 = Новый ЧтениеТекста(Каталог1с+"\Внутреннее перемещение.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Внутреннее перемещение.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл внутренних перемещений "+Каталог1с+"\Внутреннее перемещение.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз2=ПолучитьТЗ(Текст2,НачИменаКолонок2,УмныеИменаКолонок2);
			Если ТЗ2=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если АП  тогда
			Текст3 = Новый ЧтениеТекста(Каталог1с+"\Акт приготовления.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Акт приготовления.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл актов приготовлений "+Каталог1с+"\Акт приготовления.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз3=ПолучитьТЗ(Текст3,НачИменаКолонок3,УмныеИменаКолонок3);
			Если ТЗ3=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			Для Каждого стрр из тз3 цикл
				Если Значениезаполнено(стрр.Складсписаниянаименование) тогда
					стрр.Складприходанаименование=стрр.Складсписаниянаименование;
				Иначе
					стрр.Складсписаниянаименование=стрр.Складприходанаименование;
				КонецЕСли;	
			КонецЦикла;	
		КонецЕсли;
		
		Если АПЕР  тогда
			Текст5 = Новый ЧтениеТекста(Каталог1с+"\Акт переработки.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Акт переработки.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл актов переработки "+Каталог1с+"\Акт переработки.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз5=ПолучитьТЗ(Текст5,НачИменаКолонок3,УмныеИменаКолонок3);
			Если Тз5=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			Для Каждого стрр из Тз5 цикл
				Если Значениезаполнено(стрр.Складсписаниянаименование) тогда
					стрр.Складприходанаименование=стрр.Складсписаниянаименование;
				Иначе
					стрр.Складсписаниянаименование=стрр.Складприходанаименование;
				КонецЕСли;	
			КонецЦикла;	
		КонецЕсли;
		
		Если АС  тогда
			Текст6 = Новый ЧтениеТекста(Каталог1с+"\Акт списания.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Акт списания.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл актов списаний "+Каталог1с+"\Акт списания.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз6=ПолучитьТЗ(Текст6,НачИменаКолонок6,УмныеИменаКолонок6);
			Если Тз6=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Рн  тогда
			Текст8 = Новый ЧтениеТекста(Каталог1с+"\Расходная накладная.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Расходная накладная.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл Расходных накладных "+Каталог1с+"\Расходная накладная.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз8=ПолучитьТЗ(Текст8,НачИменаКолонок8,УмныеИменаКолонок8);
			Если ТЗ8=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		Если ар и (БезналичныеОплаты="ИзПриемаКассовойВыручки") тогда
			Текст4 = Новый ЧтениеТекста(Каталог1с+"\Прием кассовой выручки.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Прием кассовой выручки.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл ПКВ "+Каталог1с+"\Прием кассовой выручки.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз4=ПолучитьТЗ(Текст4,НачИменаКолонок4,УмныеИменаКолонок4);
			Если ТЗ4=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
    	Если вн  тогда
			Текст9 = Новый ЧтениеТекста(Каталог1с+"\Возвратная накладная.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Возвратная накладная.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл возвратных накладных "+Каталог1с+"\Возвратная накладная.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз9=ПолучитьТЗ(Текст9,НачИменаКолонок9,УмныеИменаКолонок9);
			Если ТЗ9=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
    	Если ИН тогда
			Текст7 = Новый ЧтениеТекста(Каталог1с+"\Инвентаризация.csv",КодировкаТекста.ANSI);
			ФС = Новый Файл(Каталог1с+"\Инвентаризация.csv");
			Если НЕ Фс.Существует() Тогда    
				Сообщить("Файл возвратных накладных "+Каталог1с+"\Инвентаризация.csv не найден!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;  
			Тз7=ПолучитьТЗ(Текст7,НачИменаКолонок7,УмныеИменаКолонок7);
			Если ТЗ7=Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьДокументыССервера()
	Если пн Тогда
			Тз=Новый ТаблицаЗначений;  
			ПравильныеКолонки = Новый Массив(НачИменаКолонок.Количество());
			Для ии=0 по УмныеИменаКолонок.Количество()-1 цикл
				ПравильныеКолонки[ии]= СокрЛП(УмныеИменаКолонок[ии]);
				Тз.Колонки.Добавить(ПравильныеКолонки[ии]);		
			КонецЦикла;
		КонецЕсли;
		
		Если ар Тогда
			Тз1=Новый ТаблицаЗначений;  
			ПравильныеКолонки1 = Новый Массив(НачИменаКолонок1.Количество());
			Для ии=0 по УмныеИменаКолонок1.Количество()-1 цикл
				ПравильныеКолонки1[ии]= СокрЛП(УмныеИменаКолонок1[ии]);
				Тз1.Колонки.Добавить(ПравильныеКолонки1[ии]);		
			КонецЦикла;
		КонецЕсли;
		
		Если ВП Тогда
			Тз2=Новый ТаблицаЗначений;  
			ПравильныеКолонки2 = Новый Массив(НачИменаКолонок2.Количество());
			Для ии=0 по УмныеИменаКолонок2.Количество()-1 цикл
				ПравильныеКолонки2[ии]= СокрЛП(УмныеИменаКолонок2[ии]);
				Тз2.Колонки.Добавить(ПравильныеКолонки2[ии]);		
			КонецЦикла;
		КонецЕсли;
		
		Если АП Тогда
			Тз3=Новый ТаблицаЗначений;  
			ПравильныеКолонки3 = Новый Массив(НачИменаКолонок3.Количество());
			Для ии=0 по УмныеИменаКолонок3.Количество()-1 цикл
				ПравильныеКолонки3[ии]= СокрЛП(УмныеИменаКолонок3[ии]);
				Тз3.Колонки.Добавить(ПравильныеКолонки3[ии]);		
			КонецЦикла;
		КонецЕсли;
		
		Если РН Тогда
			Тз8=Новый ТаблицаЗначений;  
			ПравильныеКолонки8 = Новый Массив(НачИменаКолонок8.Количество());
			Для ии=0 по УмныеИменаКолонок8.Количество()-1 цикл
				ПравильныеКолонки8[ии]= СокрЛП(УмныеИменаКолонок8[ии]);
				Тз8.Колонки.Добавить(ПравильныеКолонки8[ии]);		
			КонецЦикла;
		КонецЕсли;
		
		Если АПЕР Тогда
			Тз5=Новый ТаблицаЗначений;  
			ПравильныеКолонки3 = Новый Массив(НачИменаКолонок3.Количество());
			Для ии=0 по УмныеИменаКолонок3.Количество()-1 цикл
				ПравильныеКолонки3[ии]= СокрЛП(УмныеИменаКолонок3[ии]);
				Тз5.Колонки.Добавить(ПравильныеКолонки3[ии]);		
			КонецЦикла;
		КонецЕсли;
		
		Если АС Тогда
			Тз6=Новый ТаблицаЗначений;  
			ПравильныеКолонки6 = Новый Массив(НачИменаКолонок6.Количество());
			Для ии=0 по УмныеИменаКолонок6.Количество()-1 цикл
				ПравильныеКолонки6[ии]= СокрЛП(УмныеИменаКолонок6[ии]);
				Тз6.Колонки.Добавить(ПравильныеКолонки6[ии]);		
			КонецЦикла;
		КонецЕсли;
		
		Если ИН Тогда
			Тз7=Новый ТаблицаЗначений;  
			ПравильныеКолонки7 = Новый Массив(НачИменаКолонок7.Количество());
			// В УмныеКолонки добавили 2 дублирующие колонки (себистоимость) для совместимости (убрали без НДС)
			// Их не добавляем
			Для ии=0 по УмныеИменаКолонок7.Количество()-3 цикл      
				ПравильныеКолонки7[ии]= СокрЛП(УмныеИменаКолонок7[ии]);
				Тз7.Колонки.Добавить(ПравильныеКолонки7[ии]);	
			КонецЦикла;
		КонецЕсли;
		
		Если БезналичныеОплаты="ИзПриемаКассовойВыручки" Тогда
			Тз4=Новый ТаблицаЗначений;  
			ПравильныеКолонки4 = Новый Массив(НачИменаКолонок4.Количество());
			Для ии=0 по УмныеИменаКолонок4.Количество()-1 цикл
				ПравильныеКолонки4[ии]= СокрЛП(УмныеИменаКолонок4[ии]);
				Тз4.Колонки.Добавить(ПравильныеКолонки4[ии]);	
			КонецЦикла;
		КонецЕсли;
		
		Если ВН Тогда
			Тз9=Новый ТаблицаЗначений;  
			ПравильныеКолонки9 = Новый Массив(НачИменаКолонок9.Количество());
			Для ии=0 по УмныеИменаКолонок9.Количество()-1 цикл
				ПравильныеКолонки9[ии]= СокрЛП(УмныеИменаКолонок9[ии]);
				Тз9.Колонки.Добавить(ПравильныеКолонки9[ии]);	
			КонецЦикла;
		КонецЕсли;
		
		Естьче=0;
		
 		Если пн тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oInvoces=o.LoadInvoiceData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
				ЕстьЧе=1;
				oInvoce = oInvoces.GetFirstInvoiceData();
			Исключение   
				Сообщить("В данном периоде накладные не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьНакладную(oInvoce)=истина Цикл
				Попытка
					oInvoce = oInvoces.GetNextInvoiceData();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
		
		Если ар тогда
			//Сообщить("ДатаЗагр1:" + ТекущаяДата());//ТЕСТВРЕМЯ
			ВерсияАйко=0;
			Попытка 
				к=Новый COMОбъект("iiko1CInterface.Version"); 
				в=к.ProtocolVersion;
				ВерсияАйко=Число(в);
			Исключение   
				//Сообщить("В данном периоде акты реализации не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;	
			Если ВерсияАйко>2 Тогда
				o=Новый COMОбъект("iiko1CInterface.DocumentLoader");
				Попытка                               
					Состояние("Подключаемся к серверу iiko!");
					фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
					фильтр.DateFrom=НачПериода;
					фильтр.DateTo=КонПериода;
					фильтр.UseOnlyDate=истина;
					Если ВерсияАйко>=4 Тогда
						Если АналитикаДокументов="День" Тогда
							фильтр.AnalyticsByDate=1;
						ИначеЕсли АналитикаДокументов="Месяц" Тогда
							фильтр.AnalyticsByDate=2;
						КонецЕсли;		
						Если СвернутьТовары Тогда
							фильтр.CutDownDishes=2;
						Иначе
							фильтр.CutDownDishes=0;
						КонецЕсли;
					КонецЕсли;
					oSales=o.LoadSalesData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), фильтр);
					ЕстьЧе=1;
					oSale = oSales.GetFirstSaleData();
				Исключение   
					Сообщить("В данном периоде акты реализации не обнаружены! " + ОписаниеОшибки());
				КонецПопытки;
			Иначе
				o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
				Попытка                               
					Состояние("Подключаемся к серверу iiko!");
					oSales=o.LoadSalesData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
					ЕстьЧе=1;
					oSale = oSales.GetFirstSaleData();
				Исключение   
					Сообщить("В данном периоде акты реализации не обнаружены! " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			Пока ЗаписатьПродажу(oSale)=истина Цикл
				Попытка
					oSale = oSales.GetNextSaleData();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
			//Сообщить("ДатаЗагр2:" + ТекущаяДата());//ТЕСТВРЕМЯ
		КонецЕсли;
		
		Если ВП тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oDocuments = o.LoadInternalTransfersData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
				ЕстьЧе=1;
				oDocument = oDocuments.GetFirstInternalTransfer();
			Исключение   
				Сообщить("В данном периоде перемещения не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьПеремещение(oDocument)=истина Цикл
				Попытка
					oDocument = oDocuments.GetNextInternalTransfer();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
		
		Если АП тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oDocuments = o.LoadProductionsData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
				ЕстьЧе=1;
				oDocument = oDocuments.GetFirstProduction();
			Исключение   
				Сообщить("В данном периоде акты приготовления не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьПриготовление(oDocument)=истина Цикл
				Попытка
					oDocument = oDocuments.GetNextProduction();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
		
		Если рн тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oDocuments=o.LoadOutgoingInvoicesData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
		    	ЕстьЧе=1;
				oDocument = oDocuments.GetFirstOutgoingInvoice();
			Исключение   
				Сообщить("В данном периоде накладные не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьРНакладную(oDocument)=истина Цикл
				Попытка
					oDocument = oDocuments.GetNextOutgoingInvoice();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
		
		Если АПЕР тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oDocuments = o.LoadTransformationsData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
				ЕстьЧе=1;
				oDocument = oDocuments.GetFirstTransformation();
			Исключение   
				Сообщить("В данном периоде акты переработки не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьПереработку(oDocument)=истина Цикл
				Попытка
					oDocument = oDocuments.GetNextTransformation();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
		
		Если АС тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oDocuments = o.LoadWriteoffsData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
				ЕстьЧе=1;
				oDocument = oDocuments.GetFirstWriteoff();
			Исключение   
				Сообщить("В данном периоде акты списания не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьСписание(oDocument)=истина Цикл
				Попытка
					oDocument = oDocuments.GetNextWriteoff();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
		
		Если ИН тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oDocuments = o.LoadInventoriesData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
				ЕстьЧе=1;
				oDocument = oDocuments.GetFirstInventory();
			Исключение   
				Сообщить("В данном периоде инвентаризации не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьИнвентаризацию(oDocument)=истина Цикл
				Попытка
					oDocument = oDocuments.GetNextInventory();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
		
		Если БезналичныеОплаты="ИзПриемаКассовойВыручки" тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oDocuments = o.LoadProfitTakingData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
			    ЕстьЧе=1;
				oDocument = oDocuments.GetFirstProfitTaking();
			Исключение   
				Сообщить("В данном периоде причемы кассовой выручки не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьПКВ(oDocument)=истина Цикл
				Попытка
					oDocument = oDocuments.GetNextProfitTaking();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
		
		Если ВН тогда
			o=Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                               
				Состояние("Подключаемся к серверу iiko!");
				oDocuments = o.LoadReturnedInvoicesData("http://"+СокрЛП(ПутьКсерверу)+":"+СокрЛП(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода+86400);
				ЕстьЧе=1;
				oDocument = oDocuments.GetFirstReturnedInvoice();
			Исключение   
				Сообщить("В данном периоде возвратные накладные не обнаружены! " + ОписаниеОшибки());
			КонецПопытки;
			Пока ЗаписатьВН(oDocument)=истина Цикл
				Попытка
					oDocument = oDocuments.GetNextReturnedInvoice();
				Исключение 
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;
	Возврат Естьче;
КонецФункции

Процедура ДобавитьКонтрагентов(тз)
	для Каждого нн из ТЗ Цикл
		Если ПустаяСтрока(нн.ККодИИКО) Тогда  
			нн.ККодИИКО=Лев(нн.КНаименованиеИИКО,11);
		КонецЕсли;
		Если Контрагенты.Найти(нн.ККодИИКО,"ККодИИКО")=неопределено Тогда
			ххх=Контрагенты.Добавить();
			ххх.КИННИИКО=ФормаНастройки.ИсправленныйЮЛИНН(нн.КИННИИКО);
			ххх.ККодИИКО=нн.ККодИИКО;
			ххх.КНаименованиеИИКО=нн.КНаименованиеИИКО;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура ЗагрузитьНажатие(Элемент)
	
	Если (Докум.Количество()>0) Тогда           
		//Если не ЗначениеЗаполнено (Юрлицо) Тогда
		Если Вопрос("Вы хотите перезаполнить таблицы соответствия?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
				БухгалтерскаяКатегория.Очистить();
				Контрагенты.Очистить();  
				Номенклатура.Очистить();
				Склады.Очистить();
				Докум.Очистить();
				ВидыОплаты.Очистить();
				ВидыОплатыСчета.Очистить();
				Группировка.Очистить();
				ФизЛица.Очистить();
				ЭлементыФормы.Панель1.Страницы.Категории.Видимость = Истина;
				ЭлементыФормы.Панель1.Страницы.Контрагенты.Видимость = Истина;
				ЭлементыФормы.Панель1.Страницы.Номенклатура.Видимость = Истина;
				ЭлементыФормы.Панель1.Страницы.Склады.Видимость = Истина;
				ЭлементыФормы.Панель1.Страницы.ФизЛица.Видимость = Ложь;
			Иначе    
				ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Контрагенты;
				Возврат;
			КонецЕсли;
		//Иначе
		//	Контрагенты.Очистить();  
		//	Номенклатура.Очистить();
		//	Склады.Очистить();
		//	Докум.Очистить();
		//	ВидыОплаты.Очистить();
		//	Группировка.Очистить();
		//	ЭлементыФормы.Панель1.Страницы.Контрагенты.Видимость = Истина;
		//	ЭлементыФормы.Панель1.Страницы.Номенклатура.Видимость = Истина;
		//	ЭлементыФормы.Панель1.Страницы.Склады.Видимость = Истина;
		//КонецЕсли;
	КонецЕсли;

	
	Если не пн и не ар и не вп и не АП и не РН и не АПЕР и не АС и не ИН и не ВН Тогда
		Сообщить("Выберите тип загружаемого документа!");
		Возврат;
	КонецЕсли;  
                                                                               
	Если ЭлементыФормы.Файл.ТекущаяСтраница=ЭлементыФормы.Файл.Страницы.Сервер Тогда
		
		Если (не ЗначениеЗаполнено(НачПериода)) ИЛИ (не ЗначениеЗаполнено(КонПериода)) Тогда
			Предупреждение("Неверный интервал!!!");
			Возврат;
		Иначе
			Если КонПериода<НачПериода Тогда
				Предупреждение("Неверный интервал!!!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Естьче = ЗагрузитьДокументыССервера();
				
		Если ЕстьЧе=0 Тогда
			Возврат;
		КонецЕсли;	
	Иначе    /// ФАЙЛО
		ЗагрузитьДокументыИзФайлов();
	КонецЕсли; 
	
	ВсяНомеклатураАйко=Новый ТаблицаЗначений;
	ВсяНомеклатураАйко.Колонки.Добавить("Ключ");
	ВсяНомеклатураАйко.Колонки.Добавить("НКодИИКО"); 
	ВсяНомеклатураАйко.Колонки.Добавить("ННаименованиеИИКО"); 
	ВсяНомеклатураАйко.Колонки.Добавить("ГруппаУчетаКод");
	ВсяНомеклатураАйко.Колонки.Добавить("ГруппаУчетаНазвание");
	ВсяНомеклатураАйко.Колонки.Добавить("СтавкаНДС");
	ВсяНомеклатураАйко.Колонки.Добавить("ЕдиницаИзмерения");
	
	// Начальное заполнение таблиц	
	//Если не ЗначениеЗаполнено(Юрлицо)  Тогда
	Юрлицо=ВыбратьЮрлицо();
	//	Если  ЗначениеЗаполнено(Юрлицо) тогда
	//		ЗагрузитьНажатие(Юрлицо);
	//	КонецЕСли;	
	//КонецЕсли;
	Если пн тогда
		для Каждого нн из ТЗ Цикл
			НН.Колво=УдалитьПробелы(НН.Колво);
			Если Число(НН.Колво)=0 Тогда
				Тз.Удалить(нн);
			Иначе
				НН.ЦенасНДС=УдалитьПробелы(НН.ЦенасНДС);
				НН.СуммасНДС=УдалитьПробелы(НН.СуммасНДС);
				НН.СуммаНДС=УдалитьПробелы(НН.СуммаНДС);
				Если не ПустаяСтрока(нн.СотрудникКод) тогда
					Если ФизЛица.Найти(нн.СотрудникКод, "КодАйко")=неопределено Тогда
						ххх=ФизЛица.Добавить();
						ххх.КодАйко=нн.СотрудникКод;
						ххх.НазваниеАйко=нн.СотрудникНаименование;
					КонецЕсли;
				КонеЦЕсли;
			КонецЕсли;	
		КонецЦикла;   
		ТЗКонтр = ТЗ.Скопировать();
		ТЗКонтр.Свернуть("КИННИИКО,ККодИИКО,КНаименованиеИИКО");
		Контрагенты.Загрузить(ТЗКонтр);
		ЗагрузитьНоменклатуру(ТЗ,ложь);
		ТзСклад=Тз.Скопировать();
		ТзСклад.Свернуть("СкладНаименование,СкладКод");
		Склады.Загрузить(ТзСклад);
	КонецЕсли;
	
	Если Ар Тогда
		для Каждого нн из ТЗ1 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 и Число(НН.СебестоимостьбезНДС)=0 Тогда
				Тз1.Удалить(нн);
			Иначе
				НН.ЦенапродажисНДС=УдалитьПробелы(НН.ЦенапродажисНДС);
				НН.СуммапродажисНДС=УдалитьПробелы(НН.СуммапродажисНДС);
				НН.СуммаНДСспродаж=УдалитьПробелы(НН.СуммаНДСспродаж);
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
		ЗагрузитьНоменклатуру(ТЗ1,истина);
	
		для Каждого нн из ТЗ1 Цикл
			Если Склады.Найти(нн.СкладНаименование,"СкладНаименование")=Неопределено  Тогда
				ххх=Склады.Добавить();
				ххх.СкладНаименование=нн.СкладНаименование;
				ххх.СкладКод=нн.СкладКод;
			КонецЕсли; 
			код=нн.Движениеденежныхсредствкод;
			Если ПустаяСтрока(код) Тогда
				код=нн.Движениеденежныхсредств;	
			КонецЕсли;
			Если (СокрЛП(код)<>"4.03")и(СокрЛП(нн.Движениеденежныхсредств)<>"Торговая выручка без учета скидок") тогда
				Если ВидыОплатыСчета.Найти(код, "КодАйко")=неопределено Тогда
					ххх=ВидыОплатыСчета.Добавить();
					ххх.КодАйко=код;
					ххх.НазваниеАйко=нн.Движениеденежныхсредств;
				КонецЕсли;
			КонеЦЕсли;
		КонецЦикла;  
		Если БезналичныеОплаты="ПоСчету" Тогда
			для Каждого нн из ТЗ1 Цикл
				
			КонецЦикла;  
		КонецЕсли;
	КонецЕсли;
	
	Если ВП Тогда
		для Каждого нн из ТЗ2 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 Тогда
				Тз2.Удалить(нн);
			Иначе
				НН.Количество=УдалитьПробелы(НН.Количество);
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
		
			для Каждого нн из ТЗ2 Цикл
				Если (Склады.Найти(нн.СкладОтправительНаименование,"СкладНаименование")=Неопределено) Тогда
					ххх=Склады.Добавить();
					ххх.СкладНаименование=нн.СкладОтправительНаименование;
					ххх.СкладКод=нн.СкладОтправительКод;
				КонецЕсли;	
				Если (Склады.Найти(нн.СкладПолучательНаименование,"СкладНаименование")=Неопределено) Тогда
					ххх=Склады.Добавить();
					ххх.СкладНаименование=нн.СкладПолучательНаименование;
					ххх.СкладКод=нн.СкладПолучательКод;
				КонецЕсли;	
			КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ2,ложь);
	КонецЕсли;
	
	Если АП Тогда
		для Каждого нн из ТЗ3 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 Тогда
				Тз3.Удалить(нн);
			Иначе
				НН.Количество=УдалитьПробелы(НН.Количество);
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
		
		для Каждого нн из ТЗ3 Цикл
				Если ЗначениеЗаполнено(нн.Складсписаниянаименование) тогда
					Если Склады.Найти(нн.Складсписаниянаименование,"СкладНаименование")=Неопределено  Тогда
						ххх=Склады.Добавить();
						ххх.СкладНаименование=нн.Складсписаниянаименование;
						ххх.СкладКод=нн.СкладсписанияКод;
						//Сообщить("код="+нн.СкладсписанияКод+","+нн.Складсписаниянаименование);
					КонецЕсли;	
				КонецЕсли;	
				Если ЗначениеЗаполнено(нн.Складприходанаименование) тогда
					Если Склады.Найти(нн.Складприходанаименование,"СкладНаименование")=Неопределено  Тогда
						ххх=Склады.Добавить();
						ххх.СкладНаименование=нн.Складприходанаименование;
						ххх.СкладКод=нн.СкладприходаКод;
						//Сообщить("код="+нн.СкладприходаКод+", "+нн.Складприходанаименование);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ3,ложь);
	КонецЕсли;
	
	Если АПЕР Тогда
		для Каждого нн из ТЗ5 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 Тогда
				Тз5.Удалить(нн);
			Иначе
				НН.Количество=УдалитьПробелы(НН.Количество);
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
		
		
			для Каждого нн из ТЗ5 Цикл
				Если ЗначениеЗаполнено(нн.Складсписаниянаименование) тогда
					Если Склады.Найти(нн.Складсписаниянаименование,"СкладНаименование")=Неопределено  Тогда
						ххх=Склады.Добавить();
						ххх.СкладНаименование=нн.Складсписаниянаименование;
						ххх.СкладКод=нн.СкладсписанияКод;
					КонецЕсли;	
				КонецЕсли;	
				Если ЗначениеЗаполнено(нн.Складприходанаименование) тогда
					Если Склады.Найти(нн.Складприходанаименование,"СкладНаименование")=Неопределено  Тогда
						ххх=Склады.Добавить();
						ххх.СкладНаименование=нн.Складприходанаименование;
						ххх.СкладКод=нн.СкладприходаКод;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ5,ложь);
	КонецЕсли;
	
	Если АС Тогда
		для Каждого нн из ТЗ6 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 Тогда
				Тз6.Удалить(нн);
			Иначе
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
 
		
			для Каждого нн из ТЗ6 Цикл
				Если Склады.Найти(нн.СкладНаименование,"СкладНаименование")=Неопределено  Тогда
					ххх=Склады.Добавить();
					ххх.СкладНаименование=нн.СкладНаименование;
					ххх.СкладКод=нн.СкладКод;
				КонецЕсли;	
			КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ6,ложь);
	КонецЕсли;
	
	Если ИН Тогда
		для Каждого нн из ТЗ7 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 Тогда
				Тз7.Удалить(нн);
			Иначе
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
		
			для Каждого нн из ТЗ7 Цикл
				Если Склады.Найти(нн.СкладНаименование,"СкладНаименование")=Неопределено  Тогда
					ххх=Склады.Добавить();
					ххх.СкладНаименование=нн.СкладНаименование;
					ххх.СкладКод=нн.СкладКод;
				КонецЕсли;	
			КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ7,ложь);
	КонецЕсли;
	
	Если РН Тогда
		для Каждого нн из ТЗ8 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 Тогда
				Тз8.Удалить(нн);
			Иначе
				НН.ЦенапродажисНДС=УдалитьПробелы(НН.ЦенапродажисНДС);
				НН.СуммапродажисНДС=УдалитьПробелы(НН.СуммапродажисНДС);
				НН.СуммаНДСспродаж=УдалитьПробелы(НН.СуммаНДСспродаж);
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
		
		ДобавитьКонтрагентов(ТЗ8);
 
		для Каждого нн из ТЗ8 Цикл
			Если Склады.Найти(нн.СкладНаименование,"СкладНаименование")=Неопределено  Тогда
				ххх=Склады.Добавить();
				ххх.СкладНаименование=нн.СкладНаименование;
				ххх.СкладКод=нн.СкладКод;
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ8,ложь);
	КонецЕсли;
	
	Если ВН Тогда
		для Каждого нн из ТЗ9 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 Тогда
				Тз9.Удалить(нн);
			Иначе
				НН.ЦенапродажисНДС=УдалитьПробелы(НН.ЦенапродажисНДС);
				НН.СуммапродажисНДС=УдалитьПробелы(НН.СуммапродажисНДС);
				НН.СуммаНДСспродаж=УдалитьПробелы(НН.СуммаНДСспродаж);
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
		
		ДобавитьКонтрагентов(ТЗ9);  
 
		для Каждого нн из ТЗ9 Цикл
			Если Склады.Найти(нн.СкладНаименование,"СкладНаименование")=Неопределено  Тогда
				ххх=Склады.Добавить();
				ххх.СкладНаименование=нн.СкладНаименование;
				ххх.СкладКод=нн.СкладКод;
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ9,ложь);
	КонецЕсли;
	
	Если ар и БезналичныеОплаты="ИзПриемаКассовойВыручки" Тогда
		для Каждого нн из ТЗ4 Цикл
			НН.Сумма=УдалитьПробелы(НН.Сумма);
		КонецЦикла; 
		для Каждого нн из ТЗ4 Цикл
			Если ВидыОплаты.Найти(нн.ВидОплатыКод,"КодИИКО")=неопределено Тогда
				Если (СокрЛП(нн.ВидОплатыНаименование)<>"Рубли")и(СокрЛП(нн.ВидОплатыНаименование)<>"Наличные") тогда
					ххх=ВидыОплаты.Добавить();
					ххх.КодИИКО=нн.ВидОплатыКод;
					ххх.ВидОплатыИИКО=нн.ВидОплатыНаименование;
				КонеЦЕсли;
			КонецЕсли;
		КонецЦикла;  
	КонецЕсли;
	
	ТзКатег=ВсяНомеклатураАйко.Скопировать();
	ТзКатег.Свернуть("ГруппаУчетаКод,ГруппаУчетаНазвание");
	Для Каждого Стр из ТзКатег Цикл
		Если БухгалтерскаяКатегория.Найти(Стр.ГруппаУчетаНазвание,"КатегорияАйко")=Неопределено Тогда
        	катег=БухгалтерскаяКатегория.Добавить();
			катег.КатегорияАйко=Стр.ГруппаУчетаНазвание;
			катег.КатегорияАйкоКод=Стр.ГруппаУчетаКод;
			катег.Аналитика="Аналитика";
		КонецЕсли;
	КонецЦикла;
	
	//Заполнение таблиц
	Для Каждого элемент из БухгалтерскаяКатегория Цикл
		строка=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.Категории.Найти(СокрЛП(элемент.КатегорияАйкоКод), "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			элемент.Группа1С=строка.Значение;
			элемент.Группа1СКод=строка.Значение.Код;
			элемент.Аналитика=строка.Аналитика;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьГрупперовку();
	ЭтаФорма.Обновить();
	
	Если пн или рн или ВН тогда
		//ФормаНастройки.ЗагрузитьКонтрагентов(Контрагенты);
		Для Каждого элемент из Контрагенты Цикл
			строка=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.Поставщики.Найти(СокрЛП(элемент.ККодИИКО), "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				элемент.Контрагент=строка.Значение;
			КонецЕсли;
			Если ЗначениеЗаполнено(элемент.Контрагент) Тогда
				элемент.Код1С = элемент.Контрагент.Код;
				элемент.Наименование1С = элемент.Контрагент.Наименование;
				элемент.ИНН1С = ФормаНастройки.ИсправленныйЮЛИНН(элемент.Контрагент.ИНН);
			КонецЕсли;
		КонецЦикла;
		ЭтаФорма.Обновить();
	КонецЕсли;
	
	Если ВН Тогда
		для Каждого нн из ТЗ9 Цикл
			НН.Количество=УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество)=0 Тогда
				Тз9.Удалить(нн);
			Иначе
				НН.ЦенапродажисНДС=УдалитьПробелы(НН.ЦенапродажисНДС);
				НН.СуммапродажисНДС=УдалитьПробелы(НН.СуммапродажисНДС);
				НН.СуммаНДСспродаж=УдалитьПробелы(НН.СуммаНДСспродаж);
				НН.СебестоимостьзаедбезНДС=УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС=УдалитьПробелы(НН.СебестоимостьбезНДС);
			КонецЕсли;	
		КонецЦикла; 
		
		ДобавитьКонтрагентов(ТЗ9);  
                                 
		для Каждого нн из ТЗ9 Цикл
			Если Склады.Найти(нн.СкладНаименование,"СкладНаименование")=Неопределено  Тогда
				ххх=Склады.Добавить();
				ххх.СкладНаименование=нн.СкладНаименование;
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ9,ложь);
	КонецЕсли;

	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Контрагенты;
	Для Каждого склад из Склады Цикл
		Код=СокрЛП(склад.СкладКод);
		Если ПустаяСтрока(Код) Тогда
			Код=склад.СкладНаименование;
		КонецЕсли;
		строка=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.Склады.Найти(Код, "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			склад.Склад=строка.Значение;
			склад.Подразделение=строка.Подразделение;
		КонецЕсли;
	КонецЦикла;

	Если не БезналичныеОплаты="НеГрузить" Тогда
	 	//ФормаНастройки.ЗагрузитьТипыОплат(ВидыОплаты,ВидыОплатыСчета);	
		Для каждого элемент из ВидыОплаты цикл   
			строка=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Найти(СокрЛП(элемент.КодИИКО), "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				элемент.ВидОплаты=строка.Значение;
				элемент.Код1С=стр.ВидОплаты.Код;
				элемент.ВидОплаты1С=стр.ВидОплаты.Наименование;
			КонецЕсли;
		КонецЦикла;
		Для каждого элемент из ВидыОплатыСчета цикл
			строка=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Найти(СокрЛП(элемент.КодАйко), "КодАйкоСчет");
			Если ЗначениеЗаполнено(строка) Тогда
                элемент.ВидОплаты=строка.Значение;
				элемент.КодВидОплаты1С=элемент.ВидОплаты.Код;
			КонецЕсли;
		КонецЦикла;;
	КонецЕсли;

	ЭтаФорма.Обновить();
	Если ФизЛица.Количество()>0 Тогда
		ЭлементыФормы.Панель1.Страницы.ФизЛица.Видимость = Истина;
		Для каждого элемент из ФизЛица Цикл 
			строка=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Найти(СокрЛП(элемент.КодАйко), "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				элемент.Название1С=строка.Значение;
				элемент.Код1С=строка.Значение.Код;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;

	Если пн или вп или рн тогда
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Контрагенты;
	Иначе
		//ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Номенклатура;
	КонецЕсли;
	
	//Заполняем таблицу доков
	
	Если Пн тогда
		 ЗаполнитьДокументы(тз,"Приходная Накладная",ЭтотОбъект.ДеньПрефикс);
	КонецЕсли;	
	Если АР тогда
		 ЗаполнитьДокументы(тз1,"Акт Реализации",ЭтотОбъект.ДеньАР_ОПЗСПрефикс);
	КонецЕсли;	
	Если ВП тогда
		 ЗаполнитьДокументы(тз2,"Внутреннее Перемещение",ЭтотОбъект.ДеньПрефикс);
	КонецЕсли;	
	Если АП тогда
		 ЗаполнитьДокументы(тз3,"Акт Приготовления",ЭтотОбъект.ДеньАПриготовленияПрефикс);
	КонецЕсли;	
	Если АС тогда
		 ЗаполнитьДокументы(тз6,"Акт Списания",ЭтотОбъект.ДеньАС_ОПЗСПрефикс);
	КонецЕсли;	
	Если АПЕР тогда
		 ЗаполнитьДокументы(тз5,"Акт Переработки",ЭтотОбъект.ДеньАПерараоткиПрефикс);
	КонецЕсли;	
	Если РН тогда
		 ЗаполнитьДокументы(тз8,"Расходная Накладная",ЭтотОбъект.ДеньРН_ОПЗСПрефикс);
	КонецЕсли;	
	Если ИН тогда
		 ЗаполнитьДокументы(тз7,"Инвентаризация",ЭтотОбъект.ДеньПрефикс);
	КонецЕсли;	
	Если ар и БезналичныеОплаты="ИзПриемаКассовойВыручки" тогда
		 ЗаполнитьДокументы(тз4,"Прием кассовой выручки",ЭтотОбъект.ДеньПрефикс);
	КонецЕсли;	
	Если ВН тогда
		 ЗаполнитьДокументы(тз9,"Возвратная Накладная",ЭтотОбъект.ДеньПрефикс);
	 КонецЕсли;	
	 
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыВыполнить.Доступность=Истина;
	ЗапускБЫЛ=Ложь;
	//Сообщить("ДатаЗагр3:" + ТекущаяДата());//ТЕСТВРЕМЯ
КонецПроцедуры

Функция ИзСтрокиВСпис(Стрр)
	Списс=Новый Массив; 
	Стрр2 = СтрЗаменить(Стрр,";",Символы.ПС);
	Для ии=1  по СтрЧислоСтрок(Стрр2) цикл
		Списс.Добавить(СтрПолучитьСтроку(Стрр2,ии));
	КонецЦикла;	
	Возврат Списс;
КонецФункции //ИзСтрокиВСпис                             КИННИИКО,ККодИИКО,КНаименованиеИИКО

Функция УдалитьПробелы(Стрр)
	Если Значениезаполнено(Стрр) тогда
		Возврат Число(СокрЛП(СтрЗаменить(Стрр,Символы.НПП,"")));
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции //ИзСтрокиВСпис

Функция УдалитьПроб(Стрр)
	Возврат СтрЗаменить(Стрр,Символы.НПП,"");
КонецФункции //ИзСтрокиВСпис

Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораКаталогЭкспорта = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталогЭкспорта.Заголовок = "Открытие каталога для передачи файлов";
	ДиалогВыбораКаталогЭкспорта.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораКаталогЭкспорта.Каталог = Каталог1с;
	
	Если Не ДиалогВыбораКаталогЭкспорта.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Каталог1с = ДиалогВыбораКаталогЭкспорта.Каталог;
КонецПроцедуры

//Процедура ИмяФайлаДанныхНачалоВыбора1(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	ДиалогВыбораКаталогЭкспорта = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
//	ДиалогВыбораКаталогЭкспорта.Заголовок = "Открытие каталога для передачи файлов";
//	ДиалогВыбораКаталогЭкспорта.ПроверятьСуществованиеФайла = Истина;
//	ДиалогВыбораКаталогЭкспорта.Каталог = КаталогСоответствия;
//	
//	Если Не ДиалогВыбораКаталогЭкспорта.Выбрать() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	КаталогСоответствия = ДиалогВыбораКаталогЭкспорта.Каталог;
//КонецПроцедуры

Функция СоздатьДоговор(Контрагент, Огрганизация, ВидДоговора, НазваниеДоговора, получить)
	 //Если ЗначениеЗаполнено(Контр.ОсновнойДоговорКонтрагента) Тогда
	//	 Если Контр.ОсновнойДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	//		 Возврат  Контр.ОсновнойДоговорКонтрагента;
	//	 КонецЕсли;
	 //КонецЕсли;
	 
	 //Орг=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
	 
	Выборка = Справочники.ДоговорыКонтрагентов.Выбрать(,,,);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДоговора=ВидДоговора и Выборка.Организация=Огрганизация и Выборка.Владелец=Контрагент Тогда
			Возврат Выборка.ПолучитьОбъект().Ссылка;
		КонецЕсли;
	КонецЦикла;

	 Дог = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	 Дог.Владелец = Контрагент.Ссылка;
	 Дог.Наименование = НазваниеДоговора;//"Основной договор покупателя";
	 Дог.ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
	 Если НЕ ЗначениеЗаполнено(Дог.ВалютаВзаиморасчетов) Тогда
		 Дог.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	 КонецЕсли;
	 Если Конфигурация20<>1 Тогда
	 	Дог.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	 КонецЕсли;	
	 Если УКР=1 Тогда
		 Дог.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	 КонецЕсли;
	 Дог.ВидДоговора = ВидДоговора;//Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	 Дог.Организация = Огрганизация;
	 Дог.УстановитьНовыйКод(Дог.Организация.Префикс);
	 Попытка
		 Сообщить("Создание: "+НазваниеДоговора+" для контрагента: " + Контрагент.НаименованиеПолное + 
		 	", организация: "+Огрганизация+", тип: "+ВидДоговора);
		 Дог.Записать();
		 Если не ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента) тогда
			 Если получить Тогда
			 	Контр1 = Контрагент.ПолучитьОбъект();
			Иначе
				Контр1 =  Контрагент;
			КонецЕсли;
			 Контр1.ОсновнойДоговорКонтрагента = Дог.Ссылка;
			 КОнтр1.ГоловнойКонтрагент = Контрагент.Ссылка;
			 Контр1.Записать();
		 КонецЕСли;
	 Исключение
		 Сообщить("Договор создать не удалось:"+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	 КонецПопытки;
	 Возврат Дог.Ссылка;
 КонецФункции	 

 Функция НайтиДоговор(Организация, Контрагент, ВидДоговора, НазваниеДоговора)
	Дог=Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Организация", Организация, , Контрагент);
	Если не ЗначениеЗаполнено(Дог) Тогда
		Если Дог.ВидДоговора<>ВидДоговора Тогда
			Дог = СоздатьДоговор(Контрагент, Организация, ВидДоговора, НазваниеДоговора, истина);
		КонецЕсли;
	КонецЕсли;
	возврат Дог;
КонецФункции

Процедура КонтрагентыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если не ЗначениеЗаполнено(ДанныеСтроки.Контрагент) Тогда
		ОформлениеСтроки.Цветтекста=WebЦвета.Красный;
		ДанныеСтроки.Код1С = "";
		ДанныеСтроки.ИНН1С = "";
		ДанныеСтроки.Наименование1С = "";
	Иначе
		ДанныеСтроки.Код1С = ФормаНастройки.ТруКод(ДанныеСтроки.КОнтрагент.Код);
		ДанныеСтроки.ИНН1С = ДанныеСтроки.КОнтрагент.Инн;
		ДанныеСтроки.Наименование1С = ДанныеСтроки.КОнтрагент.Наименование;
	КонецЕсли;
КонецПроцедуры

Процедура ГруппировкаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		ОформлениеСтроки.Цветтекста=WebЦвета.Красный;
	Иначе
		ДанныеСтроки.Код1С = ДанныеСтроки.Номенклатура.Код;	
	КонецЕсли;
КонецПроцедуры

Функция СоздатьНоменклатуру(Код, Наименование, Категория, СтавкаНДСстр)
	Перем ЕдиницаИзмеренияНазвание;
	ЕдиницаИзмеренияАйко=Неопределено;
	СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяСтавкаНДС");
	Если Код<>Неопределено Тогда
		номен=ВсяНомеклатураАйко.Найти(Код+"-"+СтавкаНДСстр,"Ключ");
		Если номен=Неопределено Тогда
			номен=ВсяНомеклатураАйко.Найти(Код,"НКодИИКО");
			Если номен=Неопределено Тогда
				Сообщить("Ошибка нахождения номенклатуры с кодом " + Код, СтатусСообщения.ОченьВажное);
				возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Наименование=Неопределено Тогда
			Наименование=номен.ННаименованиеИИКО;
		КонецЕсли;
		Если Категория=Неопределено Тогда
			Категория=номен.ГруппаУчетаНазвание;
		КонецЕсли;	
		СтавкаНДС=ПолучитьСтавкуНДС2(номен.СтавкаНДС);
		ЕдиницаИзмеренияАйко=номен.ЕдиницаИзмерения;
	Иначе
		Если СтавкаНДСстр<>Неопределено Тогда
			СтавкаНДС=ПолучитьСтавкуНДС2(СтавкаНДСстр);
		КонецЕсли;		
	КонецЕсли;	
	
	Если Категория=Неопределено Тогда
		Сообщить("Неизвестная категория у номенклатуры с кодом " + Код, СтатусСообщения.ОченьВажное);
		возврат Неопределено;
	КонецЕсли;	
	
	// Поиск по названию!
	катег=БухгалтерскаяКатегория.Найти(Категория, "КатегорияАйко");
	Если катег=Неопределено или не ЗначениеЗаполнено(катег.Группа1С) Тогда
		Сообщить("Незаполнена группа для категории " + Категория, СтатусСообщения.ОченьВажное);
		возврат Неопределено;
	КонецЕсли;		
	
	Ном = Справочники.Номенклатура.СоздатьЭлемент();
	Если Код<>Неопределено Тогда
		Элемм=Справочники.Номенклатура.НайтиПоКоду(ТруКодН(Код), истина);
		Если не ЗначениеЗаполнено(Элемм) тогда
			Ном.Код = ТруКодН(Код);
		КонецЕсли;
	КонецЕсли;	
	Ном.Наименование = Наименование;
	Ном.СтавкаНДС = СтавкаНДС;
	Ном.НаименованиеПолное = Наименование;
	Ном.Родитель=катег.Группа1С.Ссылка;
	ЕдиницаИзмеренияНайдена=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Найти(ЕдиницаИзмеренияАйко, "НазваниеАйко");
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияНайдена) Тогда
		ЕдиницаИзмерения=ЕдиницаИзмеренияНайдена.Значение;
	Иначе
		ЕдиницаИзмерения=ФормаНастройки.ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная;
	КонецЕсли;
	
	Если катег.Группа1С.Наименование="Услуги" или катег.Группа1С.Код="00000000009" Тогда
		Ном.Услуга=Истина;
	КонецЕсли;
	Если не ЗначениеЗаполнено(ЕдиницаИзмерения) тогда
		Сообщить("Не задана единица измерения по умолчанию! Зайдите в настройки и укажите еденицу измерения по умолчанию.", СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;	
	Ном.БазоваяЕдиницаИзмерения = ЕдиницаИзмерения;
	Ном.НоменклатурнаяГруппа=ОсновнаяНоменклатурнаяГруппа;
    Попытка
		Ном.Записать();
	Исключение
		Сообщить("Номенклатуру создать не удалось:"+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Возврат Неопределено;	
	КонецПопытки;
	Возврат Ном;
КонецФункции	

Процедура НоменклатураПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		ОформлениеСтроки.Цветтекста=WebЦвета.Красный;
		ДанныеСтроки.Код1С = "";
		ДанныеСтроки.Наименование1С = "";
	Иначе
		ДанныеСтроки.Код1С = ДанныеСтроки.Номенклатура.Код;
		ДанныеСтроки.Наименование1С = ДанныеСтроки.Номенклатура.Наименование;
	КонецЕсли;
КонецПроцедуры



Процедура ПриОткрытии()
	ВерсияАйко=0;
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки");
	Если не ЗначениеЗаполнено(ЗначенияВостановлены) Тогда
		ЗначенияВостановлены=ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ЭтотОбъект.ВерсияНастроек) Тогда
		ЭтотОбъект.ПНПрефикс="!!KК";
		ЭтотОбъект.АР_ООРППрефикс="!!KР";
		ЭтотОбъект.АР_ОПЗСПрефикс="!!KР";
		ЭтотОбъект.АС_СТПрефикс="!!KС";
		ЭтотОбъект.АС_ОПЗСПрефикс="!!KС";
		ЭтотОбъект.РН_РТУПрефикс="!!KН";
		ЭтотОбъект.РН_ОПЗСПрефикс="!!KН";
		ЭтотОбъект.ВППрефикс="!!KП";
		ЭтотОбъект.АПерараоткиПрефикс="!!KЕ";
		ЭтотОбъект.АПриготовленияПрефикс="!!KК";
		ЭтотОбъект.ИНВПрефикс="!!KК";
		ЭтотОбъект.ВНПрефикс="!!KК";
		ЭтотОбъект.ВерсияНастроек="1";
	КонецЕсли;
	Если ЭтотОбъект.ВерсияНастроек="1" Тогда
		ЭтотОбъект.ДеньПрефикс="!!";
		ЭтотОбъект.ДеньАР_ОПЗСПрефикс="!Р";
		ЭтотОбъект.ДеньАС_ОПЗСПрефикс="!С";
		ЭтотОбъект.ДеньРН_ОПЗСПрефикс="!Н";       
		ЭтотОбъект.ДеньАПерараоткиПрефикс="!Е";
		ЭтотОбъект.ДеньАПриготовленияПрефикс="!К"; 
		ЭтотОбъект.ВерсияНастроек="2";
	КонецЕсли;	

	Если не ЗначенияВостановлены тогда
		УчитыватьНДС=Истина;
		УчитыватьВхНДС=Истина;
	КонецЕсли;
	Конфигурация20=0;
	Если Лев(Метаданные.Версия, 2)="2." Тогда
		Конфигурация20=1;
		ЭлементыФормы.ОтражатьВНУ.Видимость=ложь;
	КонецЕсли;
    ТекущийПользователь=глЗначениеПеременной("глТекущийПользователь");
	ИнициализироватьИменаКолонок();

	Если ЗначениеЗаполнено(ПутьКСерверу)=ложь Тогда
		ПутьКСерверу="127.0.0.1";
	КонецЕсли;
	Если ЗначениеЗаполнено(Порт)=ложь Тогда
		Порт="8080";
	КонецЕсли;
	Контрагенты.Очистить();
	Номенклатура.Очистить();
	Склады.Очистить();
	Докум.Очистить();
	Открывать=1;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыВыполнить.Доступность=Ложь;
	НаимКонф=Метаданные.Синоним;
	Если СпособЗагрузкиБулево Тогда
		ЭлементыФормы.Файл.ТекущаяСтраница=ЭлементыФормы.Файл.Страницы.Файл;
	Иначе
		ЭлементыФормы.Файл.ТекущаяСтраница=ЭлементыФормы.Файл.Страницы.Сервер;
	КонецЕсли;	
	Если Найти(НаимКонф,"Бухгалтерия для Украины")>0 Тогда
		Укр=1;
		ЭлементыФормы.Надпись15.Видимость=истина;
		ЭлементыФормы.СтатьяЗатрат.Видимость=истина;
		//ЭлементыФормы.вп.Доступность=ложь;
		//ЭлементыФормы.АП.Доступность=ложь;
		//ЭлементыФормы.АС.Доступность=ложь;
		//ЭлементыФормы.РН.Доступность=ложь;
		//ЭлементыФормы.АПЕР.Доступность=ложь;
		//ЭлементыФормы.Ин.Доступность=ложь;
	Иначе 
		ЭлементыФормы.Надпись15.Видимость=ложь;
		ЭлементыФормы.СтатьяЗатрат.Видимость=ложь;
		Укр=0;
	КонецЕСли;	
	ОсновнаяНоменклатурнаяГруппа=Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(
		?(Укр=0,"Основная номенклатурная группа", "Основна номенклатурна група"));
	Если не ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) тогда
		ОсновнаяНоменклатурнаяГруппа=Справочники.НоменклатурныеГруппы.НайтиПоКоду(?(Укр=1,"00000001","000000001"));
		Если не ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) тогда
			Сообщить("Не найдена основная номенклатурная группа!!!", СтатусСообщения.Важное);
		КонецЕсли;	
	КонецЕсли;
	
	ВидимостьПодразделения();
	ДоступностьПКВ();
	ВидимостьСДДС();
    ВидимостьГруппировки();
	Юрлицо="";
	Если не ЗначениеЗаполнено(ОрганизацияДокумента) Тогда
		ОрганизацияДокумента = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация")
	КонецЕсли;
	ЭлементыФормы.ОрганизацияДокумента.Видимость=ОрганизацияИзДокумента=0;
		
	Если не ЗначенияВостановлены тогда
		ФормаНастройки.ЗагрузитьНастройки();
	КонецЕсли;
	ЗначенияВостановлены = ложь;
КонецПроцедуры

Процедура пнПриИзменении(Элемент)
	//Если  ЭлементыФормы.Файл.ТекущаяСтраница=ЭлементыФормы.Файл.Страницы.Файл тогда
	//	Если пн тогда
	//		ар = ложь;
	//	КонецЕсли
	//КонецЕсли;	
КонецПроцедуры

Процедура АРПриИзменении(Элемент)
	 ВидимостьПодразделения();
	 ДоступностьПКВ();
	 ВидимостьСДДС();
КонецПроцедуры

Процедура СкладыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если не ЗначениеЗаполнено(ДанныеСтроки.Склад) Тогда
		ОформлениеСтроки.Цветтекста=WebЦвета.Красный;
		ДанныеСтроки.Наименование1С = "";
	Иначе
		ДанныеСтроки.Наименование1С = ДанныеСтроки.Склад.Наименование;
	КонецЕсли;
КонецПроцедуры

Функция НайтиСчетаДляНоменклатуры(ном,ТаблицаЗапроса)
	строкк= ТаблицаЗапроса.Найти(ном,"Номенклатура");
	Если строкк<>неопределено тогда	
		возврат строкк;
	КонецЕсли;
	Номмм=ном.ПолучитьОбъект();
	Пока Номмм.Уровень()>0 Цикл
		Номмм=Номмм.Родитель;
		строкк= ТаблицаЗапроса.Найти(Номмм,"Номенклатура");
		Если строкк<>неопределено тогда	
			возврат строкк;
		КонецЕсли;
	КонецЦикла;
	Для Каждого н из ТаблицаЗапроса цикл   
		Если не ЗначениеЗаполнено(н.Номенклатура) Тогда
			Возврат н;
		КонецЕсли;
	КонецЦикла;
	возврат неопределено;
КонецФункции

Функция НайтиОгранизациюПоИНН(ИНН, УчитыватьНастройку)
	//Если не УчитыватьНастройку или ОрганизацияИзДокумента=1 Тогда
	Если ОрганизацияИзДокумента=1 Тогда
		возврат НайтиОгранизациюПоИНН2(ИНН);
	Иначе
		возврат ОрганизацияДокумента.Ссылка;
		//возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
	КонецЕсли;
КонецФункции	

Функция НайтиОгранизациюПоИНН2(ИНН)
	Если Укр=0 Тогда
		возврат Справочники.Организации.НайтиПоРеквизиту("ИНН", ИНН);
	Иначе
		ТестЗапрос = Новый Запрос();
		ТестЗапрос.Текст = "ВЫБРАТЬ Организация ИЗ РегистрСведений.КодыОрганизации ГДЕ ИНН = """ + ИНН + """";
		КодыОрг = ТестЗапрос.Выполнить().Выгрузить();
		Если КодыОрг.Количество() > 0 Тогда
           	возврат КодыОрг.Получить(0).Организация;
		КонецЕсли;	
	КонецЕсли;	
	Сообщить("Не найдена организация с ИНН: "+ИНН+" документы будут незаполнены!",СтатусСообщения.Внимание);
	возврат неопределено;	
КонецФункции	

Функция ПодготовитьНакладные(табз)
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
    Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Склад"); 
 	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СтавкаНДС");
	Тзз1.Колонки.Добавить("Контрагент");
	Тзз1.Колонки.Добавить("Сотрудник");
	Тзз1.Колонки.Добавить("СуммасНДС");
	Тзз1.Колонки.Добавить("СуммаНДС");
	Тзз1.Колонки.Добавить("ВходНомер");
	Тзз1.Колонки.Добавить("ВходДата");
	Тзз1.Колонки.Добавить("СчетФактура");
	Тзз1.Колонки.Добавить("ЦенасНДС");
	Тзз1.Колонки.Добавить("Комментарий");
	Для Каждого Стр из табз Цикл
		ОкрКоличество=Окр(стр.Колво,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
		ххх=Тзз1.Добавить();
		ххх.Номер=стр.НомерДок;
		ххх.Дата=ФормаНастройки.ПолучитьДату(стр.Дата);
		ххх.Номенклатура=НайтиНоменклатуру(стр.НКодИИКО, стр.Ставкандс, стр.ГруппаучетаНазвание).Номенклатура;
		ххх.Склад=Склады.Найти(Стр.СкладНаименование,"СкладНаименование").Склад;
		ххх.ЮЛнаименование=стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод=стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН=ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(стр.ЮЛИНН));
		ххх.Количество=ОкрКоличество;
		ххх.СтавкаНДС=стр.СтавкаНДС;
		ххх.Контрагент=Контрагенты.Найти(стр.КкодИИКО,"КкодИИКО").Контрагент;
		ххх.СуммасНДС=стр.СуммасНДС;
		ххх.СуммаНДС=стр.СуммаНДС;
		ххх.ВходНомер=стр.ВходНомер;
		ххх.ВходДата=стр.ВходДата;
		ххх.СчетФактура=стр.СчетФактура;
		ххх.ЦенасНДС=стр.ЦенасНДС;
		Попытка
			ххх.Комментарий = стр.Комментарий;
		Исключение 
			ххх.Комментарий = "";
		КонецПопытки;
		Если не ПустаяСтрока(стр.СотрудникКод) Тогда
			фл=ФизЛица.Найти(стр.СотрудникКод, "КодАйко");
			Если не фл=неопределено Тогда
				ххх.Сотрудник=фл.Название1С;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Если СвернутьТовары Тогда
		Тзз1.Свернуть("Номер,Дата,Номенклатура,Склад,ЮЛнаименование,ТорговоеПредприятиеКод,ЮЛИНН,СтавкаНДС,Контрагент,ВходНомер,ВходДата,СчетФактура,Сотрудник,Комментарий", "Количество,СуммасНДС,СуммаНДС,ЦенасНДС");
		Для каждого с из Тзз1 Цикл
			с.ЦенасНДС=с.СуммасНДС/с.Количество;
		КонецЦикла;	
	КонецЕсли;	
	возврат Тзз1;
КонецФункции		

Процедура СоздатьАвансовыйОтчет(докСтр,строки,НомерДокумента, Порядок, номернаклиико)
	Док = Документы.АвансовыйОтчет.НайтиПоНомеру(НомерДокумента, докСтр.Дата);
	Если не ЗначениеЗаполнено(Док) Тогда
		Док = Документы.АвансовыйОтчет.СоздатьДокумент();
		Док.Номер = НомерДокумента;
	Иначе
		Если зд Тогда
			Док = Док.ПолучитьОбъект();
			Док.УстановитьПометкуУдаления(Ложь);
			Док.Проведен=ложь;
		Иначе
			Сообщить("Авансовый отчет № "+докСтр.Номер+" от "+докСтр.Дата+" существует!");
			возврат;
		КОнецЕсли;
	КОнецЕсли;
	
	// Шапка документа
	Док.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
	Док.КурсДокумента=1;
	Док.УчитыватьНДС=УчитыватьВхНДС;
	Док.СуммаВключаетНДС=истина;
	Если Укр=0 Тогда
		Док.НДСВключенВСтоимость=не УчитыватьВхНДС;
	КонецЕсли;
	//Док.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	//Док.Контрагент = докСтр.Контрагент;
	//Если Конфигурация20=1 Тогда
	//	Док.СпособЗачетаАвансов=Перечисления.СпособыЗачетаАвансов.Автоматически;
	//Иначе	
	//	Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
	//КонецЕсли;
	Док.Организация=НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, ложь);
	//Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, 
	//Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор");
	//Док.ДатаВходящегоДокумента=ФормаНастройки.ПолучитьДату(докСтр.ВходДата);
	//Док.НомерВходящегоДокумента=докСтр.ВходНомер;
	Док.Склад = докСтр.Склад;
	Док.Дата = докСтр.Дата;
	Док.Номер = НомерДокумента;
	Док.ФизЛицо = докСтр.Сотрудник;
	Док.Комментарий="Приходная Накладная №"+докСтр.Номер+" от "+докСтр.Дата;
	
	//Товары
	Док.Товары.Очистить();
	Отб = Новый Структура("Номер",докСтр.Номер);
	НСтр = строки.НайтиСтроки(Отб);	
	Для каждого стрр из НСтр Цикл
		стр2 = Док.Товары.Добавить();
		стр2.НомерВходящегоДокумента=докСтр.ВходНомер;
        стр2.ДатаВходящегоДокумента=ФормаНастройки.ПолучитьДату(докСтр.ВходДата);
		стр2.Поставщик=докСтр.Контрагент;
		стр2.СчетФактура=докСтр.СчетФактура; 
		стр2.ОтражениеВУСН=ОтражатьВНУ;
		
		стр2.Номенклатура = стрр.Номенклатура;
		стр2.Количество = стрр.Количество;
		стр2.Цена = стрр.ЦенасНДС;
		стр2.Сумма = стрр.СуммасНДС;
		стр2.СуммаНДС = стрр.СуммаНДС;
		СттНДС=Число(СокрЛП(Стрр.СтавкаНДС));
		стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,стр2.Сумма,стр2.СуммаНДС);
		Если не ПустаяСтрока(ДокСтр.СчетФактура) Тогда
			стр2.ПредъявленСФ=истина;
			стр2.НомерСФ=докСтр.СчетФактура;
			стр2.ДатаСФ=ФормаНастройки.ПолучитьДату(докСтр.ВходДата);
		КонецЕсли;	
		строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
		Если строкк<>неопределено тогда
			Если Конфигурация20=1 Тогда
				стр2.СчетУчетаНДС = строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
				стр2.СчетУчета = строкк.СчетУчетаБУ;
			ИначеЕсли укр=0 тогда
				стр2.СчетУчетаНДС = строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
				стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
				стр2.СчетУчетаНУ = строкк.СчетУчетаНУ;
			Иначе
				СчетУчетаБУ=ПолучитьСчетУчетаБУ(Док, строкк);	
				//стр2.СтатьяПриростаУбылиЗапасов = строкк.СтатьяПриростаУбылиЗапасов;
				//стр2.НалоговоеНазначение = строкк.НалоговоеНазначение;
				стр2.СчетУчетаБУ = СчетУчетаБУ;
			КонецЕСли;	
		Иначе
			Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
		КонецЕсли;	
	КонецЦикла;
	
	СохранитьДокумент1С(Док, "Приходная Накладная", Порядок, номернаклиико);
КонецПроцедуры

Процедура СоздатьНакладные(табз,префикс,ДеньПрефикс,порядок)
	строки=ПодготовитьНакладные(табз);
	Если строки=неопределено тогда
		возврат;
	КонецЕсли;
	
	Доки=строки.Скопировать();     
	Доки.Свернуть("Номер,Дата,Склад,ТорговоеПредприятиеКод,ЮЛнаименование,ЮЛИНН,Контрагент,СчетФактура,ВходНомер,ВходДата,Сотрудник,Комментарий");
	
	СтарыйНомер="";
	Для каждого докСтр из Доки цикл
		номернаклиико=СокрЛП(докСтр.Номер)+"!"+"Приходная Накладная";
		Если докСтр.Номер=СтарыйНомер тогда
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+докСтр.Дата+" имеется 2 Приходная Накладных, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=докСтр.Номер;
		КонецЕсли;

		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;
		
		НомерДокумента=НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Приходная Накладная");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		
		// ALEXV: TODO: Добавить Авансовый отчет
		Если ЗначениеЗаполнено(докСтр.Сотрудник) Тогда
			СоздатьАвансовыйОтчет(докСтр,строки,НомерДокумента, Порядок, номернаклиико);
			продолжить;
		КонецЕсли;
		
		// Поиск документа
		Док = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(НомерДокумента, докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
			Иначе
				Сообщить("Накладная № "+докСтр.Номер+" от "+докСтр.Дата+" существует!");
				Продолжить
			КОнецЕсли;
		КОнецЕсли;
		//ОбщегоНазначения.ЗаполнитьШапкуДокумента(Док, ТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка");
		// Шапка документа
		Док.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
		Док.КурсВзаиморасчетов=1;
		Док.УчитыватьНДС=УчитыватьВхНДС;
		Док.СуммаВключаетНДС=истина;
		Если Укр=0 Тогда
			Док.НДСВключенВСтоимость=не УчитыватьВхНДС;
		КонецЕсли;
		Док.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		Док.Контрагент = докСтр.Контрагент;
		Если Конфигурация20=1 Тогда
			Док.СпособЗачетаАвансов=Перечисления.СпособыЗачетаАвансов.Автоматически;
		Иначе	
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
		КонецЕсли;
		Док.Организация=НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, ложь);
			
		Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, 
			Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор");
		Док.ДатаВходящегоДокумента=ФормаНастройки.ПолучитьДату(докСтр.ВходДата);
		Док.НомерВходящегоДокумента=докСтр.ВходНомер;
		// ALEXV: Добавлено по просьбе клиента: 
		//        Проставляем поля Грузоотправитель (=Поставщик)
		//        и Грузополучатель (=Организация, если соотвествующий ей поставщик существует)
		Если укр=0 тогда
			Док.Грузоотправитель = Док.Контрагент;
			Док.Грузополучатель = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", докСтр.ЮЛИНН);

			// ALEXV: TODO!!!!: Брать из справочника "Счета учета расчетов с контрагентами
			Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
			Док.СчетУчетаРасчетовПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
			Док.НомерВходящегоСчетаФактуры=ДокСтр.СчетФактура;
			Если ЗначениеЗаполнено(Док.НомерВходящегоСчетаФактуры) тогда
				Док.ДатаВходящегоСчетаФактуры=ФормаНастройки.ПолучитьДату(ДокСтр.ВходДата);
				Док.ПредъявленСчетФактура=Истина;
			КонецЕсли;	
		Иначе
			Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("631");
			Док.СчетУчетаНДС=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6442");
			Док.СчетУчетаНДСПодтвержденный=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6441");
			Док.СтатьяВаловыхРасходов=Справочники.СтатьиНалоговыхДеклараций.НП_ПокупТовар_;
			Док.СчетУчетаРасчетовПоТаре=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6851");
            Док.СчетУчетаРасчетовПоТареПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("3711");
		КонецЕсли;
		Если не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			Сообщить("У контрагента "+Док.Контрагент+" не заполнен основной договор! Накладная № "+СокрЛП(Док.Номер)+" от "+докСтр.Дата+" проведена не будет", СтатусСообщения.ОченьВажное);
			//Если  не Переключатель1 Тогда
			//	Продолжить;
			//КонецЕсли;	
		КОнецЕсли;
		Док.Склад = докСтр.Склад;
		Док.Дата = докСтр.Дата;
		Док.Номер = НомерДокумента;
        Док.Комментарий = докСтр.Комментарий;
		
		// Позиции документа
		Док.Товары.Очистить();
		Док.Услуги.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);	
		Для каждого стрр из НСтр Цикл
			Если стрр.Номенклатура.Услуга=ложь  тогда
				услуга=ложь;
				стр2 = Док.Товары.Добавить();
			Иначе
				услуга=Истина;
				стр2 = Док.Услуги.Добавить();
			КонецЕсли;
			стр2.Номенклатура = стрр.Номенклатура;
			Если услуга = ложь тогда
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
				стр2.Коэффициент = 1;
			КонецЕсли;
			стр2.Количество = стрр.Количество;
			//Если Стр2.Количество=0 Тогда
			//	Сообщить("В накладной № "+Док.Номер+" от "+Док.Дата+" в строке № "+Стр2.НомерСтроки+" не указано количество!!!");
			//КонецЕСли;	
			стр2.Цена = стрр.ЦенасНДС;
			стр2.Сумма = стрр.СуммасНДС;
			стр2.СуммаНДС = стрр.СуммаНДС;
			Если Укр=0 тогда
				Стр2.ОтражениеВУСН=Перечисления.ОтражениеВУСН.Принимаются;
			Иначе
				Стр2.НДСВключенВСтоимость=не УчитыватьВхНДС;
			КонецЕсли;
			СттНДС=Число(СокрЛП(Стрр.СтавкаНДС));
			стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,стр2.Сумма,стр2.СуммаНДС);
	
			строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
			Если строкк<>неопределено тогда
				Если Конфигурация20=1 Тогда
					стр2.СчетУчетаНДС = строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
					Если  услуга=Ложь тогда
						стр2.СчетУчета = строкк.СчетУчетаБУ;
					Иначе
						стр2.СчетЗатрат = строкк.СчетУчетаБУ;
					КонецЕсли;
				ИначеЕсли укр=0 тогда
					стр2.СчетУчетаНДС = строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
						// ALEXV: TODO: Добавить указание субконто для СчетУчетаБУ и СчетУчетаНУ
						//              Субконто "Статьи затрат" взять из карточки номенклатуры
						//              Субконто "НоменклатурнаяГруппа" взять из карточки номенклатуры
						//              Субконто "Подразделение" взять из таблицы соотвествия подразделений
					Если  услуга=Ложь тогда
						стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
						стр2.СчетУчетаНУ = строкк.СчетУчетаНУ;
					Иначе
						стр2.СчетЗатрат = строкк.СчетУчетаБУ;
						стр2.СчетЗатратНУ = строкк.СчетУчетаНУ;
					КонецЕсли;
				Иначе
					СчетУчетаБУ=ПолучитьСчетУчетаБУ(Док, строкк);	
					стр2.СтатьяПриростаУбылиЗапасов = строкк.СтатьяПриростаУбылиЗапасов;
					стр2.НалоговоеНазначение = строкк.НалоговоеНазначение;
					Если  услуга=Ложь тогда
						стр2.СчетУчетаБУ = СчетУчетаБУ;
					Иначе
						стр2.СчетЗатрат = СчетУчетаБУ;
					КонецЕсли;
				КонецЕСли;	
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;
		СохранитьДокумент1С(Док, "Приходная Накладная", Порядок, номернаклиико);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНоменклатурнуюГруппу(Ном)
	Если ЗначениеЗаполнено(Ном.НоменклатурнаяГруппа) Тогда
		возврат Ном.НоменклатурнаяГруппа
	КонецЕсли;	
	возврат ОсновнаяНоменклатурнаяГруппа;
КонецФункции

Процедура СохранитьДокумент1С(Док, наименование, Порядок, номернаклиико)
	Попытка 
		Док.Записать(РежимЗаписиДокумента.Запись); 
		Сообщить("Записано "+ наименование + " № "+Док.Номер+" от "+Док.Дата);
		Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
		СтрокаДоков=СписокДокументов.Добавить();
		СтрокаДоков.Док=Док.Ссылка;
		СтрокаДоков.Дата=Док.Дата;
    	СтрокаДоков.Порядок=Порядок;
 	Исключение
		Сообщить("Не удалось записать " + наименование + " № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
	КонецПопытки;
КонецПроцедуры	

Функция ПолучитьСчетУчетаРасчетовСКонтрагентами(контрагент)
	ТестЗапрос = Новый Запрос();
	ТестЗапрос.УстановитьПараметр("Контрагент1", контрагент);
	ТестЗапрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами ГДЕ Контрагент = (&Контрагент1)";
	Рез = ТестЗапрос.Выполнить().Выгрузить();
	Если Рез.Количество() > 0 Тогда
       	возврат Рез.Получить(0);
	КонецЕсли;
	возврат неопределено;
КонецФункции	

Функция ПодготовитьРНакладные(табз)
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
    Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Склад"); 
 	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛОтправительнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СтавкаНДСспродаж");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("Контрагент");
	Тзз1.Колонки.Добавить("ЦенаПродажисНДС");
	Тзз1.Колонки.Добавить("СуммаПродажисНДС");
	Тзз1.Колонки.Добавить("СуммаНДСсПродаж");
	Тзз1.Колонки.Добавить("Комментарий");
	Для Каждого Стр из табз Цикл
		ОкрКоличество=Окр(стр.Количество,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
		ххх=Тзз1.Добавить();
		ххх.Номер=стр.НомерДок;
		ххх.Дата=ФормаНастройки.ПолучитьДату(стр.Дата);
		ххх.Номенклатура=НайтиНоменклатуру(стр.НКодИИКО, стр.Ставкандс, стр.ГруппаучетаНазвание).Номенклатура;
		ххх.Склад=Склады.Найти(Стр.СкладНаименование,"СкладНаименование").Склад;
		ххх.ЮЛОтправительнаименование=стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод=стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН=стр.ЮЛИнн;
		ххх.Количество=ОкрКоличество;
		ххх.СебестоимостьЗаедБезНДС=стр.СебестоимостьЗаедБезНДС;
		ххх.СтавкаНДСспродаж=стр.СтавкаНДСспродаж;
		ххх.СебестоимостьБезНДС=стр.СебестоимостьБезНДС;
		ххх.Контрагент=Контрагенты.Найти(стр.КкодИИКО,"КкодИИКО").Контрагент;
		ххх.ЦенаПродажисНДС=стр.ЦенаПродажисНДС;
		ххх.СуммаПродажисНДС=стр.СуммаПродажисНДС;
		ххх.СуммаНДСсПродаж=стр.СуммаНДСсПродаж;
		Попытка
			ххх.Комментарий = стр.Комментарий;
		Исключение 
			ххх.Комментарий = "";
		КонецПопытки;
	КонецЦикла;	
	Если СвернутьТовары Тогда
		Тзз1.Свернуть("Номер,Дата,Номенклатура,Склад,ЮЛОтправительнаименование,ТорговоеПредприятиеКод,ЮЛИНН,СтавкаНДСспродаж,СебестоимостьЗаедБезНДС,Контрагент,ЦенаПродажисНДС,Комментарий", "Количество,СебестоимостьБезНДС,СуммаПродажисНДС,СуммаНДСсПродаж");
		Для каждого с из Тзз1 Цикл
			с.СебестоимостьЗаедБезНДС=с.СебестоимостьБезНДС/с.Количество;
			с.ЦенаПродажисНДС=с.СуммаПродажисНДС/с.Количество;
		КонецЦикла;	
	КонецЕсли;	
	возврат Тзз1;
КонецФункции	

Процедура ОбработкаРасходыхНакладных()
	//Тзз3=Новый ТаблицаЗначений;  
	//ПравильныеКолонки3 = Новый Массив(НачИменаКолонок3.Количество());
	//Для ии=0 по УмныеИменаКолонок3.Количество()-1 цикл
	//	ПравильныеКолонки3[ии]= СокрЛП(УмныеИменаКолонок3[ии]);
	//	Тзз3.Колонки.Добавить(ПравильныеКолонки3[ии]);		
	//КонецЦикла;
	//ОПЗС
	Тзз3=Новый ТаблицаЗначений;  
	Тзз3.Колонки.Добавить("Номер"); 
	Тзз3.Колонки.Добавить("Дата");
    Тзз3.Колонки.Добавить("Номенклатура"); 
	Тзз3.Колонки.Добавить("СкладСписания"); 
	Тзз3.Колонки.Добавить("СкладПрихода"); 
	Тзз3.Колонки.Добавить("СкладПодразделение"); 
 	Тзз3.Колонки.Добавить("Количество");
	Тзз3.Колонки.Добавить("ЮЛнаименование");
	Тзз3.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз3.Колонки.Добавить("ЮЛИНН");
	Тзз3.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз3.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз3.Колонки.Добавить("ЗнакОперации");
	тзз3.Колонки.Добавить("Операция");

	тзз1=тз8.Скопировать();
	тзз1.Очистить();
	Для каждого стрр из тз8 цикл
		Если СокрЛП(Стрр.Операция)="1" тогда  
			Стр=тзз1.Добавить();
			Стр.Дата= Стрр.Дата;
			Стр.НомерДок= Стрр.НомерДок;
			Стр.СкладКод= Стрр.СкладКод;    
			Стр.СкладНаименование= Стрр.СкладНаименование;   
			Стр.НКодИИКО= Стрр.НКодИИКО;    
			Стр.ННаименованиеИИКО= Стрр.ННаименованиеИИКО;    
			Стр.Группаучетаназвание= Стрр.Группаучетаназвание;
			Стр.Количество= Стрр.Количество;    
			Стр.ЦенапродажисНДС= Стрр.ЦенапродажисНДС;    
			Стр.СуммапродажисНДС= Стрр.СуммапродажисНДС;    
			Стр.СуммаНДСспродаж= Стрр.СуммаНДСспродаж;    
			Стр.СтавкаНДСспродаж= Стрр.СтавкаНДСспродаж;
			Стр.СебестоимостьзаедбезНДС= Стрр.СебестоимостьзаедбезНДС;    
			Стр.СебестоимостьбезНДС= Стрр.СебестоимостьбезНДС;    
			Стр.СтавкаНДС= Стрр.СтавкаНДС;    
			Стр.Торговоепредприятиекод= Стрр.Торговоепредприятиекод; 
			Стр.Торговоепредприятиенаименование= Стрр.Торговоепредприятиенаименование; 
			Стр.ЮЛИНН= ФормаНастройки.ИсправленныйЮЛИНН(Стрр.ЮЛИНН);
			Стр.ЮЛнаименование= Стрр.ЮЛнаименование;
			Стр.Операция= Стрр.Операция;
			Стр.Операцияназвание= Стрр.Операцияназвание;
			Стр.Типсписания= Стрр.Типсписания;
			Стр.Типсписанияназвание= Стрр.Типсписанияназвание;
			Стр.Движениеденежныхсредствкод= Стрр.Движениеденежныхсредствкод;
			Стр.Движениеденежныхсредств= Стрр.Движениеденежныхсредств;
			Стр.Статьярасходовкод= Стрр.Статьярасходовкод;
			Стр.Статьярасходов= Стрр.Статьярасходов;
			Стр.КИННИИКО= ФормаНастройки.ИсправленныйЮЛИНН(Стрр.КИННИИКО);
			Стр.ККодИИКО= Стрр.ККодИИКО;
			Стр.КНаименованиеИИКО= Стрр.КНаименованиеИИКО;    
			Если Стрр.СебестоимостьбезНДС>0 Тогда
    		Иначе
				Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в расходной накладной № "+стрр.НомерДок+" от "+стрр.Дата +
					" не задана себестоимость!!!");
			КонецЕсли;
		КонецЕсли;
				
		Если (СокрЛП(Стрр.ТипСписания)="2")или(СокрЛП(Стрр.Операция)="2")  тогда  
			Если Стрр.Количество>0 Тогда
				Если  (стрр.СебестоимостьзаедбезНДС)=0 тогда
					Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в расходной накладной № "+стрр.НомерДок+" от "+стрр.Дата +
						" не задана себестоимость!!!");
				КонецЕсли;	
				Стр=тзз3.Добавить();
				Стр.Дата=стрр.Дата;
				Стр.Номер=стрр.НомерДок;
				скл=Склады.Найти(стрр.СкладНаименование,"СкладНаименование");
				Стр.СкладСписания=скл.Склад;
				Стр.СкладПодразделение=скл.Подразделение;
				Стр.СкладПрихода=скл.Склад;
				Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;
				Стр.СебестоимостьзаедбезНДС=стрр.СебестоимостьзаедбезНДС;
				Если СокрЛП(Стрр.ТипСписания)="2" тогда 
					Стр.Знакоперации=1;
				Иначе	
					Стр.Знакоперации=2;
				КонецЕсли;	
				Стр.Номенклатура=НайтиНоменклатуру(стрр.НКодИИКО, стрр.СтавкаНДСспродаж, стрр.ГруппаучетаНазвание).Номенклатура;
				Стр.Количество=стрр.Количество;
				Стр.Торговоепредприятиекод=стрр.Торговоепредприятиекод;
				Стр.ЮЛИНН=ФормаНастройки.ИсправленныйЮЛИНН(стрр.ЮЛИНН);
				Стр.ЮЛнаименование=стрр.ЮЛнаименование;
			Иначе
				Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте списания № "+стрр.НомерДок+" от "+стрр.Дата +
					" не задано количество!!!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	//НачатьТранзакцию();
	СвернутьПриготовления(тзз3);
	СоздатьПриготовленияПодговленные(тзз3,ФормаНастройки.РН_ОПЗСПрефикс,ФормаНастройки.ДеньРН_ОПЗСПрефикс,1,истина,"!Расходная Накладная");
	СоздатьРнакладные(тзз1,ФормаНастройки.РН_РТУПрефикс,ФормаНастройки.ДеньПрефикс,2);
	//ЗафиксироватьТранзакцию();
КонецПроцедуры
		
Процедура СоздатьРНакладные(табз,префикс,ДеньПрефикс,порядок)
	строки=ПодготовитьРНакладные(табз);
	Если строки=неопределено тогда
		возврат;
	КонецЕсли;
	
	Доки=строки.Скопировать();
	Доки.Свернуть("Номер,Дата,Склад,ТорговоеПредприятиеКод,ЮЛИНН,Контрагент");
	
	СтарыйНомер="";
	Для каждого докСтр из Доки цикл
		номернаклиико=СокрЛП(докСтр.Номер)+"!"+"Расходная Накладная";
		Если докСтр.Номер=СтарыйНомер тогда
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+докСтр.Дата+" имеется 2 Расходных Накладных, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=докСтр.Номер;
		КонецЕсли;
		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;
		
		НомерДокумента=НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Расходная Накладная");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
			Иначе
				Сообщить("Расходная Накладная № "+докСтр.Номер+" от "+докСтр.Дата+" существует!");
				Продолжить
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		//ОбщегоНазначения.ЗаполнитьШапкуДокумента(Док, ТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка");
		Док.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
		Док.КурсВзаиморасчетов=1;
		//Док.УчитыватьНДС=истина;
		//Док.СуммаВключаетНДС=Истина;
		Док.УчитыватьНДС=УчитыватьНДС;
		Док.СуммаВключаетНДС=УчитыватьНДС;
		//Если Укр=0 и Конфигурация20=0 Тогда
		//	Док.НДСВключенВСтоимость=не УчитыватьНДС;
		//КонецЕсли;

		Док.ВидОперации=Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		Док.Контрагент = докСтр.Контрагент;
		Если Конфигурация20=0 Тогда 
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
		Иначе
			Док.СпособЗачетаАвансов=Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;	
		Док.Организация = НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), истина);
		Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, 
			Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "Основной договор покупателя");
		Док.Склад = докСтр.Склад;
		Док.Дата = докСтр.Дата;
		Док.Номер = НомерДокумента;
		// ALEXV: TODO: Брать из справочника "Счета учета расчетов с контрагентами
		Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
		Док.СчетУчетаРасчетовПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
		Если Укр=1 Тогда
			Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("361");
            Док.СчетУчетаРасчетовПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6811");
			Док.СчетУчетаНДС=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6432");
			Док.СчетУчетаНДСПодтвержденный=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6431");
			рез=ПолучитьСчетУчетаРасчетовСКонтрагентами(Док.Контрагент);
			Если рез<>неопределено Тогда
				
			КонецЕсли;
		КонецЕсли;

	
		// Позиции документа
		Док.Товары.Очистить();
		Док.Услуги.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);	
		Для каждого стрр из НСтр Цикл
			Если стрр.Номенклатура.Услуга=ложь  тогда
				услуга=ложь;
				стр2 = Док.Товары.Добавить();
			Иначе
				услуга=Истина;
				стр2 = Док.Услуги.Добавить();
			КонецЕсли;
			стр2.Номенклатура = стрр.Номенклатура;
			Если услуга = ложь тогда
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
				стр2.Коэффициент = 1;
			КонецЕсли;
			стр2.Количество = стрр.Количество;
			стр2.Цена = стрр.ЦенаПродажисНДС;
			стр2.Сумма = стрр.СуммаПродажисНДС;
			стр2.СуммаНДС = стрр.СуммаНДСсПродаж;
			стр2.Себестоимость = стрр.СебестоимостьБезНДС;
			СттНДС=Число(СокрЛП(Стрр.СтавкаНДСспродаж));
			стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,стр2.Сумма,стр2.СуммаНДС);
			строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
			Если строкк<>неопределено тогда
				Если услуга=Ложь тогда
					Если Конфигурация20=1 Тогда
						стр2.СчетУчета = строкк.СчетУчетаБУ;
						стр2.Субконто = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
						стр2.СчетРасходов = Строкк.СчетРасходовОтРеализацииБУ;
						стр2.СчетДоходов = Строкк.СчетДоходовОтРеализацииБУ;
						стр2.Субконто = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
						стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
					ИначеЕсли Укр=0 Тогда	
						стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
						стр2.СчетУчетаНУ = строкк.СчетУчетаНУ;
						стр2.СубконтоБУ = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
						стр2.СчетРасходовБУ = Строкк.СчетРасходовОтРеализацииБУ;
						стр2.СчетДоходовБУ = Строкк.СчетДоходовОтРеализацииБУ;
						стр2.СчетДоходовНУ = Строкк.СчетДоходовОтРеализацииНУ;
						стр2.СубконтоНУ = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
						стр2.СчетРасходовНУ = Строкк.СчетРасходовОтРеализацииНУ;
						стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
					Иначе
						стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
						стр2.СхемаРеализации=строкк.СхемаРеализации;
						//стр2.СубконтоБУ = ПолучитьНоменклатурнуюГруппу(ном.Номенклатура);
						//стр2.СчетРасходовБУ = Строкк.СчетРасходовОтРеализацииБУ;
						//стр2.СчетДоходовБУ = Строкк.СчетДоходовОтРеализацииБУ;
						//стр2.СчетДоходовНУ = Строкк.СчетДоходовОтРеализацииНУ;
						//стр2.СубконтоНУ = ПолучитьНоменклатурнуюГруппу(ном.Номенклатура);
						//стр2.СчетРасходовНУ = Строкк.СчетРасходовОтРеализацииНУ;
						//стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
					КонецЕсли;
				Иначе
					Если Конфигурация20=1 Тогда
						стр2.СчетРасходов = Строкк.СчетРасходовОтРеализацииБУ;
						стр2.СчетДоходов = Строкк.СчетДоходовОтРеализацииБУ;
						стр2.Субконто = ПолучитьНоменклатурнуюГруппу(докСтр.Номенклатура);
						стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
					Иначе
						стр2.СчетРасходовБУ = Строкк.СчетРасходовОтРеализацииБУ;
						стр2.СчетДоходовБУ = Строкк.СчетДоходовОтРеализацииБУ;
						стр2.СчетДоходовНУ = Строкк.СчетДоходовОтРеализацииНУ;
						стр2.СубконтоНУ = ПолучитьНоменклатурнуюГруппу(докСтр.Номенклатура);
						стр2.СчетРасходовНУ = Строкк.СчетРасходовОтРеализацииНУ;
						стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
					КонецЕсли;	
				КонецЕсли;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + докСтр.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;
		СохранитьДокумент1С(Док, "Расходная Накладная", Порядок, номернаклиико);
	КонецЦикла;
КонецПроцедуры

Процедура СвернутьПриготовления(таб)
	СоворачиватьПо="Номер,Дата,Номенклатура,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,ЗнакОперации,СкладПодразделение";
	Если АналитикаДокументов="ПоДокументам" Тогда
			СоворачиватьПо=СоворачиватьПо+",ТорговоеПредприятиеКод";	
		КонецЕсли;
	Если СвернутьТовары Тогда
		таб.Свернуть(СоворачиватьПо, "Количество,СебестоимостьЗаедБезНДС,СебестоимостьБезНДС");
		Для каждого с из таб Цикл
			с.СебестоимостьЗаедБезНДС=с.СебестоимостьБезНДС/с.Количество;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

Процедура ОбработкаАктовРеализации()
	//Сообщить("АР1:" + ТекущаяДата());//ТЕСТВРЕМЯ
	//ОПЗС
	Тзз3=Новый ТаблицаЗначений;  
	Тзз3.Колонки.Добавить("Номер"); 
	Тзз3.Колонки.Добавить("Дата");
    Тзз3.Колонки.Добавить("Номенклатура"); 
	Тзз3.Колонки.Добавить("СкладСписания"); 
	Тзз3.Колонки.Добавить("СкладПрихода"); 
	Тзз3.Колонки.Добавить("СкладПодразделение"); 
 	Тзз3.Колонки.Добавить("Количество");
	Тзз3.Колонки.Добавить("ЮЛнаименование");
	Тзз3.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз3.Колонки.Добавить("ЮЛИНН");
	Тзз3.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз3.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз3.Колонки.Добавить("ЗнакОперации");
	тзз3.Колонки.Добавить("Операция");
	//ООРП
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
    Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Склад"); 
 	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛОтправительнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СтавкаНДСспродаж");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("Операция");
	Тзз1.Колонки.Добавить("СуммапродажисНДС");
	Тзз1.Колонки.Добавить("СуммаНДСспродаж");
	Тзз1.Колонки.Добавить("ЦенапродажисНДС");
	Тзз1.Колонки.Добавить("Движениеденежныхсредствкод");
	
	ТзПроизводствоДобавитьВСебест=Новый ТаблицаЗначений;
	ТзПроизводствоДобавитьВСебест.Колонки.Добавить("Номер"); 
	ТзПроизводствоДобавитьВСебест.Колонки.Добавить("Номенклатура"); 
	ТзПроизводствоДобавитьВСебест.Колонки.Добавить("СебестоимостьБезНДС");
	ТзПродажаДобавитьВСебест=Новый ТаблицаЗначений;
	ТзПродажаДобавитьВСебест.Колонки.Добавить("Номер"); 
	ТзПродажаДобавитьВСебест.Колонки.Добавить("Номенклатура"); 
	ТзПродажаДобавитьВСебест.Колонки.Добавить("СебестоимостьБезНДС");

	//Адд=0;Игн=0;Адд2=0;
	//аа1=0;аа2=0;аа3=0;аа4=0;
	Для каждого стрр из тз1 цикл     
		стрр.Количество=Число(стрр.Количество);
		стрр.ЦенапродажисНДС=Число(стрр.ЦенапродажисНДС);
		стрр.СуммапродажисНДС=Число(стрр.СуммапродажисНДС);
		стрр.СуммаНДСспродаж=Число(стрр.СуммаНДСспродаж);
		стрр.СебестоимостьзаедбезНДС=Число(стрр.СебестоимостьзаедбезНДС);
		стрр.СебестоимостьбезНДС=Число(стрр.СебестоимостьбезНДС);

		
		Если Стрр.ЦенапродажисНДС=0 и стрр.СебестоимостьбезНДС=0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		ДобавитьВМатерьялы=неопределено;
		Если СокрЛП(Стрр.Операция)="1" и Стрр.ЦенапродажисНДС=0 тогда
			Если ВерсияАйко<2 Тогда
				Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте реализации № "+стрр.НомерДок+" от "+стрр.Дата+" не задана цена продажи!!!");
			Иначе
				Стр=ТзПродажаДобавитьВСебест.Добавить();	
				Стр.Номер=стрр.НомерДок;              
				Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;
				//аа1=аа1+Стр.СебестоимостьбезНДС;
				ном=ВсяНомеклатураАйко.Найти(стрр.ПроданноеБлюдоКод,"НКодИИКО");
				Если ном=неопределено Тогда
					Сообщить("Не найдено проданное блюдо "+стрр.ПроданноеБлюдоНазвание+" в акте реализации № "+стрр.НомерДок+" от "+стрр.Дата);
					Сообщить("Стр.СебестоимостьбезНДС="+Стр.СебестоимостьбезНДС);
					ном=ВсяНомеклатураАйко.Получить(0);
					Стр.Номенклатура=НайтиНоменклатуру(ном.НКодИИКО, ном.Ставкандс, ном.ГруппаучетаНазвание).Номенклатура;  
				Иначе
					Стр.Номенклатура=НайтиНоменклатуру(ном.НКодИИКО, ном.Ставкандс, ном.ГруппаучетаНазвание).Номенклатура;  
				КонецЕсли;
			
				Если СокрЛП(Стрр.ТипСписанияНазвание)="Списывать со склада" Тогда 
					ДобавитьВМатерьялы=истина;				
				//Адд2=Адд2+стрр.СебестоимостьбезНДС;
				КонецЕсли;
				//Иначе
					Стр=ТзПроизводствоДобавитьВСебест.Добавить();	
					Стр.Номер=стрр.НомерДок;
					Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;
					Если ном<>неопределено Тогда
						Стр.Номенклатура=НайтиНоменклатуру(ном.НКодИИКО, ном.Ставкандс, ном.ГруппаучетаНазвание).Номенклатура;  
					//Стр.НКодИИКО=стрр.ПроданноеБлюдоКод;
					//Адд=Адд+стрр.СебестоимостьбезНДС;
					КонецЕсли;
				//КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		Если СокрЛП(Стрр.Операция)="1" и Стрр.ЦенапродажисНДС>0 тогда
			// Продажа
			Стр=тзз1.Добавить();
			Стр.Дата=стрр.Дата;
			Стр.Номер=стрр.НомерДок;
			Стр.Склад=Склады.Найти(Стрр.СкладНаименование,"СкладНаименование").Склад;
			Стр.Операция=стрр.Операция;
			Стр.Номенклатура=НайтиНоменклатуру(стрр.НКодИИКО, стрр.СтавкаНДСспродаж, стрр.ГруппаучетаНазвание).Номенклатура;
			Стр.Количество=стрр.Количество;
			Стр.ЦенапродажисНДС=стрр.ЦенапродажисНДС;
			Стр.СуммапродажисНДС=стрр.СуммапродажисНДС;
			Стр.СуммаНДСспродаж=стрр.СуммаНДСспродаж;
			Стр.СебестоимостьзаедбезНДС=стрр.СебестоимостьзаедбезНДС;
			Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;
			//аа2=аа2+Стр.СебестоимостьбезНДС;
			Стр.СтавкаНДСспродаж=стрр.СтавкаНДСспродаж;
			Стр.Торговоепредприятиекод=стрр.Торговоепредприятиекод;
			Стр.ЮЛИНН=ФормаНастройки.ИсправленныйЮЛИНН(стрр.ЮЛИНН);
			код=стрр.Движениеденежныхсредствкод;
			Если ПустаяСтрока(код) Тогда
				код=стрр.Движениеденежныхсредств;	
			КонецЕсли;
			Стр.Движениеденежныхсредствкод=код;
			//Стр.ТипСписания=стрр.ТипСписания;
		КонецЕсли;
		
		Если (СокрЛП(Стрр.ТипСписанияНазвание)="Списывать ингредиенты")
				или	(СокрЛП(Стрр.ТипСписанияНазвание)="")
				или ((СокрЛП(Стрр.ТипСписанияНазвание)="Списывать со склада")и(СокрЛП(Стрр.Операция)="2")) 
			или ДобавитьВМатерьялы<>неопределено тогда  
			Если СокрЛП(Стрр.ТипСписанияНазвание)="Списывать ингредиенты" и Стрр.ЦенапродажисНДС=0 и ВерсияАйко>=2 тогда
			//Если СокрЛП(Стрр.Операция)="1" и Стрр.ЦенапродажисНДС=0 и ВерсияАйко>=2 тогда
				// Этот товар не попал в Отчет о Розничных продажах
				// Его себестоимость добовляем к проданному с ним блюду.
				//Игн=Игн+стрр.СебестоимостьбезНДС;
				продолжить;
			КонецЕсли;
			Если Число(Стрр.Количество)>0 или Число(Стрр.СебестоимостьбезНДС)>0 Тогда
				Если СокрЛП(Стрр.ТипСписанияНазвание)="Списывать ингредиенты" тогда
					Если  (стрр.СуммапродажисНДС-стрр.СуммаНДСспродаж)=0 тогда
						Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте реализации № "+стрр.НомерДок+" от "+стрр.Дата +
							" не задана цена продажи!!!");
					КонецЕсли;	
				Иначе		
					Если  (стрр.СебестоимостьбезНДС)=0 тогда
						Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте реализации № "+стрр.НомерДок+" от "+стрр.Дата +
							" не задана себестоимость!!!");
					КонецЕсли;	
				КонецЕсли;
					
				Стр=тзз3.Добавить();
				Стр.Дата=стрр.Дата;
				Стр.Номер=стрр.НомерДок;
				скл=Склады.Найти(стрр.СкладНаименование,"СкладНаименование");
				Стр.СкладСписания=скл.Склад;
				Стр.СкладПодразделение=скл.Подразделение;
				Стр.СкладПрихода=скл.Склад;
				Стр.Операция=Стрр.Операция;
				Если СокрЛП(Стрр.ТипСписанияНазвание)="Списывать ингредиенты" и ДобавитьВМатерьялы=неопределено тогда 
					Стр.Знакоперации=1;
					//аа1=аа1+стрр.СебестоимостьбезНДС;
				Иначе	
					Стр.Знакоперации=2;
					//аа2=аа2+стрр.СебестоимостьбезНДС;
				КонецЕсли;
				Стр.СебестоимостьзаедбезНДС=стрр.СебестоимостьзаедбезНДС;
				Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;	
				//аа3=аа3+Стр.СебестоимостьбезНДС;
				Стр.Номенклатура=НайтиНоменклатуру(стрр.НКодИИКО, стрр.СтавкаНДСспродаж, стрр.ГруппаучетаНазвание).Номенклатура;
				Стр.Количество=стрр.Количество;
				Стр.Торговоепредприятиекод=стрр.Торговоепредприятиекод;
				Стр.ЮЛИНН=ФормаНастройки.ИсправленныйЮЛИНН(стрр.ЮЛИНН);
				Стр.ЮЛнаименование=стрр.ЮЛнаименование;
			Иначе
				Сообщить("Для материала "+стрр.ННаименованиеИИКО+" в акте реализации № "+стрр.НомерДок+" от "+стрр.Дата +
					" не задано количество!!!");
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;	
	//Сообщить("АР1-:" + ТекущаяДата());//ТЕСТВРЕМЯ
	//Сообщить("аа1="+аа1+",аа2="+аа2+",аа3="+аа3+",аа4="+аа4);
	//Сообщить("Адд="+Адд+",Игн="+Игн+",Адд2="+Адд2);
	Для каждого стр из ТзПроизводствоДобавитьВСебест цикл      
		Отб = Новый Структура("Номер,Номенклатура,Операция",стр.Номер,стр.Номенклатура,"1");
		бл1 = тзз3.НайтиСтроки(Отб);
		Если бл1<>неопределено и бл1.Количество()>0 Тогда
			бл=бл1.Получить(0);
		КонецЕсли;
		Если бл=неопределено Тогда
			Для каждого сс из тзз3 цикл
				Если сс.Номер=стр.Номер Тогда
					бл=сс;
					прервать;		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		бл.СебестоимостьБезНДС=бл.СебестоимостьБезНДС+стр.СебестоимостьБезНДС;
		Если бл.Количество>0 Тогда
			бл.СебестоимостьЗаедБезНДС=бл.СебестоимостьБезНДС/бл.Количество; 
		КонецЕсли;	
	КонецЦикла;
	Для каждого стр из ТзПродажаДобавитьВСебест цикл     
		Отб = Новый Структура("Номер,Номенклатура",стр.Номер,стр.Номенклатура);
		бл1 = тзз1.НайтиСтроки(Отб);
		Если бл1<>неопределено и бл1.Количество()>0 Тогда
			бл=бл1.Получить(0);
		КонецЕсли;
		Если бл=неопределено Тогда
			Для каждого сс из тзз1 цикл
				Если сс.Номер=стр.Номер Тогда
					бл=сс;
					прервать;		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		бл.СебестоимостьБезНДС=бл.СебестоимостьБезНДС+стр.СебестоимостьБезНДС;
		Если бл.Количество>0 Тогда
			бл.СебестоимостьЗаедБезНДС=бл.СебестоимостьБезНДС/бл.Количество; 
		КонецЕсли;	
	КонецЦикла;

    //Сообщить("АР2:" + ТекущаяДата());//ТЕСТВРЕМЯ
	
	//НачатьТранзакцию();
	СвернутьПриготовления(тзз3);
	СоздатьПриготовленияПодговленные(тзз3,ФормаНастройки.АР_ОПЗСПрефикс,ФормаНастройки.ДеньАР_ОПЗСПрефикс,1,истина,"!Акт Реализации");
	//Сообщить("АР3:" + ТекущаяДата());//ТЕСТВРЕМЯ
	Если СвернутьТовары Тогда
		СоворачиватьПо="Номер,Дата,Номенклатура,Склад,ЮЛОтправительнаименование,ЮЛИНН,Операция";
		СоворачиватьСум="СебестоимостьЗаедБезНДС,СебестоимостьБезНДС,СуммапродажисНДС,СуммаНДСспродаж,ЦенапродажисНДС,Количество";
		Если УчитыватьНДС=1 Тогда
			СоворачиватьПо=СоворачиватьПо+",СтавкаНДСспродаж";
		Иначе
			СоворачиватьСум=СоворачиватьСум+",СтавкаНДСспродаж";
		КонецЕсли;
		Если АналитикаДокументов="ПоДокументам" Тогда
			СоворачиватьПо=СоворачиватьПо+",ТорговоеПредприятиеКод";	
		КонецЕсли;
		Если БезналичныеОплаты="ПоСчету" Тогда 
			СоворачиватьПо=СоворачиватьПо+",Движениеденежныхсредствкод";
		КонецЕсли;	
		Тзз1.Свернуть(СоворачиватьПо, СоворачиватьСум);
		Для каждого с из Тзз1 Цикл
			Если УчитыватьНДС=1 Тогда
				с.СтавкаНДСспродаж=0;
			КонецЕсли;
			с.Количество=1;
			с.СебестоимостьЗаедБезНДС=с.СебестоимостьБезНДС/с.Количество;
			с.ЦенапродажисНДС=с.СуммапродажисНДС/с.Количество;
		КонецЦикла;	
	КонецЕсли;
	//Сообщить("АР4:" + ТекущаяДата());//ТЕСТВРЕМЯ
	СоздатьАктыРеализации(тзз1,ФормаНастройки.АР_ООРППрефикс,ФормаНастройки.ДеньПрефикс,2);
	//Сообщить("АР5:" + ТекущаяДата());//ТЕСТВРЕМЯ
	//ЗафиксироватьТранзакцию();
КонецПроцедуры
		
Процедура СоздатьАктыРеализации(табз,префикс,ДеньПрефикс,порядок)
	Доки=табз.Скопировать();
	СоворачиватьПо="Номер,Дата,Склад,ЮЛИНН";
	Если АналитикаДокументов="ПоДокументам" Тогда
		СоворачиватьПо=СоворачиватьПо+",ТорговоеПредприятиеКод";	
	КонецЕсли;
	Если БезналичныеОплаты="ПоСчету" Тогда 
		СоворачиватьПо=СоворачиватьПо+",Движениеденежныхсредствкод";
	КонецЕсли;	
	Доки.Свернуть(СоворачиватьПо);
	Доки.Сортировать("Дата");
	СтарыйНомер="";
	Для Каждого Стр из Доки Цикл
		Если Стр.Номер=СтарыйНомер тогда
			ДатаДокум=стр.Дата;
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+ДатаДокум+" имеется 2 акта реализации, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=Стр.Номер;
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого стр из Доки цикл
		номернаклиико=СокрЛП(Стр.Номер)+"!"+"Акт Реализации";          
		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;	
		Если не ЗначениеЗаполнено(СтатьяДДС) тогда
			Сообщить("Не заполнена статья движения денежных средств!!!", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	
	
		Отб = Новый Структура("Номер,Дата,Склад",стр.Номер,стр.Дата,стр.Склад);
		НСтр = табз.НайтиСтроки(Отб);
		ДатаДокум=ФормаНастройки.ПолучитьДату(стр.Дата);
		НомерДокумента=НомерНакладной(стр,стр.Номер,Префикс,ДеньПрефикс,"Акт Реализации");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		//Если БезналичныеОплаты="ПоСчету" Тогда
		//	Видопл=ВидыОплатыСчета.Найти(Стр.Движениеденежныхсредствкод,"КодАйко");
		//	Если не ЗначениеЗаполнено(Видопл) Тогда
		//		продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		Док = Документы.ОтчетОРозничныхПродажах.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
			Иначе
				Сообщить("Акт реализации № "+НомерДокумента+" от "+Док.Дата  +" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		Док.Дата = ДатаДокум;
		Док.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
		Док.КурсДокумента=1;
		Док.УчитыватьНДС=УчитыватьНДС;
		Док.СуммаВключаетНДС=истина;
		
		Док.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		Док.СтатьяДвиженияДенежныхСредств=СтатьяДДС;
		Если Конфигурация20=1 Тогда
		Иначе	
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
		КонецЕсли;	
		Док.Организация = НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
		Док.Товары.Очистить();
		Док.Оплата.Очистить();
		Док.Номер = НомерДокумента;
		Если Укр=1 тогда
			Док.СчетКасса= ПланыСчетов.Хозрасчетный.НайтиПоКоду("301");
			Док.СчетУчетаНДС= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6412");
			Док.СтатьяВаловыхДоходов=Справочники.СтатьиНалоговыхДеклараций.НП_ПокупТовар_;
			Док.СтатьяВаловыхДоходовВозврат= Справочники.СтатьиНалоговыхДеклараций.НП_ПокупТовар_;
		Иначе
			Док.СчетКасса= ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
		КонецЕсли;
		Док.Склад = стр.Склад;
		Если БезналичныеОплаты="ПоСчету" Тогда
			Видопл=ВидыОплатыСчета.Найти(Стр.Движениеденежныхсредствкод,"КодАйко");
			Если ЗначениеЗаполнено(Видопл) и ЗначениеЗаполнено(Видопл.ВидОплаты) Тогда
				Во=Видопл.ВидОплаты;
				Если (СокрЛП(Во)<>"Рубли")и(СокрЛП(Во)<>"Наличные") Тогда
					СтрДок=Док.Оплата.Добавить();
					СтрДок.ВидОплаты=Во;
					СтрДок.Контрагент=СтрДок.ВидОплаты.Контрагент;
					СтрДок.ДоговорКонтрагента=СтрДок.ВидОплаты.ДоговорКонтрагента;
					СуммапродажисНДС=0;
					Для каждого стрр из НСтр Цикл
						СуммапродажисНДС=СуммапродажисНДС+стрр.СуммапродажисНДС;
					КонецЦикла;
					СтрДок.СуммаОплаты=СуммапродажисНДС;
					Если Укр=0 тогда
						СтрДок.СчетУчетаРасчетов=СтрДок.ВидОплаты.СчетУчетаРасчетов;
					Иначе
						СтрДок.СчетДеньгиВПути=СтрДок.ВидОплаты.СчетДеньгиВПути;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		Для каждого стрр из НСтр Цикл 
			//Не гузим с 0 суммой {{
			Если Число(СокрЛП(стрр.Операция))=2 тогда
				Сумма_ = стрр.СебестоимостьБезНДС;
			Иначе	
				Сумма_ = стрр.СуммаПродажисНДС-стрр.СуммаНДСспродаж;
			КонецЕсли;
			Если Сумма_=0 Тогда Продолжить; КонецЕсли;
			//Не гузим с 0 суммой }}
			
			ОкрКоличество=Окр(стрр.Количество,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			стр2 = Док.Товары.Добавить();
			стр2.Номенклатура = стрр.Номенклатура;
			Если Конфигурация20=1 Тогда
			Иначе	
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
				стр2.Коэффициент = 1;
			КонецЕсли;	
			стр2.Количество = ОкрКоличество;
			СттНДС=Число(СокрЛП(Стрр.СтавкаНДСспродаж));
			Если Число(СокрЛП(стрр.Операция))=2 тогда
				стр2.Цена = стрр.СебестоимостьЗаедБезНДС;
				стр2.Сумма = стрр.СебестоимостьБезНДС;
				стр2.СуммаНДС = 0;
			Иначе	
				стр2.Цена = стрр.ЦенапродажисНДС;
				стр2.Сумма = стрр.СуммаПродажисНДС;
				стр2.СуммаНДС = стрр.СуммаНДСспродаж;
				//Если СттНДС=0 Тогда //Если оператор нечаянно ввлёл без НДС, сами посчитаем НДС   ((
				//	стр2.Сумма = стрр.СуммаПродажисНДС;
				//	стр2.СуммаНДС = стрр.СуммаПродажисНДС - Окр(стрр.СуммаПродажисНДС/6*5,2);
				//	стр2.Цена = стр2.Сумма /?(стрр.Количество=0,1,стрр.Количество);
				//иначе               //Если оператор нечаянно ввлёл без НДС, сами посчитаем НДС   ))
				//	стр2.Цена = стрр.ЦенапродажисНДС;
				//	стр2.Сумма = стрр.СуммаПродажисНДС;
				//	стр2.СуммаНДС = стрр.СуммаНДСспродаж;
				//КонецЕсли;
			КонеЦЕсли;
			//стр2.СуммаБезСкидки = стр2.Сумма;
			стр2.СтавкаНДС =  ПолучитьСтавкуНДС(СттНДС,стр2.Сумма,стр2.СуммаНДС);
			стр2.Себестоимость = стрр.Себестоимостьбезндс;
			строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
			Если строкк<>неопределено тогда
				Если Конфигурация20=1 Тогда
					стр2.СчетУчета = строкк.СчетУчетаБУ;
					стр2.Субконто = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
					стр2.СчетРасходов = Строкк.СчетРасходовОтРеализацииБУ;
					стр2.СчетДоходов = Строкк.СчетДоходовОтРеализацииБУ;
					стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
				ИначеЕсли укр=0 тогда
					стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
					стр2.СчетУчетаНУ = строкк.СчетУчетаНУ;
					стр2.СубконтоБУ = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
					стр2.СчетРасходовБУ = Строкк.СчетРасходовОтРеализацииБУ;
					стр2.СчетДоходовБУ = Строкк.СчетДоходовОтРеализацииБУ;
					стр2.СчетДоходовНУ = Строкк.СчетДоходовОтРеализацииНУ;
					стр2.СубконтоНУ = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
					стр2.СчетРасходовНУ = Строкк.СчетРасходовОтРеализацииНУ;
					стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
				Иначе
					стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
					стр2.СтатьяПриростаУбылиЗапасов = строкк.СтатьяПриростаУбылиЗапасов;
					стр2.СхемаРеализации = строкк.СхемаРеализации;
					стр2.НалоговоеНазначение = строкк.НалоговоеНазначение;
				КонецЕсли;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;
		//ЕСли СвернутьТовары Тогда
		//		ТабТоваров=Док.Товары.Выгрузить();
		//		Если Укр=1 тогда
		//			ТабТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,СчетУчетаБУ,СхемаРеализации,СчетУчетаНДС,СтатьяПриростаУбылиЗапасов,ДокументПродажи,НалоговоеНазначение,ДокументОприходования","Количество,Сумма,СуммаНДС,Себестоимость,СуммаБезСкидки,СуммаСкидки");
		//		Иначе
		//			ТабТоваров.Свернуть("ДокументОприходования,Номенклатура,НомерГТД,СтавкаНДС,СтранаПроисхождения,СчетДоходов,СчетРасходов,СчетУчета,СчетУчетаНДСПоРеализации,Субконто","Количество,Сумма,СуммаНДС,Себестоимость");
		//		КонецЕсли;	
		//		Док.Товары.Загрузить(ТабТоваров);
		//		Для Каждого Стр3 из Док.Товары цикл
		//			ЕСли Стр3.Количество>0 тогда
		//				Стр3.Цена=Стр3.Сумма/Стр3.Количество;
		//			КонецЕсли;	
		//		КонецЦикла;	
		//КонецЕсли;	
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Запись);  
			Сообщить("Записан"+" Акт реализации № "+Док.Номер+" от "+Док.Дата);
			Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
			СтрокаДоков=СписокДокументов.Добавить();
			СтрокаДоков.Док=Док.Ссылка;
			СтрокаДоков.Дата=Док.Дата;
            СтрокаДоков.Порядок=Порядок;
		Исключение
			Сообщить("Не удалось записать Акт реализации № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры	

Функция ПодготовитьПеремещение(табз)
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
    Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("СкладОтправитель"); 
	Тзз1.Колонки.Добавить("СкладПолучатель"); 
 	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛОтправительнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Для Каждого Стр из табз Цикл
		ххх=Тзз1.Добавить();
		ххх.Номер=стр.НомерДок;
		ххх.Дата=ФормаНастройки.ПолучитьДату(стр.Дата);
		ххх.Номенклатура=НайтиНоменклатуру(стр.НКодИИКО, стр.Ставкандс, стр.ГруппаучетаНазвание).Номенклатура;
		ххх.СкладОтправитель=Склады.Найти(Стр.Складотправительнаименование,"СкладНаименование").Склад;
		ххх.СкладПолучатель=Склады.Найти(Стр.Складполучательнаименование,"СкладНаименование").Склад;
		ххх.ЮЛОтправительнаименование=стр.ЮЛОтправительнаименование;
		ххх.ТорговоеПредприятиеКод=стр.Торговоепредприятиеотправителькод;
		ххх.ЮЛИНН=стр.ЮЛОтправительИнн;
		ххх.Количество=стр.Количество;
		ххх.СебестоимостьЗаедБезНДС=стр.СебестоимостьЗаедБезНДС;
	КонецЦикла;	
	Если СвернутьТовары Тогда
		Тзз1.Свернуть("Номер,Дата,Номенклатура,СкладОтправитель,СкладПолучатель,ЮЛОтправительнаименование,ТорговоеПредприятиеКод,ЮЛИНН", "Количество,СебестоимостьЗаедБезНДС");
	КонецЕсли;	
	возврат Тзз1;
КонецФункции

Процедура СоздатьПеремещения(табз,префикс,ДеньПрефикс,порядок)
	строки=ПодготовитьПеремещение(табз);
	Если строки=неопределено тогда
		возврат;
	КонецЕсли;
	
	Доки=строки.Скопировать();
	Доки.Свернуть("Номер,Дата,СкладОтправитель,СкладПолучатель,ТорговоеПредприятиеКод,ЮЛИНН");

	СтарыйНомер="";
	Для каждого докСтр из Доки цикл
		номернаклиико=СокрЛП(докСтр.Номер)+"!"+"Внутреннее Перемещение"; 
		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;
		Если докСтр.Номер=СтарыйНомер тогда
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+докСтр.Дата+" имеется 2 перемещения, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=докСтр.Номер;
		КонецЕсли;

		НомерДокумента=НомерНакладной(докСтр, докСтр.Номер,Префикс,ДеньПрефикс,"Внутреннее Перемещение");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.ПеремещениеТоваров.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
			Иначе
				Сообщить("Перемещение товаров № "+НомерДокумента+" от "+докСтр.Дата  +" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;

		// Шапка документа
		Док.ВидОперации=Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		Док.Дата = докСтр.Дата;
		Док.Номер = НомерДокумента; 
		Док.СкладОтправитель = докСтр.СкладОтправитель;
		Док.СкладПолучатель = докСтр.СкладПолучатель;
		Док.Организация=НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), истина);
		Если не Конфигурация20 Тогда
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
		КонецЕсли;	
		Если Укр=0 Тогда
			Док.НДСвСтоимостиТоваров=истина;
		КонецЕсли;	
		
		// Позиции документа
		Док.Товары.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);	
		Для каждого стрр из НСтр Цикл
			ОкрКоличество=Окр(стрр.Количество,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			стр2 = Док.Товары.Добавить();
			стр2.Номенклатура = стрр.Номенклатура;
			стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
			стр2.Количество = ОкрКоличество;
			стр2.Коэффициент = 1;
			стр2.Цена = стрр.СебестоимостьЗаедБезНДС;
			строкк=НайтиСчетаДляНоменклатуры(стр2.Номенклатура,ТаблицаЗапроса);
			Если строкк<>неопределено тогда
				Если Конфигурация20=1 Тогда
					стр2.СчетУчета = строкк.СчетУчетаБУ;
					стр2.НовыйСчетУчета = стр2.СчетУчета;
				ИначеЕсли Укр=0 Тогда	
					стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
					стр2.СчетУчетаНУ = строкк.СчетУчетаНУ;
					стр2.НовыйСчетУчетаБУ = стр2.СчетУчетаБУ;
					стр2.НовыйСчетУчетаНУ = стр2.СчетУчетаНУ;
				Иначе
					стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
					стр2.НовыйСчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("289");//стр2.СчетУчетаБУ;
				КонецЕсли;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стр2.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;	
		СохранитьДокумент1С(Док, "Перемещение товаров", Порядок, номернаклиико);
	КонецЦикла;
КонецПроцедуры

Функция ПодготовитьПриготовления(табз)
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
    Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("СкладСписания"); 
	Тзз1.Колонки.Добавить("СкладПрихода"); 
	Тзз1.Колонки.Добавить("СкладПодразделение"); 
 	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("ЗнакОперации");
	Для Каждого Стр из табз Цикл
		ОкрКоличество=Окр(стр.Количество,3);
		Если ОкрКоличество=0 Тогда
			Продолжить;
		КонецЕсли;
		ххх=Тзз1.Добавить();
		ххх.Номер=стр.НомерДок;
		ххх.Дата=ФормаНастройки.ПолучитьДату(стр.Дата);
		ххх.Номенклатура=НайтиНоменклатуру(стр.НКодИИКО, стр.Ставкандс, стр.ГруппаучетаНазвание).Номенклатура;  
		скл=Склады.Найти(Стр.СкладСписанияНаименование,"СкладНаименование");
		ххх.СкладСписания=скл.Склад;
		ххх.СкладПодразделение=скл.Подразделение;
		ххх.СкладПрихода=Склады.Найти(Стр.СкладПриходаНаименование,"СкладНаименование").Склад;
		ххх.ЮЛнаименование=стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод=стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН=стр.ЮЛИнн;
		ххх.Количество=ОкрКоличество;
		ххх.СебестоимостьЗаедБезНДС=стр.СебестоимостьЗаедБезНДС;
		ххх.СебестоимостьБезНДС=стр.СебестоимостьБезНДС;
		ххх.ЗнакОперации=стр.ЗнакОперации;
	КонецЦикла;	
	СвернутьПриготовления(Тзз1);
	возврат Тзз1;
КонецФункции	

Процедура СоздатьПриготовления(табз,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	таб=ПодготовитьПриготовления(табз);
	СоздатьПриготовленияПодговленные(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
КонецПроцедуры	

Процедура СоздатьПриготовленияПодговленные(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	Доки = таб.Скопировать(); 
	СоворачиватьПо="Номер,Дата,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,СкладПодразделение";
	Если АналитикаДокументов="ПоДокументам" Тогда
		СоворачиватьПо=СоворачиватьПо+",ТорговоеПредприятиеКод";	
	КонецЕсли;
	Доки.Свернуть(СоворачиватьПо);
	Доки.Сортировать("Дата");
	СтарыйНомер="";
	Для Каждого Стр из Доки Цикл
		Если Стр.Номер=СтарыйНомер тогда          
		    ДатаДокум=ФормаНастройки.ПолучитьДату(стр.Дата);
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+ДатаДокум+" имеется 2 акта приготовления, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=Стр.Номер;
		КонецЕсли;	
	КонецЦикла;	 
	
	Для каждого стр из Доки цикл
		//Сообщить(""+стр.Номер+", "+стр.Дата+", "+стр.СкладСписания+", "+стр.СкладПрихода+", "+стр.ЮЛнаименование+", "+стр.ЮЛИНН+", "+стр.СкладПодразделение);
		номернаклиико=СокрЛП(Стр.Номер)+"!"+"Акт Приготовления";
		Если ПустаяСтрока(базовыйДокумент) Тогда
			д=Докум.Найти(номернаклиико,"Документ");
			Если д=неопределено или не д.Выбор тогда
				Продолжить;
			КонецЕсли;	
		Иначе
			номерБазовый=СокрЛП(Стр.Номер)+базовыйДокумент;
			д=Докум.Найти(номерБазовый,"Документ");
			Если д=неопределено или не д.Выбор тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование<>Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("Номер",стр.Номер);
		НСтр = таб.НайтиСтроки(Отб);
		ДатаДокум=ФормаНастройки.ПолучитьДату(стр.Дата);
		Если сдвинутьДату Тогда
			 ДатаДокум=ДатаДокум-1;
		КонецЕсли;
		НомерДокумента=НомерНакладной(стр,стр.Номер,Префикс,ДеньПрефикс,"Акт Приготовления");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.ОтчетПроизводстваЗаСмену.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
     		Иначе
				Сообщить("Отчет производства за смену № "+Док.Номер+" от "+Док.Дата  +" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		//ОбщегоНазначения.ЗаполнитьШапкуДокумента(Док, ТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");
		Док.Организация=НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
		//Док.ПодразделениеОрганизации=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновноеПодразделениеОрганизации");
		//Если ЗначениеЗаполнено(Стр.Подразделение) Тогда
		//	ПодразделениеДокумента=Стр.Подразделение;
		//КонецЕсли;
 
		Если Конфигурация20=1 Тогда 
			Док.ПодразделениеЗатрат=Подразделение;
			Док.НДСвСтоимостиТоваров = истина;
			Док.СчетЗатрат= ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
		ИначеЕсли Укр=0 тогда
			Док.ПодразделениеОрганизации=Подразделение;
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
			Док.СчетЗатрат= ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
			Док.СчетЗатратНУ= ПланыСчетов.Налоговый.НайтиПоКоду("20.01.1");
			Док.НДСвСтоимостиТоваров=истина;
		Иначе
			Док.ПодразделениеОрганизации=Подразделение;
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
			Док.СчетЗатрат= ПланыСчетов.Хозрасчетный.НайтиПоКоду("231");
		КонецЕсли;
		Док.Продукция.Очистить();
		Док.Материалы.Очистить();
		Док.Дата = ДатаДокум;

		Док.ИспользоватьМатериалы=истина;
		Док.НоменклатурнаяГруппа=ОсновнаяНоменклатурнаяГруппа;
		Док.Номер = НомерДокумента;
		Док.Склад = Стр.СкладСписания;

		Если ЗначениеЗаполнено(Стр.СкладПодразделение) тогда
			Если Конфигурация20=1 Тогда
				Док.ПодразделениеЗатрат=Стр.СкладПодразделение;
			Иначе
				Док.ПодразделениеОрганизации=Стр.СкладПодразделение;
			КонецЕсли;
		КонецЕСли;		
		Для каждого стрр из НСтр Цикл 
			ОкрКоличество=Окр(стрр.Количество,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			Если СокрЛП(стрр.ЗнакОперации)="1" Тогда
				ПлановаяСтоимость=стрр.СебестоимостьЗаедБезНДС;
				Если ПлановаяСтоимость<0.01 Тогда
					ПлановаяСтоимость=0.01;
					СуммаПлановая = ПлановаяСтоимость*ОкрКоличество;
				Иначе
					СуммаПлановая = стрр.СебестоимостьБезНДС;
				КонецЕсли;
				Если СуммаПлановая<0.01 Тогда
					СуммаПлановая=0.01;
				КонецЕсли;	
				
				стр2 = Док.Продукция.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
			//Если ТипЗнч(док)= Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
				стр2.НоменклатурнаяГруппа=ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);	
			//КонецЕсли;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
				стр2.Количество = ОкрКоличество;
				стр2.Коэффициент = 1;
				стр2.ПлановаяСтоимость = ПлановаяСтоимость;
				стр2.СуммаПлановая = СуммаПлановая;

				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчетаБУ;
					стр2.СчетЗатрат = Док.СчетЗатрат;
					Если Конфигурация20=1 Тогда
					ИначеЕсли Укр=0 тогда
						стр2.СчетНУ = строкк.СчетУчетаНУ;
						стр2.СчетЗатратну = Док.СчетЗатратну;
					Иначе
						стр2.СтатьяПриростаУбылиЗапасов=строкк.СтатьяПриростаУбылиЗапасов;
					КонецЕсли;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			Иначе  // операция=2
				стр2 = Док.Материалы.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
				стр2.Количество = ОкрКоличество;
				стр2.Коэффициент = 1;
				стр2.Себестоимость = стрр.СебестоимостьБезНДС;
				стр2.ОтражениеВУСН=Перечисления.ОтражениеВУСН.Принимаются;
				стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);
				Если укр=1 тогда
 					Если ЗначениеЗаполнено(СтатьяЗатрат) тогда
    				    стр2.СтатьяЗатрат = СтатьяЗатрат;
					Иначе
    				    стр2.СтатьяЗатрат = стр2.СтатьяЗатрат;
					КонецЕсли;	
				КонецЕсли;	
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчетаБУ;
					Если Конфигурация20=1 Тогда
						стр2.СтатьяЗатрат = СтатьяЗатрат;
					ИначеЕсли Укр=0 тогда
						стр2.СчетНУ = строкк.СчетУчетаНУ;
						стр2.СтатьяЗатрат = СтатьяЗатрат;
						//стр2.НалоговоеНазначение = строкк.НалоговоеНазначение;
					Иначе
						стр2.СтатьяПриростаУбылиЗапасов=строкк.СтатьяПриростаУбылиЗапасов;
						стр2.НалоговоеНазначение=строкк.НалоговоеНазначение;
					КонецЕсли;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Запись); 
			Сообщить("Записан"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
			Если ПустаяСтрока(базовыйДокумент) Тогда
				Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
			Иначе
				ЭлементыФормы.Докум.Колонки.Док2.Видимость=истина;
				Докум.Найти(номерБазовый,"Документ").Док2=Док.Ссылка;	
			КонецЕсли;
			СтрокаДоков=СписокДокументов.Добавить();
			СтрокаДоков.Док=Док.Ссылка;
			СтрокаДоков.Дата=Док.Дата;
			СтрокаДоков.Порядок=Порядок;
		Исключение
			Сообщить("Не удалось записать Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры	

Функция ПодготовитьАктПереработки(табз)
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
    Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("СкладСписания"); 
	Тзз1.Колонки.Добавить("СкладПрихода"); 
 	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("ЗнакОперации");
	Для Каждого Стр из табз Цикл
		ОкрКоличество=Окр(стр.Количество,3);
		Если ОкрКоличество=0 Тогда
			Продолжить;
		КонецЕсли;
		ххх=Тзз1.Добавить();
		ххх.Номер=стр.НомерДок;
		ххх.Дата=ФормаНастройки.ПолучитьДату(стр.Дата);
		ххх.Номенклатура=НайтиНоменклатуру(стр.НКодИИКО, стр.Ставкандс, стр.ГруппаучетаНазвание).Номенклатура;
		ххх.СкладСписания=Склады.Найти(Стр.СкладСписанияНаименование,"СкладНаименование").Склад;
		ххх.СкладПрихода=Склады.Найти(Стр.СкладПриходаНаименование,"СкладНаименование").Склад;
		ххх.ЮЛнаименование=стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод=стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН=стр.ЮЛИнн;
		ххх.Количество=ОкрКоличество;
		ххх.СебестоимостьЗаедБезНДС=стр.СебестоимостьЗаедБезНДС;
		ххх.СебестоимостьБезНДС=стр.СебестоимостьБезНДС;
		ххх.ЗнакОперации=стр.ЗнакОперации;
	КонецЦикла;	
	Если СвернутьТовары Тогда
		Тзз1.Свернуть("Номер,Дата,Номенклатура,СкладСписания,СкладПрихода,ЮЛнаименование,ТорговоеПредприятиеКод,ЮЛИНН,ЗнакОперации", "Количество,СебестоимостьЗаедБезНДС,СебестоимостьБезНДС");
		Для каждого с из Тзз1 Цикл
			с.СебестоимостьЗаедБезНДС=с.СебестоимостьБезНДС/с.Количество;
		КонецЦикла;
	КонецЕсли;	
	возврат Тзз1;	
КонецФункции	

Процедура СоздатьПереработки(табз,префикс,ДеньПрефикс,порядок)
	строки=ПодготовитьАктПереработки(табз);
	Если строки=неопределено тогда
		возврат;
	КонецЕсли;
	
	Доки=строки.Скопировать();
	Доки.Свернуть("Номер,Дата,СкладСписания,СкладПрихода,ТорговоеПредприятиеКод,ЮЛИНН");
	
	СтарыйНомер="";
	Для каждого докСтр из Доки цикл
		номернаклиико=СокрЛП(докСтр.Номер)+"!"+"Акт Переработки";
		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;
		Если докСтр.Номер=СтарыйНомер тогда
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+докСтр.Дата+" имеется 2 Акта Пераработки, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=докСтр.Номер;
		КонецЕсли;

		НомерДокумента=НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Акт Переработки");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.ОтчетПроизводстваЗаСмену.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
    		Иначе
				Сообщить("Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;

		// Шапка документа
		//ОбщегоНазначения.ЗаполнитьШапкуДокумента(Док, ТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");
	    Док.Организация=НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), истина);
		//Док.ПодразделениеОрганизации=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновноеПодразделениеОрганизации");
		Если Конфигурация20=1 Тогда
			Док.ПодразделениеЗатрат=Подразделение;
		Иначе
			Док.ПодразделениеОрганизации=Подразделение;
		КонецЕсли;	
		Док.Дата = докСтр.Дата;
		Если Конфигурация20=0 Тогда
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
			Если Укр=0 Тогда
				Док.СчетЗатратНУ= ПланыСчетов.Налоговый.НайтиПоКоду("20.01.1");	
			КонецЕсли;
		КонецЕсли;	
		Если Укр=0 Тогда
			Док.СчетЗатрат= ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
			Док.НДСвСтоимостиТоваров=истина;
		Иначе
			Док.СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("231");;
		КонецЕсли;
		Док.ИспользоватьМатериалы=истина;
		Док.НоменклатурнаяГруппа=ОсновнаяНоменклатурнаяГруппа;
		Док.Номер = НомерДокумента;
		Если ЗначениеЗаполнено(докСтр.СкладСписания) тогда
		    Док.Склад = докСтр.СкладСписания;
		ИначеЕсли ЗначениеЗаполнено(докСтр.СкладПрихода) тогда
			Док.Склад = докСтр.СкладПрихода;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Док.Склад) тогда
			Подразделение1=Склады.Найти(Док.Склад,"Склад").Подразделение;
			Если ЗначениеЗаполнено(Подразделение1) Тогда
				Если Конфигурация20=1 Тогда
					Док.ПодразделениеЗатрат=Подразделение1;
				Иначе
					Док.ПодразделениеОрганизации=Подразделение1;
				КонецЕсли;
			КонецЕсли;
		КонецЕСли;
		
		// Позиции документа
		Док.Продукция.Очистить();
		Док.Материалы.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);	
		Для каждого стрр из НСтр Цикл
			Если СокрЛП(стрр.ЗнакОперации)="1" Тогда
				стр2 = Док.Продукция.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
				стр2.Количество = стрр.Количество;
				стр2.Коэффициент = 1;
				стр2.ПлановаяСтоимость = стрр.СебестоимостьЗаедБезНДС;
				Если Стр2.ПлановаяСтоимость=0 Тогда
					стр2.ПлановаяСтоимость=0.01;
					стр2.СуммаПлановая = стр2.ПлановаяСтоимость*стр2.Количество;
				Иначе
					стр2.СуммаПлановая = стрр.СебестоимостьБезНДС;
				КонецЕсли;	
				стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);
				строкк=НайтиСчетаДляНоменклатуры(стр2.Номенклатура,ТаблицаЗапроса);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчетаБУ;
					стр2.СчетЗатрат = Док.СчетЗатрат;
					Если Конфигурация20=0 и Укр=0 Тогда
						стр2.СчетНУ = строкк.СчетУчетаНУ;
						стр2.СчетЗатратну = Док.СчетЗатратну;
					КонецЕсли;	
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стр2.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			Иначе
				стр2 = Док.Материалы.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
				стр2.Количество = стрр.Количество;
				стр2.Коэффициент = 1;
				стр2.Себестоимость = стрр.СебестоимостьЗаедБезНДС*стр2.Количество;
				стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
				Если Укр=1 Тогда
					стр2.СтатьяЗатрат = стр2.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчетаБУ;
					Если Конфигурация20=0 и Укр=0 Тогда
						стр2.СчетНУ = строкк.СчетУчетаНУ;
					КонецЕсли;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		СохранитьДокумент1С(Док, "Отчет производства за смену", Порядок, номернаклиико);
	КонецЦикла;
КонецПроцедуры	

Процедура СоздатьСписаниеНаОснованииИнвентаризации(ДокИнв, докСтр, номерБазовый, порядок)
	НомерДокумента=ДокИнв.Номер;//НомерНакладной(докСтр,докСтр.Номер,ФормаНастройки.ИНВПрефикс,ФормаНастройки.ИНВПрефикс,"Акт Списания");
	Док = Документы.СписаниеТоваров.НайтиПоНомеру(НомерДокумента,ДокИнв.Дата);
	Если не ЗначениеЗаполнено(Док) Тогда
		Док = Документы.СписаниеТоваров.СоздатьДокумент();
		Док.Номер = НомерДокумента;
	Иначе
		Если зд Тогда
			Док = Док.ПолучитьОбъект();
			Док.УстановитьПометкуУдаления(Ложь);
			Док.Проведен=ложь;
     		Иначе
			Сообщить("СписаниеТоваров № "+НомерДокумента+" от "+ДокИнв.Дата+" существует!");
			возврат;					
		КОнецЕсли;
	КОнецЕсли;
	// Шапка документа
	Док.ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
	Док.Организация=НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), истина);
	Док.Дата = докСтр.Дата;
	Если Конфигурация20=1 Тогда
	Иначе	
		Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
	КонецЕсли;	
	Если Укр=1 Тогда
		Док.СчетДТ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("93")
	КонецЕсли;
	Док.Номер = НомерДокумента;
	Док.ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
	Док.Склад = ДокИнв.Склад;
	
	Док.Основание="Инвентаризация "+ДокИнв.Номер;
	Док.ИнвентаризацияТоваровНаСкладе=ДокИнв.Ссылка;
	
	Док.Товары.Очистить();
	Док.ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокИнв.Ссылка);
	Если Док.Товары.Количество() > 0 Тогда
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись); 
			Сообщить("Записано СписаниеТоваров на основании Инвентаризация № "+Док.Номер+" от "+Док.Дата);
			ЭлементыФормы.Докум.Колонки.Док2.Видимость=истина;
			Докум.Найти(номерБазовый,"Документ").Док2=Док.Ссылка;
			СтрокаДоков=СписокДокументов.Добавить();
			СтрокаДоков.Док=Док.Ссылка;
			СтрокаДоков.Дата=Док.Дата;
	        СтрокаДоков.Порядок=Порядок;
		Исключение
			Сообщить("Не удалось записать ОприходованиеТоваров на основании Инвентаризация № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры	

Процедура СоздатьОприходываниеНаОснованииИнвентаризации(ДокИнв, докСтр, номерБазовый, порядок)
	НомерДокумента=ДокИнв.Номер;//НомерНакладной(докСтр,докСтр.Номер,ФормаНастройки.ИНВПрефикс,ФормаНастройки.ИНВПрефикс,"Акт Списания");
	Док = Документы.ОприходованиеТоваров.НайтиПоНомеру(НомерДокумента,ДокИнв.Дата);
	Если не ЗначениеЗаполнено(Док) Тогда
		Док = Документы.ОприходованиеТоваров.СоздатьДокумент();
		Док.Номер = НомерДокумента;
	Иначе
		Если зд Тогда
			Док = Док.ПолучитьОбъект();
			Док.УстановитьПометкуУдаления(Ложь);
			Док.Проведен=ложь;
     		Иначе
			Сообщить("ОприходованиеТоваров № "+НомерДокумента+" от "+ДокИнв.Дата+" существует!");
			возврат;					
		КОнецЕсли;
	КОнецЕсли;
	// Шапка документа
	//Док.ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
	Док.Организация=НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), истина);
	Док.Дата = докСтр.Дата;
	Если Конфигурация20=1 Тогда
	Иначе	
		Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
	КонецЕсли;	
	Док.Номер = НомерДокумента;
	//Док.ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
	Док.Склад = ДокИнв.Склад;
	
	Док.Основание="Инвентаризация "+ДокИнв.Номер;
	Док.ИнвентаризацияТоваровНаСкладе=ДокИнв.Ссылка;
	Док.СтатьяПрочихДоходовРасходов=Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы;
	
	Док.Товары.Очистить();
	Док.ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокИнв.Ссылка);
	Если Док.Товары.Количество() > 0 Тогда
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись); 
			Сообщить("Записано ОприходованиеТоваров на основании Инвентаризация № "+Док.Номер+" от "+Док.Дата);
			ЭлементыФормы.Докум.Колонки.Док3.Видимость=истина;
			Докум.Найти(номерБазовый,"Документ").Док3=Док.Ссылка;
			СтрокаДоков=СписокДокументов.Добавить();
			СтрокаДоков.Док=Док.Ссылка;
			СтрокаДоков.Дата=Док.Дата;
        	СтрокаДоков.Порядок=Порядок;
		Исключение
			Сообщить("Не удалось записать ОприходованиеТоваров на основании Инвентаризация № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

Процедура СоздатьИнвентаризации(табз,префикс,порядок)
	Доки = табз.Скопировать();
	Для Каждого Стр из Доки Цикл
		Если не ЗапускБЫЛ тогда
			Стр.СкладНаименование=СокрЛП(Склады.Найти(Стр.СкладНаименование,"СкладНаименование").Склад);
		КонецЕСли;
	КонецЦикла;	
	Для Каждого Стр из табз Цикл
		Если не ЗапускБЫЛ тогда
			Стр.СкладНаименование=СокрЛП(Склады.Найти(Стр.СкладНаименование,"СкладНаименование").Склад);
		КонецЕСли;
	КонецЦикла;	
	Доки.Свернуть("НомерДок,Дата,ЮЛнаименование,СкладНаименование,Торговоепредприятиекод,ЮЛИНН");
	Доки.Сортировать("Дата");
	СтарыйНомер="";
	Для Каждого Стр из Доки Цикл
		Если Стр.НомерДок=СтарыйНомер тогда
			ДатаДокум=стр.Дата;
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+ДатаДокум+" имеется 2 инвентаризации, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=Стр.НомерДок;
		КонецЕсли;	
	КонецЦикла;	

	Для каждого стр из Доки цикл
		номернаклиико=СокрЛП(Стр.НомерДок)+"!"+"Инвентаризация";
		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование<>Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("НомерДок,Дата,Складнаименование",стр.НомерДок,стр.Дата,стр.Складнаименование);
		НСтр = табз.НайтиСтроки(Отб);
		ДатаДокум=ФормаНастройки.ПолучитьДату(стр.Дата);
		НомерДокумента=НомерНакладной(стр,стр.НомерДок,Префикс,ДеньПрефикс,"Инвентаризация");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.ИнвентаризацияТоваровНаСкладе.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
			Иначе
				Сообщить("Инвентаризация № "+Док.Номер+" от "+Док.Дата  +" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		Док.Организация=НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
		Док.Товары.Очистить();
		Док.Дата = ДатаДокум;
		Док.Номер = НомерДокумента;
		Склл=Склады.Найти(СокрЛП(Стр.СкладНаименование),"Наименование1с");
		Если ЗначениеЗаполнено(Склл) тогда
			Док.Склад = Склл.Склад;
		КонецЕСли;	
		Для каждого стрр из НСтр Цикл 
			Если стрр.ИзлишкиНедостачаСумма=0 Тогда 
				Продолжить;
			КонецЕсли;
			Ном=НайтиНоменклатуру(стрр.НКодИИКО, стрр.Ставкандс, стрр.ГруппаучетаНазвание);
			ОкрКоличество=Окр(стрр.ИзлишкиНедостачаКоличество,3);
			//Если ОкрКоличество=0 Тогда
			//	Продолжить;
			//КонецЕсли;
			стр2 = Док.Товары.Добавить();
			стр2.Номенклатура = ном.Номенклатура;
			Если Конфигурация20=0 Тогда
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения; 
				стр2.Коэффициент = 1;
			КонецЕсли;	
			//стр2.Количество = ОкрКоличество;
			стр2.Цена = стрр.СебестоимостьзаедБезНДС;
			Если Стр2.Цена=0 тогда
			    стр2.Цена = 0.01;
				//стр2.Сумма = стр2.Цена*стр2.Количество;
			Иначе
				//стр2.Сумма = стрр.СебестоимостьБезНДС;
			КонецЕСли;	
			строкк=НайтиСчетаДляНоменклатуры(ном.Номенклатура,ТаблицаЗапроса);
			Если строкк<>неопределено тогда
				Если Конфигурация20=0 Тогда
					стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
				Иначе 
					стр2.СчетУчета = строкк.СчетУчетаБУ;
				КонецЕсли;
				счетУчета=строкк.СчетУчетаБУ;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + ном.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
			КолСубконто=ПланыСчетов.Хозрасчетный.НайтиПоКоду(счетУчета.Код).ВидыСубконто.Количество();
			Если КолСубконто=1 Тогда
				Отбор=Новый Структура ("Субконто1,Организация,Счет",стр2.Номенклатура,Док.Организация,счетУчета);
			ИначеЕСли КолСубконто=2 Тогда
				Отбор=Новый Структура ("Субконто1,Субконто2,Организация,Счет",стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
			Иначе
				Отбор=Новый Структура ("Субконто1,Субконто3,Организация,Счет",стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
			КонецЕСли;	
			Тостатки=РегистрыБухгалтерии.Хозрасчетный.Остатки(Док.Дата,,Отбор,,"Сумма,Количество");
			Стр2.КоличествоУчет=0;
			Стр2.СуммаУчет=0;
			Если Тостатки.Количество()>0 Тогда
				Стр2.КоличествоУчет=Тостатки[0].КоличествоОстатокДТ;
				Стр2.СуммаУчет=Тостатки[0].СуммаОстатокДТ;
				стр2.Количество = Стр2.КоличествоУчет + ОкрКоличество;
				стр2.Сумма = Стр2.СуммаУчет + стрр.ИзлишкиНедостачаСумма;
			Иначе
				стр2.Количество = Окр(стрр.Количество,3);
				стр2.Сумма = стрр.СебестоимостьБезНДС;
			КонецЕсли;	
			//Стр2.КоличествоУчет=стрр.Количество;
			//Стр2.СуммаУчет=стрр.СебестоимостьБезНДС;
			//стр2.Количество = Стр2.КоличествоУчет + ОкрКоличество;
			//стр2.Сумма = Стр2.СуммаУчет + стрр.ИзлишкиНедостачаСумма;
		КонецЦикла;
		//ЕСли СвернутьТовары Тогда
		//		ТабТоваров=Док.Товары.Выгрузить();
		//		Если Укр=1 тогда
		//			ТабТоваров.Свернуть("Номенклатура,Номенклатура,СчетУчета,Цена,ЦенаВРознице","Количество,КоличествоУчет,Сумма,СуммаУчет");
		//		Иначе
		//			ТабТоваров.Свернуть("Номенклатура,Номенклатура,СчетУчета,КоличествоУчет","Количество,СуммаУчет,Сумма,Цена,ЦенаВРознице");
		//		КонецЕсли;	
		//		Док.Товары.Загрузить(ТабТоваров);
		//		Для Каждого Стр3 из Док.Товары цикл
		//			ЕСли Стр3.Количество>0 тогда
		//				Стр3.Цена=Стр3.Сумма/Стр3.Количество;
		//			КонецЕсли;	
		//		КонецЦикла;	
		//КонецЕсли;
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Запись); 
			Сообщить("Записана Инвентаризация № "+Док.Номер+" от "+Док.Дата);
			Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
			СтрокаДоков=СписокДокументов.Добавить();
			СтрокаДоков.Док=Док.Ссылка;
			СтрокаДоков.Дата=Док.Дата;
            СтрокаДоков.Порядок=Порядок;
			СоздатьСписаниеНаОснованииИнвентаризации(Док, стр, номернаклиико, порядок);
			СоздатьОприходываниеНаОснованииИнвентаризации(Док, стр, номернаклиико, порядок);
		Исключение
			Сообщить("Не удалось записать Инвентаризацию № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры	

Процедура СоздатьПКВ(табз,префикс,порядок)
	Доки = табз.Скопировать();
	Доки.Свернуть("НомерДок,Дата,ЮЛнаименование,Торговоепредприятиекод");
	Доки.Сортировать("Дата");
	Для каждого стр из Доки цикл
		номернаклиико=СокрЛП(Стр.НомерДок)+"!"+"Прием кассовой выручки";
		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование<>Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("НомерДок,Дата",стр.НомерДок,стр.Дата);
		НСтр = табз.НайтиСтроки(Отб);
		СуммаОплат=0;
		Для каждого стрр из НСтр Цикл 
			Видопл=ВидыОплаты.Найти(Стрр.ВидОплатыКод,"КодИИКО");
			Если ЗначениеЗаполнено(Видопл) Тогда
				Во=Видопл.ВидОплаты;
				Если (СокрЛП(Во)<>"Рубли")и(СокрЛП(Во)<>"Наличные") Тогда
					 СуммаОплат=СуммаОплат+Стрр.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		ДатаДокум=ФормаНастройки.ПолучитьДату(стр.Дата);
		Выборка=Документы.ОтчетОРозничныхПродажах.Выбрать(НачалоДня(ДатаДокум),КонецДня(ДатаДокум));
		ххх=0;
		Пока Выборка.Следующий() цикл
			Если не Выборка.ПометкаУдаления Тогда
				ххх=ххх+1;
				Док=Выборка.ПолучитьОбъект();
				Если Док.СуммаДокумента = СуммаОплат Тогда
					ххх=1;
					Прервать;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Если ххх>1 тогда
			докНомер=ФормаНастройки.АР_ООРППрефикс+стр.Торговоепредприятиекод;
			Выборка=Документы.ОтчетОРозничныхПродажах.Выбрать(НачалоДня(ДатаДокум),КонецДня(ДатаДокум));
			ххх=0;
			Пока Выборка.Следующий() цикл
				Если не Выборка.ПометкаУдаления и Лев(Выборка.Номер, СтрДлина(докНомер))=докНомер Тогда
					ххх=ххх+1;
					Док=Выборка.ПолучитьОбъект();
				КонецЕсли;
			КонецЦикла;
            Если ххх>1 тогда
				Сообщить("На дату "+Стр.Дата+" существует "+ ххх+" отчетов о розничных продажах!");
				Продолжить;
			КонецЕсли;
		ИначеЕсли ххх=0 тогда
			Сообщить("На дату "+Стр.Дата+" нет ни одного "+ ххх+" отчета о розничных продажах!");
			Продолжить;
		КонецЕсли;	
		Док.Оплата.Очистить();
		Для каждого стрр из НСтр Цикл 
			Видопл=ВидыОплаты.Найти(Стрр.ВидОплатыКод,"КодИИКО");
			Если ЗначениеЗаполнено(Видопл) Тогда
				Во=Видопл.ВидОплаты;
				Если (СокрЛП(Во)<>"Рубли")и(СокрЛП(Во)<>"Наличные") Тогда
					СтрДок=Док.Оплата.Добавить();
					СтрДок.ВидОплаты=Во;
					СтрДок.Контрагент=СтрДок.ВидОплаты.Контрагент;
					СтрДок.ДоговорКонтрагента=СтрДок.ВидОплаты.ДоговорКонтрагента;
					СтрДок.СуммаОплаты=Стрр.Сумма;
					Если Укр=0 тогда
						СтрДок.СчетУчетаРасчетов=СтрДок.ВидОплаты.СчетУчетаРасчетов;
					Иначе
						СтрДок.СчетДеньгиВПути=СтрДок.ВидОплаты.СчетДеньгиВПути;
					КонецЕсли;
				КонецЕсли;
			КонецЕСли;
		КонецЦикла;
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Запись); 
			Сообщить("Записан Отчет о розничных продажах № "+Док.Номер+" от "+Док.Дата);
			Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
		Исключение
			Сообщить("Не удалось записать Отчет о розничных продажах № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры	

Процедура ОбработкаАктовСписания()
	//Тзз3=Новый ТаблицаЗначений;  
	//ПравильныеКолонки3 = Новый Массив(НачИменаКолонок3.Количество());
	//Для ии=0 по УмныеИменаКолонок3.Количество()-1 цикл
	//	ПравильныеКолонки3[ии]= СокрЛП(УмныеИменаКолонок3[ии]);
	//	Тзз3.Колонки.Добавить(ПравильныеКолонки3[ии]);		
	//КонецЦикла;
	//ОПЗС
	Тзз3=Новый ТаблицаЗначений;  
	Тзз3.Колонки.Добавить("Номер"); 
	Тзз3.Колонки.Добавить("Дата");
    Тзз3.Колонки.Добавить("Номенклатура"); 
	Тзз3.Колонки.Добавить("СкладСписания"); 
	Тзз3.Колонки.Добавить("СкладПрихода"); 
	Тзз3.Колонки.Добавить("СкладПодразделение"); 
 	Тзз3.Колонки.Добавить("Количество");
	Тзз3.Колонки.Добавить("ЮЛнаименование");
	Тзз3.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз3.Колонки.Добавить("ЮЛИНН");
	Тзз3.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз3.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз3.Колонки.Добавить("ЗнакОперации");
	тзз3.Колонки.Добавить("Операция");
    //
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
    Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Склад"); 
 	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛОтправительнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СтавкаНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");

	Для каждого стрр из тз6 цикл
		стрр.Количество=Число(стрр.Количество);
		стрр.СебестоимостьБезНДС=Число(стрр.СебестоимостьБезНДС);
		стрр.СебестоимостьЗаедБезНДС=Число(стрр.СебестоимостьЗаедБезНДС);
        		
		Если СокрЛП(Стрр.Операция)="1" тогда
			ОкрКоличество=Окр(стрр.Количество,3);
			//Если ОкрКоличество=0 Тогда
			//	Продолжить;
			//КонецЕсли;
			ххх=Тзз1.Добавить();
			ххх.Номер=стрр.НомерДок;//ПолучитьНомерДокумента(стрр.НомерДок, стрр.Дата, ЭтотОбъект.ДеньПрефикс, "Акт Списания");;
			ххх.Дата=ФормаНастройки.ПолучитьДату(стрр.Дата);
			ххх.Номенклатура=НайтиНоменклатуру(стрр.НКодИИКО, стрр.Ставкандс, стрр.ГруппаучетаНазвание).Номенклатура;
			ххх.Склад=Склады.Найти(Стрр.СкладНаименование,"СкладНаименование").Склад;
			ххх.ЮЛОтправительнаименование=стрр.ЮЛнаименование;
			ххх.ТорговоеПредприятиеКод=стрр.ТорговоеПредприятиеКод;
			ххх.ЮЛИНН=стрр.ЮЛИнн;
			ххх.Количество=ОкрКоличество;
			ххх.СебестоимостьЗаедБезНДС=стрр.СебестоимостьЗаедБезНДС;
			ххх.СтавкаНДС=стрр.СтавкаНДС;
			ххх.СебестоимостьБезНДС=стрр.СебестоимостьБезНДС;
			Если Стрр.СебестоимостьбезНДС>0 Тогда
        	Иначе
				Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте списания № "+стрр.НомерДок+" от "+стрр.Дата +
					" не задана себестоимость!!!");
			КонецЕсли;
		КонецЕсли;
			
		Если (СокрЛП(Стрр.ТипСписания)="2")или(СокрЛП(Стрр.Операция)="2")  тогда  
			Если Стрр.Количество>0 Тогда
				Если  (стрр.СебестоимостьзаедбезНДС)=0 тогда
					Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте списания № "+стрр.НомерДок+" от "+стрр.Дата +
						" не задана себестоимость!!!");
				КонецЕсли;	
				Стр=тзз3.Добавить();
				Стр.Дата=ФормаНастройки.ПолучитьДату(стрр.Дата);
				Стр.Номер=стрр.НомерДок;
				скл=Склады.Найти(Стрр.СкладНаименование,"СкладНаименование");
				Стр.СкладСписания=скл.Склад;
				Стр.СкладПрихода=скл.Склад;
				Стр.СкладПодразделение=скл.Подразделение;
				Если СокрЛП(Стрр.ТипСписания)="2" тогда 
					Стр.Знакоперации=1;
					Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;
					Стр.СебестоимостьзаедбезНДС=стрр.СебестоимостьзаедбезНДС;
				Иначе	
					Стр.Знакоперации=2;
					Стр.СебестоимостьзаедбезНДС=стрр.СебестоимостьзаедбезНДС;
					Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;
				КонецЕсли;	
				Стр.Номенклатура=НайтиНоменклатуру(стрр.НКодИИКО, стрр.Ставкандс, стрр.ГруппаучетаНазвание).Номенклатура;
				Стр.Количество=стрр.Количество;
				Стр.Торговоепредприятиекод=стрр.Торговоепредприятиекод;
				Стр.ЮЛИНН=ФормаНастройки.ИсправленныйЮЛИНН(стрр.ЮЛИНН);
				Стр.ЮЛнаименование=стрр.ЮЛнаименование;
			Иначе
				Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте списания № "+стрр.НомерДок+" от "+стрр.Дата +
					" не задано количество!!!");
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;	
	//НачатьТранзакцию();
	СвернутьПриготовления(тзз3);
	СоздатьПриготовленияПодговленные(тзз3,ФормаНастройки.АС_ОПЗСПрефикс,ФормаНастройки.ДеньАС_ОПЗСПрефикс,1,истина,"!Акт Списания");
	Если СвернутьТовары Тогда
		Тзз1.Свернуть("Номер,Дата,Номенклатура,Склад,ЮЛОтправительнаименование,ТорговоеПредприятиеКод,ЮЛИНН,СтавкаНДС,СебестоимостьЗаедБезНДС", "Количество,СебестоимостьБезНДС");
		Для каждого с из Тзз1 Цикл
			с.СебестоимостьЗаедБезНДС=с.СебестоимостьБезНДС/с.Количество;
		КонецЦикла;	
	КонецЕсли;	
	СоздатьАктыСписания(тзз1,ФормаНастройки.АС_СТПрефикс,2);
	//ЗафиксироватьТранзакцию();
КонецПроцедуры
			
Процедура СоздатьАктыСписания(строки,префикс,порядок)
	Доки=строки.Скопировать();
	Доки.Свернуть("Номер,Дата,Склад,ТорговоеПредприятиеКод,ЮЛИНН");
	
	СтарыйНомер="";
	Для каждого докСтр из Доки цикл
		номернаклиико=СокрЛП(докСтр.Номер)+"!"+"Акт Списания";
		Если докСтр.Номер=СтарыйНомер тогда
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+докСтр.Дата+" имеется 2 АктаСписания, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=докСтр.Номер;
		КонецЕсли;
		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;
		
		НомерДокумента=НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Акт Списания");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.СписаниеТоваров.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.СписаниеТоваров.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
      		Иначе
				Сообщить("Акт списания № "+НомерДокумента+" от "+докСтр.Дата+" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		Док.ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
		Док.Организация=НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), истина);
		Док.Дата = докСтр.Дата;
		Если Конфигурация20=1 Тогда
		Иначе	
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
		КонецЕсли;	
		Если Укр=1 Тогда
			Док.СчетДТ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("93")
		КонецЕсли;
		Док.Номер = НомерДокумента;
		Док.ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
		Док.Склад = докСтр.Склад;
	
		// Позиции документа
		Док.Товары.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);	
		Для каждого стрр из НСтр Цикл
			Если стрр.Количество=0 Тогда
				Продолжить;
			КонецЕсли;
			стр2 = Док.Товары.Добавить();
			стр2.Номенклатура = стрр.Номенклатура;
			стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
			стр2.Количество = стрр.Количество;
			стр2.Коэффициент = 1;
			стр2.СтавкаНДСВРознице=ПолучитьСтавкуНДС2(Стрр.СтавкаНДС);
			стр2.Цена = стрр.СебестоимостьЗаедБезНДС;
			стр2.Сумма = стрр.СебестоимостьБезНДС;
			стр2.Себестоимость = стрр.Себестоимостьбезндс;
			строкк=НайтиСчетаДляНоменклатуры(стр2.Номенклатура,ТаблицаЗапроса);
			Если строкк<>неопределено тогда
				Если Конфигурация20=1 Тогда
					стр2.СчетУчета = строкк.СчетУчетаБУ;
				ИначеЕсли Укр=0 Тогда
					стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
					стр2.СчетУчетаНУ = строкк.СчетУчетаНУ;
				Иначе
					стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
				КонецЕсли;	
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стр2.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;
		СохранитьДокумент1С(Док, "Акт списания", Порядок, номернаклиико);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСчетУчетаБУ(Док, строкк)
	Если ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Если Док.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			возврат строкк.СчетУчетаЗабалансовыйБУ;
		КонецЕсли;	
	КонецЕсли;
	возврат строкк.СчетУчетаБУ;
КонецФункции

Процедура СоздатьВозвратныеНакладные(табз,префикс,ДеньПрефикс,порядок)
	Доки = табз.Скопировать();
	Для Каждого Стр из Доки Цикл
		Если не ЗапускБЫЛ тогда
			Стр.СкладНаименование=СокрЛП(Склады.Найти(Стр.СкладНаименование,"СкладНаименование").Склад);
		КонецЕСли;
	КонецЦикла;	
	Для Каждого Стр из табз Цикл
		Если не ЗапускБЫЛ тогда
			Стр.СкладНаименование=СокрЛП(Склады.Найти(Стр.СкладНаименование,"СкладНаименование").Склад);
		КонецЕСли;
	КонецЦикла;	
	Доки.Свернуть("НомерДок,Дата,КкодИИКО,ЮЛнаименование,СкладНаименование,СчетФактура,ПриходнаяНакладнаяНомер,ПриходнаяНакладнаяДата,Торговоепредприятиекод,ЮЛИНН");
	Доки.Сортировать("Дата");
	СтарыйНомер="";
	Для Каждого Стр из Доки Цикл
		Если Стр.НомерДок=СтарыйНомер тогда
			ДатаДокум=стр.Дата;
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+ДатаДокум+" имеется 2 накладные, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер=Стр.НомерДок;
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого стр из Доки цикл
		номернаклиико=СокрЛП(Стр.НомерДок)+"!"+"Возвратная Накладная";
		д=Докум.Найти(номернаклиико,"Документ");
		Если д=неопределено или не д.Выбор тогда
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование<>Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("НомерДок,Дата,СкладНаименование",стр.НомерДок,стр.Дата,Стр.СкладНаименование);
		НСтр = табз.НайтиСтроки(Отб);
		ДатаДокум=ФормаНастройки.ПолучитьДату(стр.Дата); 
		НомерДокумента=НомерНакладной(стр,стр.НомерДок,Префикс,ДеньПрефикс,"Возвратная Накладная");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.ВозвратТоваровПоставщику.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Проведен=ложь;
			Иначе
				Сообщить("Возвратная накладная № "+Стр.НомерДок+" от "+Стр.Дата+" существует!");
				Продолжить
			КОнецЕсли;
		КОнецЕсли;
		Док.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
		Док.КурсВзаиморасчетов=1;
		Док.КратностьВзаиморасчетов=1;
		//Док.УчитыватьНДС=истина;
		//Док.СуммаВключаетНДС=Истина;
		Док.УчитыватьНДС=УчитыватьНДС;
		Док.СуммаВключаетНДС=УчитыватьНДС;
		Если Укр=0 Тогда
			Док.НДСВключенВСтоимость=не УчитыватьНДС;
		КонецЕсли;
		
		Док.ВидОперации=Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
		Контр = Контрагенты.Найти(стр.КкодИИКО,"КкодИИКО");
		Док.Контрагент = Контр.Контрагент;
		Если Конфигурация20=0 Тогда
			Док.ОтражатьВНалоговомУчете = ОтражатьВНУ;
		КонецЕсли;
		//Док.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		Док.Организация=НайтиОгранизациюПоИНН(ФормаНастройки.ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
		Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, 
			Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор");
		НомНак=НомерНакладной(стр,Стр.ПриходнаяНакладнаяНомер,Префикс,ДеньПрефикс,"Возвратная Накладная");
		Если НомНак=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Если ПустаяСтрока(Стр.Приходнаянакладнаядата) тогда
        	Док.Сделка=Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(НомНак);
        Иначе
            Док.Сделка=Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(НомНак,ФормаНастройки.ПолучитьДату(Стр.Приходнаянакладнаядата));
        КонецЕсли;

		Если Не ЗначениеЗаполнено(Док.Сделка) тогда
			Сообщить("Не найдена накладная № "+НомНак+"от "+ Стр.Приходнаянакладнаядата+" для возвратной накладной № "+Стр.НомерДок+" от "+Стр.Дата);
		КонецЕсли;	
		Если не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			Сообщить("У контрагента "+Док.Контрагент+" не заполнен основной договор! Возвратная накладная № "+СокрЛП(Док.Номер)+" от "+ДатаДокум+" проведена не будет");
			//Если  не Переключатель1 Тогда
			//	Продолжить;
			//КонецЕсли;	
		КОнецЕсли;
		Склл=Склады.Найти(СокрЛП(Стр.СкладНаименование),"Наименование1с");
		Если ЗначениеЗаполнено(Склл) тогда
			Док.Склад = Склл.Склад;
		КонецЕСли;	
		Док.Товары.Очистить();
		Док.Дата = ДатаДокум;
		Док.Номер = НомерДокумента;
		Если Укр=0 Тогда
			// ALEXV: TODO: Брать из справочника "Счета учета расчетов с контрагентами
			Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
			Док.СчетУчетаРасчетовПоПретензиям=ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.02");//Док.СчетУчетаРасчетовСКонтрагентом;
			Док.СтатьяДоходовИРасходов=Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
		Иначе
			Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("631");
			Док.СчетУчетаДоходовБУ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("719");
			Док.СчетУчетаРасходовБУ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("946");
			Док.СчетУчетаНДС= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6442");
			Док.СчетУчетаНДСПодтвержденный= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6441");
			Док.СтатьяВаловыхРасходов=Справочники.СтатьиНалоговыхДеклараций.НП_ПокупТовар_;
			Док.СчетУчетаРасчетовПоТаре=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6851");
            Док.СчетУчетаРасчетовПоТареПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("3711");
		КонецЕСли;
		Для каждого стрр из НСтр Цикл 
			Ном=НайтиНоменклатуру(стрр.НКодИИКО, стрр.Ставкандс, стрр.ГруппаучетаНазвание);
			ОкрКоличество=Окр(стрр.Количество,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			стр2 = Док.Товары.Добавить();
			стр2.Номенклатура = ном.Номенклатура;
			стр2.ЕдиницаИзмерения = стр2.Номенклатура.БазоваяЕдиницаИзмерения;
			стр2.Коэффициент = 1;
			стр2.Количество = ОкрКоличество;
			//Если Стр2.Количество=0 Тогда
			//	Сообщить("В накладной № "+Док.Номер+" от "+Док.Дата+" в строке № "+Стр2.НомерСтроки+" не указано количество!!!");
			//КонецЕСли;	
			 //Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;
			стр2.Цена = стрр.ЦенапродажисНДС;
			стр2.Сумма = стрр.СуммапродажисНДС;
			стр2.СуммаНДС = стрр.СуммаНДСспродаж;
			СттНДС=Число(СокрЛП(Стрр.СтавкаНДСспродаж));
			стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,стр2.Сумма,стр2.СуммаНДС);
			строкк=НайтиСчетаДляНоменклатуры(ном.Номенклатура,ТаблицаЗапроса);
			Если Укр=1 Тогда
				стр2.НДСВключенВСтоимость=не УчитыватьНДС;
			КонецЕсли;
			Если строкк<>неопределено тогда
				Если Конфигурация20=1 Тогда
					стр2.СчетУчетаНДС = строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
					стр2.СчетУчета = строкк.СчетУчетаБУ;
					Док.СчетУчетаДоходов=ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.01");// строкк.СчетДоходовОтРеализацииБУ;
					Док.СчетУчетаРасходов=ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02");//строкк.СчетРасходовОтРеализацииБУ;
				ИначеЕсли Укр=0 Тогда
					стр2.СчетУчетаНДС = строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
					стр2.СчетУчетаБУ = строкк.СчетУчетаБУ;
					стр2.СчетУчетаНУ = строкк.СчетУчетаНУ; 
					Док.СчетУчетаДоходовБУ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.01");// строкк.СчетДоходовОтРеализацииБУ;
					Док.СчетУчетаРасходовБУ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02");//строкк.СчетРасходовОтРеализацииБУ;
					Док.СчетУчетаДоходовНУ=ПланыСчетов.Налоговый.НайтиПоКоду("91.01.7");//строкк.СчетДоходовОтРеализацииНУ;//					
					Док.СчетУчетаРасходовНУ=ПланыСчетов.Налоговый.НайтиПоКоду("91.02.7");//строкк.СчетРасходовОтРеализацииНУ;//					
				Иначе
					стр2.СчетУчетаБУ = ПолучитьСчетУчетаБУ(Док, строкк);
					стр2.СтатьяПриростаУбылиЗапасов = строкк.СтатьяПриростаУбылиЗапасов;
					стр2.УчитываетсяКакЗапасНУ = строкк.УчитыватьКакЗапасНУ;
					стр2.НалоговоеНазначение = строкк.НалоговоеНазначение;
				КонецЕсли;	
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + ном.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;
		ЕСли СвернутьТовары Тогда
			ТабТоваров=Док.Товары.Выгрузить();
			Если Укр=1 тогда
               	ТабТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,СчетУчетаБУ,СчетУчетаНДС,СтавкаНДСВРознице,НДСВключенВСтоимость,СтатьяПриростаУбылиЗапасов,НалоговоеНазначение,УчитываетсяКакЗапасНУ,ДокументОприходования","Количество,Сумма,СуммаНДС,СуммаВРознице,Себестоимость");
			Иначе
				ТабТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,СчетУчета,СчетУчетаНДС,СтавкаНДСВРознице,ДокументОприходования","Количество,Сумма,СуммаНДС,СуммаВРознице,Себестоимость");
			КонецЕсли;
			Док.Товары.Загрузить(ТабТоваров);
			Для Каждого Стр3 из Док.Товары цикл
				ЕСли Стр3.Количество>0 тогда
					Стр3.Цена=Стр3.Сумма/Стр3.Количество;
					Стр3.ЦенаВРознице=Стр3.СуммаВРознице/Стр3.Количество;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Запись);  
			Сообщить("Записан"+"а накладная № "+Док.Номер+" от "+Док.Дата);
			Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
			СтрокаДоков=СписокДокументов.Добавить();
			СтрокаДоков.Док=Док.Ссылка;
			СтрокаДоков.Дата=Док.Дата;
			СтрокаДоков.Порядок=Порядок;
		Исключение
			Сообщить("Не удалось записать накладную № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры	

// Создаем доки

Процедура КнопкаВыполнитьНажатие(Кнопка)
	//Запись в ДБФы
	Ошибок = 0;     
	Если пн или рн или вн тогда
		Ошибок = Ошибок + ФормаНастройки.СохранитьКонтрагентов(Контрагенты);
	КонецЕсли;
	
	Ошибок = Ошибок + ФормаНастройки.СохранитьСклады(Склады);
	Ошибок = Ошибок + ФормаНастройки.СохранитьТипыОплат(БезналичныеОплаты,ВидыОплаты,ВидыОплатыСчета);
	Ошибок = Ошибок + ФормаНастройки.СохранитьНоменклатуру(Номенклатура);
	ФормаНастройки.СохранитьКатегории(БухгалтерскаяКатегория);
	Ошибок = Ошибок + ФормаНастройки.СохранитьГруппировку(Группировка);
	Ошибок = Ошибок + ФормаНастройки.СохранитьФизЛица(ФизЛица);
	
	ФормаНастройки.СохранитьНастройки();
	
	Если АП или АПЕР или АР Или РН Тогда
		Если не ЗначениеЗаполнено(Подразделение) Тогда
			Сообщить("Не заполнено подразделение!!!", СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	//Считываем счета номенклатуры
	
	Если Переключатель1 тогда
		режим=РежимЗаписиДокумента.Проведение;
		Слово="Проведен";
	Иначе
		режим=РежимЗаписиДокумента.Запись;
		Слово="Записан";
	КонецЕсли;
	
	Если (Ошибок = 0) Тогда
		МассивНоменклатура	 = Новый Массив();
		МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
		//Если гн1=0 Тогда
			Для каждого гг из номенклатура цикл
				МассивНоменклатура.Добавить(гг.Номенклатура.Ссылка);
				//МассивНоменклатура.Добавить(РодительПервогоУровня(гг.Номенклатура.Ссылка));
				Номмм=гг.Номенклатура.ПолучитьОбъект();
				Пока Номмм.Уровень()>0 Цикл
					Номмм=Номмм.Родитель;
					МассивНоменклатура.Добавить(Номмм.Ссылка);
				КонецЦикла;
			КонецЦикла;
		//Иначе
			Для каждого гг из группировка цикл
				МассивНоменклатура.Добавить(гг.Номенклатура.Ссылка);
				МассивНоменклатура.Добавить(Неопределено);    
				//МассивНоменклатура.Добавить(РодительПервогоУровня(гг.Номенклатура.Ссылка));
				Номмм=гг.Номенклатура.ПолучитьОбъект();
				Пока Номмм.Уровень()>0 Цикл
					Номмм=Номмм.Родитель;
					МассивНоменклатура.Добавить(Номмм.Ссылка);
				КонецЦикла;
			КонецЦикла;
		//КонецЕсли;
		ТестЗапрос = Новый Запрос();
		ТестЗапрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
		Если Укр=1 Тогда
			ТестЗапрос.Текст = "
			|ВЫБРАТЬ
			|	СчетаУчетаНоменклатуры.Организация КАК Организация,
			|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	СчетаУчетаНоменклатуры.Склад КАК Склад,
			|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
			|   СчетаУчетаНоменклатуры.СтатьяПриростаУбылиЗапасов КАК СтатьяПриростаУбылиЗапасов,
			|   СчетаУчетаНоменклатуры.НалоговоеНазначение КАК НалоговоеНазначение,
			|   СчетаУчетаНоменклатуры.УчитыватьКакЗапасНУ КАК УчитыватьКакЗапасНУ,
			|	СчетаУчетаНоменклатуры.СчетУчетаБУ КАК СчетУчетаБУ,
			|	СчетаУчетаНоменклатуры.СчетУчетаПередачиБУ КАК СчетУчетаПередачиБУ,
			|	СчетаУчетаНоменклатуры.СхемаРеализации КАК СхемаРеализации,
			|	СчетаУчетаНоменклатуры.СубконтоБУ1 КАК СубконтоБУ1,
			|	СчетаУчетаНоменклатуры.СубконтоБУ2 КАК СубконтоБУ2,
			|	СчетаУчетаНоменклатуры.СубконтоБУ3 КАК СубконтоБУ3,
			|   СчетаУчетаНоменклатуры.СчетУчетаЗабалансовыйБУ КАК СчетУчетаЗабалансовыйБУ
			|ИЗ
			|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
			|	
			|ГДЕ
			|	СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)";
		ИначеЕсли Конфигурация20=1 Тогда
			ТестЗапрос.Текст = "
			|ВЫБРАТЬ
			|	СчетаУчетаНоменклатуры.Организация КАК Организация,
			|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	СчетаУчетаНоменклатуры.Склад КАК Склад,
			|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
			|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчетаБУ,
			|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетУчетаПередачиБУ,
			|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализации КАК СчетДоходовОтРеализацииБУ,
			|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализации КАК СчетРасходовОтРеализацииБУ,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДСПоПриобретеннымЦенностям,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетУчетаНДСУплаченногоНаТаможне,
			|	СчетаУчетаНоменклатуры.Субконто1 КАК СубконтоБУ1,
			|	СчетаУчетаНоменклатуры.Субконто2 КАК СубконтоБУ2,
			|	СчетаУчетаНоменклатуры.Субконто3 КАК СубконтоБУ3
			|ИЗ
			|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
			|	
			|ГДЕ
			|	СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)";
		Иначе	
			ТестЗапрос.Текст = "
			|ВЫБРАТЬ
			|	СчетаУчетаНоменклатуры.Организация КАК Организация,
			|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	СчетаУчетаНоменклатуры.Склад КАК Склад,
			|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
			|	СчетаУчетаНоменклатуры.СчетУчетаБУ КАК СчетУчетаБУ,
			|	СчетаУчетаНоменклатуры.СчетУчетаПередачиБУ КАК СчетУчетаПередачиБУ,
			|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализацииБУ КАК СчетДоходовОтРеализацииБУ,
			|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализацииБУ КАК СчетРасходовОтРеализацииБУ,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДСПоПриобретеннымЦенностям,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетУчетаНДСУплаченногоНаТаможне,
			|	СчетаУчетаНоменклатуры.СубконтоБУ1 КАК СубконтоБУ1,
			|	СчетаУчетаНоменклатуры.СубконтоБУ2 КАК СубконтоБУ2,
			|	СчетаУчетаНоменклатуры.СубконтоБУ3 КАК СубконтоБУ3,
			|	СчетаУчетаНоменклатуры.СубконтоНУ1 КАК СубконтоНУ1,
			|	СчетаУчетаНоменклатуры.СубконтоНУ2 КАК СубконтоНУ2,
			|	СчетаУчетаНоменклатуры.СубконтоНУ3 КАК СубконтоНУ3,
			|	СчетаУчетаНоменклатуры.СчетУчетаНУ КАК СчетУчетаНУ,
			|	СчетаУчетаНоменклатуры.СчетУчетаПередачиНУ КАК СчетУчетаПередачиНУ,
			|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализацииНУ КАК СчетДоходовОтРеализацииНУ,
			|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализацииНУ КАК СчетРасходовОтРеализацииНУ
			|ИЗ
			|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
			|	
			|ГДЕ
			|	СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)";
		КонецЕсли;
		ТаблицаЗапроса = ТестЗапрос.Выполнить().Выгрузить();
	Иначе	
		Возврат;
	КонецЕсли;
	//Создаем доки
	
	Если (Ошибок = 0) Тогда
		СписокДокументов=Новый ТаблицаЗначений;
		СписокДокументов.Колонки.Добавить("Док");
		СписокДокументов.Колонки.Добавить("Дата");
		СписокДокументов.Колонки.Добавить("Порядок");
		
		Если пн Тогда 
			//НачатьТранзакцию();
			СоздатьНакладные(Тз,ФормаНастройки.ПНПрефикс,ФормаНастройки.ДеньПрефикс,1);
			//ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если АП тогда
			//НачатьТранзакцию();
			СоздатьПриготовления(тз3,ФормаНастройки.АПриготовленияПрефикс,ФормаНастройки.ДеньАПриготовленияПрефикс,1,ложь,"");
			//ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если АПЕР тогда
			//НачатьТранзакцию();
			СоздатьПереработки(тз5,ФормаНастройки.АПерараоткиПрефикс,ФормаНастройки.ДеньАПерараоткиПрефикс,1);
			//ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если ВП тогда
			//НачатьТранзакцию();
			СоздатьПеремещения(тз2,ФормаНастройки.ВППрефикс,ФормаНастройки.ДеньПрефикс,1);
			//ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если ВН тогда
			//НачатьТранзакцию();
			СоздатьВозвратныеНакладные(тз9,ФормаНастройки.ВНПрефикс,ФормаНастройки.ДеньПрефикс,1);
			//ЗафиксироватьТранзакцию();
		КонецЕсли;

		Если ар тогда
			ОбработкаАктовРеализации();
		КонецЕсли;
		
		Если АС тогда
			ОбработкаАктовСписания();
		КонецЕсли;
		
		Если РН тогда
			ОбработкаРасходыхНакладных();
		КонецЕсли;
		
		Если ИН тогда
			//НачатьТранзакцию();
			СоздатьИнвентаризации(тз7,ФормаНастройки.ИНВПрефикс,1);
			//ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если ар и БезналичныеОплаты="ИзПриемаКассовойВыручки" тогда
			//НачатьТранзакцию();
			СоздатьПКВ(тз4,ФормаНастройки.АР_ООРППрефикс,1);
			//ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		ЗапускБЫЛ=Истина;
        Если Режим=РежимЗаписиДокумента.Проведение Тогда
			    		СписокДокументов.Сортировать("Дата,Порядок");
			Для каждого докка из СписокДокументов Цикл
				Попытка 
					Если Докка.Док.Метаданные().Имя="ИнвентаризацияТоваровНаСкладе" Тогда
						Док=Докка.Док.ПолучитьОбъект();
						Для Каждого Стр2 из Док.Товары Цикл
							Если Конфигурация20=0 Тогда
								счетУчета=стр2.СчетУчетаБУ;
							Иначе
								счетУчета=стр2.СчетУчета;
							КонецЕсли;	
							КолСубконто=ПланыСчетов.Хозрасчетный.НайтиПоКоду(счетУчета.Код).ВидыСубконто.Количество();
							Если КолСубконто=1 Тогда
								Отбор=Новый Структура ("Субконто1,Организация,Счет",стр2.Номенклатура,Док.Организация,счетУчета);
							ИначеЕСли КолСубконто=2 Тогда
								Отбор=Новый Структура ("Субконто1,Субконто2,Организация,Счет",стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
							Иначе
								Отбор=Новый Структура ("Субконто1,Субконто3,Организация,Счет",стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
							КонецЕСли;	
							Тостатки=РегистрыБухгалтерии.Хозрасчетный.Остатки(Док.Дата,,Отбор,,"Сумма,Количество");
							Если Тостатки.Количество()>0 Тогда
								Стр2.КоличествоУчет=Тостатки[0].КоличествоОстатокДТ;
								Стр2.СуммаУчет=Тостатки[0].СуммаОстатокДТ;
							КонецЕсли;	
						КонецЦикла;
						Док.Записать(РежимЗаписиДокумента.Запись); 
					Иначе
					Если не ЗначениеЗаполнено(Докка.Док) Тогда
							Сообщить("Не найден документ от "+Докка.Дата, СтатусСообщения.ОченьВажное);		
							Продолжить;
						КонецЕсли;
						дд=Докка.Док.ПолучитьОбъект();
						Если дд=неопределено Тогда
							Сообщить("Не найден документ "+Докка.Док.Номер, СтатусСообщения.ОченьВажное);		
							Продолжить;
						КонецЕсли;
						дд.Записать(Режим); 
						Сообщить(""+ Докка.Док+" проведен!");
					КонецЕсли;	
				Исключение
					Сообщить(""+Докка.Док+" не проведен "+ ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				КонецПопытки;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ВидимостьПодразделения()
	   ЭлементыФормы.Надпись12.Видимость=(АП или АР или АПЕР или АС или РН);
	   ЭлементыФормы.ПолеВвода5.Видимость=(АП или АР или АПЕР или АС или РН);
 КонецПроцедуры
   
Процедура ВидимостьСДДС()
	   ЭлементыФормы.Надпись14.Видимость=АР;
	   ЭлементыФормы.СтатьяДДС.Видимость=АР;
 КонецПроцедуры

 Процедура ДоступностьПКВ()
	 //Если укр=0 тогда
	 	ЭлементыФормы.БезналичныеОплаты.Доступность=АР;
		 //Если не Ар тогда
		//	 ПКВ=АР;	   
		 //КонецЕсли;	 
		 ПКВПриИзменении();
	 //КонецЕсли;
КонецПроцедуры	   
 
 Процедура АППриИзменении(Элемент)
	 ВидимостьПодразделения();
 КонецПроцедуры

 Процедура АПЕРПриИзменении(Элемент)
	 ВидимостьПодразделения();
 КонецПроцедуры

 Процедура АСПриИзменении(Элемент)
	 ВидимостьПодразделения();
 КонецПроцедуры

 Процедура ИнПриИзменении(Элемент)
	 ВидимостьПодразделения();
 КонецПроцедуры

 Процедура ВидимостьГруппировки()
	//Если гн1 =0 тогда
	//	 ЭлементыФормы.Панель1.Страницы.Группировка.Видимость=Ложь;
	//	 ЭлементыФормы.Панель1.Страницы.Номенклатура.Видимость=Истина;
	// Иначе
	//	 ЭлементыФормы.Панель1.Страницы.Группировка.Видимость=Истина;
	//	 ЭлементыФормы.Панель1.Страницы.Номенклатура.Видимость=Ложь;
	//	 Если гн1=1 тогда
	//	      ЭлементыФормы.Группировка.Колонки.СтавкаНДС.ТекстШапки="Ставка НДС";
	//	  Иначе
	//	      ЭлементыФормы.Группировка.Колонки.СтавкаНДС.ТекстШапки="Бух.категория+Ставка НДС";
	//     КонецЕсли;	 
	//КонецЕсли;	 
 КонецПроцедуры
 
 Процедура ТабличноеПоле1Группа1СНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Ответ = Вопрос("Создать группу номенклатуры с названием: "+
		ЭлементыФормы.БухгалтерскаяКатегория.ТекущаяСтрока.КатегорияАйко+"?", РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	Ном = Справочники.Номенклатура.СоздатьЭлемент();
	Ном.Наименование = ЭлементыФормы.БухгалтерскаяКатегория.ТекущаяСтрока.КатегорияАйко;
	//Ном.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяСтавкаНДС");
	Ном.НаименованиеПолное = ЭлементыФормы.БухгалтерскаяКатегория.ТекущаяСтрока.КатегорияАйко;
	Ном.ЭтоГруппа = Истина;
	
	//Ном.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	Попытка
		Ном.Записать();
		ЭлементыФормы.БухгалтерскаяКатегория.ТекущаяСтрока.Номенклатура = Ном.Ссылка;
		Ном.ПолучитьФорму().Открыть();
	Исключение
		Сообщить("Группу номенклатуры создать не удалось:"+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
 КонецПроцедуры

 Процедура ТабличноеПоле1Группа1СПриИзменении(Элемент)
	 Если Элемент.Значение.ЭтоГруппа=Ложь Тогда
		 Возврат
	 КонецЕсли;
	 ЭлементыФормы.БухгалтерскаяКатегория.ТекущаяСтрока.Группа1СКод=Элемент.Значение.Код;
 КонецПроцедуры

 Процедура ПКВПриИзменении()
	 ЭлементыФормы.Панель1.Страницы.ВидыОплаты.Видимость=(АР и БезналичныеОплаты="ИзПриемаКассовойВыручки");
	 ЭлементыФормы.Панель1.Страницы.ВидыОплатыСчета.Видимость=(АР и БезналичныеОплаты="ПоСчету");
	 ВидимостьСДДС();
 КонецПроцедуры

 Процедура РНПриИзменении(Элемент)
	 ВидимостьПодразделения();
 КонецПроцедуры

 Процедура Кнопка1Нажатие(Элемент)
	 пн=Истина;
	 ар=Истина;
	 вн=Истина;
	 Если укр=0 тогда
		 вп=Истина;
		 ап=Истина;
		 ас=Истина;
		 пкв=Истина;
		 рн=Истина;
		 апер=Истина;
		 ин=Истина;
	 КонецЕсли;
	 ВидимостьПодразделения();
	 ДоступностьПКВ();
	 ВидимостьСДДС();
	 ВидимостьГруппировки();
 КонецПроцедуры

 Процедура Кнопка11Нажатие(Элемент)
	 пн=ложь;
	 ар=ложь;
	 вн=ложь;
	 Если укр=0 тогда
		 вп=ложь;
		 ап=ложь;
		 ас=ложь;
		 пкв=ложь;
		 рн=ложь;
		 апер=ложь;
		 ин=ложь;
	 КонецЕсли;
	 ВидимостьПодразделения();
	 ДоступностьПКВ();
	 ВидимостьСДДС();
	 ВидимостьГруппировки();
 КонецПроцедуры

 Процедура ТипыОплатВидОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	 СтандартнаяОбработка=ложь;
	 Если ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		  ЭлементыФормы.ВидыОплаты.ТекущаяСтрока.ВидОплаты=ВыбранноеЗначение.Ссылка;
		  ЭлементыФормы.ВидыОплаты.ТекущаяСтрока.Код1С=ВыбранноеЗначение.Код;
		  ЭлементыФормы.ВидыОплаты.ТекущаяСтрока.ВидОплаты1С=ВыбранноеЗначение.Наименование;
	 КонецЕсли;	 
 КонецПроцедуры
 
 Процедура СпособЗагрузкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	СпособЗагрузкиБулево=ТекущаяСтраница;
	ЭтоСервер = (ТекущаяСтраница = 0);
	ЭлементыФормы.НачПериода.Доступность = ЭтоСервер;
	ЭлементыФормы.КонПериода.Доступность = ЭтоСервер;
 КонецПроцедуры

 Процедура ПередЗакрытием()
	 //ЭлементыФормы.Файл.ТекущаяСтраница=ЭлементыФормы.Файл.Страницы.Сервер;
 КонецПроцедуры
 
 Процедура ПослеВосстановленияЗначений()
	ЗначенияВостановлены = истина; 
    ПриОткрытии();
 КонецПроцедуры

 Процедура БухгалтерскаяКатегорияАналитикаПриИзменении(Элемент)
	 ОбновитьГрупперовку();
 КонецПроцедуры

 Процедура ОрганизацияИзДокументаПриИзменении(Элемент)
	 ЭлементыФормы.ОрганизацияДокумента.Видимость=ОрганизацияИзДокумента=0;
 КонецПроцедуры

 Процедура ДопНастройкиНажатие(Элемент)
	 ФормаНастройки.ОткрытьМодально();
 КонецПроцедуры

 Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	 
 КонецПроцедуры

 Процедура ВидыОплаты1НазваниеВидОплаты1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	 СтандартнаяОбработка=ложь;
	 Если ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		  ЭлементыФормы.ВидыОплатыСчета.ТекущаяСтрока.ВидОплаты=ВыбранноеЗначение.Ссылка;
		  ЭлементыФормы.ВидыОплатыСчета.ТекущаяСтрока.КодВидОплаты1С=ВыбранноеЗначение.Код;
	 КонецЕсли;
 КонецПроцедуры

Функция ФильтрДокумента(НомерДок, ВидДок)
	Если ВидДок="Приходная Накладная" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз);  
	КонецЕсли;
	Если ВидДок="Акт Реализации" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз1);   
	КонецЕсли; 
	Если ВидДок="Внутреннее Перемещение" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз2);   
	КонецЕсли;             
	Если ВидДок="Акт Приготовления" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз3);   
	КонецЕсли;
	Если ВидДок="Прием кассовой выручки" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз4);   
	КонецЕсли;             
	Если ВидДок="Акт Переработки" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз5);   
	КонецЕсли;             
	Если ВидДок="Акт Списания" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз6);   
	КонецЕсли;  
	Если ВидДок="Инвентаризация" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз7);   
	КонецЕсли;  
	Если ВидДок="Расходная Накладная" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз8);   
	КонецЕсли; 
	Если ВидДок="Возвратная Накладная" Тогда
		Возврат ФормаНастройки.ФильтрДокумента(НомерДок, Тз9);   
	КонецЕсли; 
	Сообщить("Неизвестный тип документа: " + ВидДок);
КонецФункции
 
Процедура КонтрагентыПередУдалением(Элемент, Отказ)
	Ответ = Вопрос("Удалить из загрузки все документы с контрагентом: "+
		ЭлементыФормы.Контрагенты.ТекущаяСтрока.КНаименованиеИИКО+"?", 
		РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ=истина;
    	Возврат;
	КонецЕсли;
	КодАйко=ЭлементыФормы.Контрагенты.ТекущаяСтрока.ККодИИКО;
	кво=Докум.Количество()-1;
	Для ии=0 по кво цикл
		Если Докум[ии].КонтрагентКодАйко=КодАйко тогда
			ФильтрДокумента(Докум[ии].НомерДок, Докум[ии].ВидДок);
			Докум.Удалить(ии);
			ии = ии-1;
			кво=Докум.Количество()-1;
		КонецЕсли;		
		Если ии=кво Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СкладыПередУдалением(Элемент, Отказ)
	Ответ = Вопрос("Удалить из загрузки все документы со складом : "+
		ЭлементыФормы.Склады.ТекущаяСтрока.СкладНаименование+"?", 
		РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ=истина;
    	Возврат;
	КонецЕсли;
	КодАйко=ЭлементыФормы.Склады.ТекущаяСтрока.СкладКод;
	кво=Докум.Количество()-1;
	Для ии=0 по кво цикл
		склады1=ИзСтрокиВСпис(Докум[ии].СкладКодАйко);
		//Если Докум[ии].СкладКодАйко=КодАйко тогда
		Если склады1.Найти(КодАйко)<>неопределено Тогда
			ФильтрДокумента(Докум[ии].НомерДок, Докум[ии].ВидДок);
			Докум.Удалить(ии);
			ии = ии-1;
			кво=Докум.Количество()-1;
		КонецЕсли;		
		Если ии=кво Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВидыОплатыСчетаПередУдалением(Элемент, Отказ)
	Ответ = Вопрос("Удалить из загрузки все документы со счетом : "+
		ЭлементыФормы.ВидыОплатыСчета.ТекущаяСтрока.НазваниеАйко+"?", 
		РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ=истина;
    	Возврат;
	КонецЕсли;
    НазваниеАйко=ЭлементыФормы.ВидыОплатыСчета.ТекущаяСтрока.НазваниеАйко;
	кво=Докум.Количество()-1;
	Для ии=0 по кво цикл
		//Стр.Движениеденежныхсредствкод,"КодАйко"
		позиция=Тз1.Найти(Докум[ии].НомерДок, "НомерДок");
		//Если Докум[ии].СчетКодАйко=КодАйко тогда
		Если позиция<>неопределено и позиция.Движениеденежныхсредств=НазваниеАйко тогда
			ФильтрДокумента(Докум[ии].НомерДок, Докум[ии].ВидДок);
			Докум.Удалить(ии);
			ии = ии-1;
			кво=Докум.Количество()-1;
		КонецЕсли;		
		Если ии=кво Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ФизЛицаНазвание1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	 Если ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		  ЭлементыФормы.ФизЛица.ТекущаяСтрока.Название1С=ВыбранноеЗначение.Ссылка;
		  ЭлементыФормы.ФизЛица.ТекущаяСтрока.Код1С=ВыбранноеЗначение.Код;
	 КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель1Настройки(Кнопка)
	ФормаНастройки.ОткрытьМодально();
КонецПроцедуры

Процедура ПанельНоменклатураНоменклатураСоздать(Кнопка)
	Если не ЗначениеЗаполнено(ЭлементыФормы.Номенклатура.ТекущаяСтрока) Тогда
		возврат;
	КонецЕсли;

	Код=ТруКодН(ЭлементыФормы.Номенклатура.ТекущаяСтрока.НКодИИКО);
	Ответ = Вопрос("Создать элемент номенклатуры с названием: "+
		ЭлементыФормы.Номенклатура.ТекущаяСтрока.ННаименованиеИИКО+
		" и кодом: "+Код+"?", РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	
	Название=ЭлементыФормы.Номенклатура.ТекущаяСтрока.ННаименованиеИИКО;
	Ном=СоздатьНоменклатуру(ЭлементыФормы.Номенклатура.ТекущаяСтрока.НКодИИКО, Название, Неопределено, Неопределено);
	Если Ном<>Неопределено Тогда
		ЭлементыФормы.Номенклатура.ТекущаяСтрока.Номенклатура = Ном.Ссылка;
		Ном.ПолучитьФорму().Открыть();
	КонецЕсли;	
КонецПроцедуры

Процедура ПанельНоменклатураЗаполнитьНоменклатура(Кнопка)
	Если Вопрос("Заполнить соответствия по названию/коду?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Номенклатура Цикл
        Элемм = Справочники.Номенклатура.ПустаяСсылка();
		Если не ЗначениеЗаполнено(Стр.Номенклатура) тогда
			Элемм=Справочники.Номенклатура.НайтиПоНаименованию(Стр.ННаименованиеИИКО,истина);
			Если Элемм.ЭтоГруппа тогда
				Элемм=Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(Элемм) тогда
				Элемм=Справочники.Номенклатура.НайтиПоКоду(ТруКодН(Стр.НКодИИКО), истина);
				Если Элемм.ЭтоГруппа тогда
					Элемм=Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемм) тогда
			Стр.Номенклатура = Элемм.Ссылка;
			Стр.Наименование1С=Элемм.Наименование;
			Стр.Код1С=Элемм.Код;
		КонецЕСли;	
	КонецЦикла;	
КонецПроцедуры

Процедура ПанельНоменклатураОчиститьНоменклатура(Кнопка)
	Если Вопрос("Очистить таблицу соответствий?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Номенклатура Цикл
		Стр.Номенклатура = "";
		Стр.Наименование1С="";
		Стр.Код1С="";
	КонецЦикла;	
КонецПроцедуры

Процедура ПанельНоменклатураНоменклатураСоздатьВсе(Кнопка)
	Если Вопрос("Создать все номенклатурные позиции?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Номенклатура Цикл
		Если не ЗначениеЗаполнено(Стр.Номенклатура) тогда
			Ном=СоздатьНоменклатуру(Стр.НКодИИКО, Стр.ННаименованиеИИКО, Неопределено, Неопределено);
			Если Ном<>Неопределено Тогда
			 	Стр.Номенклатура = Ном.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПанельКонтрагентыСоздатьВсе(Кнопка)
	Если Вопрос("Создать всех контрагентов?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Стр из Контрагенты Цикл
		Если не ЗначениеЗаполнено(Стр.Контрагент) тогда
			Контр = СоздатьКонтрагента(ФормаНастройки.ТруКод(Стр.ККодИИКО), Стр.КНаименованиеИИКО, 
				ФормаНастройки.ИсправленныйЮЛИНН(Стр.КИННИИКО));
			Если не Контр = неопределено Тогда
				Стр.Контрагент=Контр.Ссылка;
				Стр.ИНН1С=ФормаНастройки.ИсправленныйЮЛИНН(Контр.ИНН);
				Стр.Наименование1С=Контр.Наименование;
				Стр.Код1С=Контр.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПанельКонтрагентыКонтрагентыСоздать(Кнопка)
	Если не ЗначениеЗаполнено(ЭлементыФормы.Контрагенты.ТекущаяСтрока) Тогда
		возврат;
	КонецЕсли;
	код = ФормаНастройки.ТруКод(ЭлементыФормы.Контрагенты.ТекущаяСтрока.ККодИИКО);
	Ответ = Вопрос("Создать контрагента с названием: "+
		ЭлементыФормы.Контрагенты.ТекущаяСтрока.КНаименованиеИИКО+
		" и кодом: "+код+"?", РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	Контр = СоздатьКонтрагента(код, ЭлементыФормы.Контрагенты.ТекущаяСтрока.КНаименованиеИИКО, 
		ФормаНастройки.ИсправленныйЮЛИНН(ЭлементыФормы.Контрагенты.ТекущаяСтрока.КИННИИКО));
	Если не Контр = неопределено Тогда
		ЭлементыФормы.Контрагенты.ТекущаяСтрока.Контрагент = Контр.Ссылка;
		Если Открывать=1 тогда
			Контр.ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СоздатьКонтрагента(код, Наименование, ИНН)
	Контр = Справочники.Контрагенты.СоздатьЭлемент();
	
	Элемм=Справочники.Контрагенты.НайтиПоКоду(код, истина);
	Если не ЗначениеЗаполнено(Элемм) тогда
		Контр.Код = код;
	КонецЕсли;	
	Контр.Наименование = Наименование;
	Контр.НаименованиеПолное = Наименование;
	Контр.ИНН = ИНН;
	Контр.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Попытка
		Контр.Записать();
		СоздатьДоговор(Контр, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация"), 
			Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор", ложь);
		возврат Контр;
	Исключение
		Сообщить("Контрагента создать не удалось:"+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
	возврат неопределено;
КонецФункции

Процедура ПанельКонтрагентыКонтрагентыЗаполнить(Кнопка)
	Если Вопрос("Заполнить соответствие по ИНН/названию?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;

	Для Каждого Стр из Контрагенты Цикл
		 Элемм=Справочники.Контрагенты.ПустаяСсылка();
		 Если не ЗначениеЗаполнено(Стр.Контрагент) тогда 
			 Если ЗначениеЗаполнено(Стр.КИННИИКО) тогда
				 Элемм=Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ФормаНастройки.ИсправленныйЮЛИНН(Стр.КИННИИКО));
			 КонецЕСли;
			 Если Элемм.ЭтоГруппа тогда
				 Элемм=Справочники.Контрагенты.ПустаяСсылка();
			 КонецЕсли;	
			 Если Не ЗначениеЗаполнено(Элемм) тогда
				 Элемм=Справочники.Контрагенты.НайтиПоНаименованию(Стр.КНаименованиеИИКО);
				 Если Элемм.ЭтоГруппа тогда
					 Элемм=Справочники.Контрагенты.ПустаяСсылка();
				 КонецЕсли;	
				 Если Не ЗначениеЗаполнено(Элемм) тогда
					 Элемм=Справочники.Контрагенты.НайтиПоКоду(ФормаНастройки.ТруКод(Стр.ККодИИКО), истина);
					 Если Элемм.ЭтоГруппа тогда
						 Элемм=Справочники.Контрагенты.ПустаяСсылка();
					 КонецЕсли;	
				 КонецЕсли;
			 КонецЕсли;
			 Если ЗначениеЗаполнено(Элемм) тогда
				 Стр.Контрагент=Элемм.Ссылка;
				 Стр.ИНН1С=ФормаНастройки.ИсправленныйЮЛИНН(Элемм.ИНН);
				 Стр.Наименование1С=Элемм.Наименование;
				 Стр.Код1С=Элемм.Код;
			 КонецЕсли;
		 КонецЕсли;
	 КонецЦикла;
КонецПроцедуры

Процедура ПанельКонтрагентыКонтрагентыОчистить(Кнопка)
  	Если Вопрос("Очистить таблицу соответствий?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Контрагенты Цикл
		Стр.Контрагент = "";
		Стр.Наименование1С="";
		Стр.Код1С="";
		Стр.ИНН1С="";
	КонецЦикла;
КонецПроцедуры

Процедура ПанельГрупировкаГрупировкаСоздать(Кнопка)
	Если не ЗначениеЗаполнено(ЭлементыФормы.Группировка.ТекущаяСтрока) Тогда
		возврат;
	КонецЕсли;

	Ответ = Вопрос("Создать элемент номенклатуры с названием: "+
		ЭлементыФормы.Группировка.ТекущаяСтрока.СтавкаНДС+"?", РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	
	Ном=СоздатьНоменклатуру(Неопределено, ЭлементыФормы.Группировка.ТекущаяСтрока.СтавкаНДС, 
		ЭлементыФормы.Группировка.ТекущаяСтрока.Категория, 
		ЭлементыФормы.Группировка.ТекущаяСтрока.НДС);
	Если Ном<>Неопределено Тогда
		ЭлементыФормы.Группировка.ТекущаяСтрока.Номенклатура = Ном.Ссылка;
		Ном.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ПанельГрупировкаГрупировкаСоздатьВсе(Кнопка)
	Если Вопрос("Создать все элементы?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Стр из Группировка Цикл
		 Если Не ЗначениеЗаполнено(Стр.Номенклатура) тогда
			Ном=СоздатьНоменклатуру(Неопределено, Стр.СтавкаНДС, Стр.Категория, Стр.НДС);
			Если Ном<>Неопределено Тогда
			 	Стр.Номенклатура = Ном.Ссылка;
			КонецЕсли;	
		КонецЕсли;
	 КонецЦикла;
КонецПроцедуры

Процедура ПанельГрупировкаОчистить(Кнопка)
	Если Вопрос("Очистить таблицу соответствия?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Группировка Цикл
		Стр.Номенклатура = "";
		Стр.Код1С="";
	КонецЦикла;
КонецПроцедуры

Процедура ПанельГрупировкаЗаполнитьГрупировка(Кнопка)
	Если Вопрос("Заполнить соответствия по названию?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Группировка Цикл
        Элемм = Справочники.Номенклатура.ПустаяСсылка();
		Если не ЗначениеЗаполнено(Стр.Номенклатура) тогда   
			катег=БухгалтерскаяКатегория.Найти(Стр.Категория, "КатегорияАйко");
			Если катег<>Неопределено и ЗначениеЗаполнено(катег.Группа1С) Тогда
				Элемм=Справочники.Номенклатура.НайтиПоНаименованию(Стр.СтавкаНДС,истина, катег.Группа1С);
				Если Элемм.ЭтоГруппа тогда
					Элемм=Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемм) тогда
			Стр.Номенклатура = Элемм.Ссылка;
		КонецЕСли;	
	КонецЦикла;
КонецПроцедуры

Процедура ПанельСкладыСоздать(Кнопка)
	Если не ЗначениеЗаполнено(ЭлементыФормы.Склады.ТекущаяСтрока) Тогда
		возврат;
	КонецЕсли;

	Ответ = Вопрос("Создать склад с названием: "+
		ЭлементыФормы.Склады.ТекущаяСтрока.СкладНаименование+"?", РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	
	Скл = Справочники.Склады.СоздатьЭлемент();
	Скл.Наименование = ЭлементыФормы.Склады.ТекущаяСтрока.СкладНаименование;
	Скл.ВидСклада = Перечисления.ВидыСкладов.Оптовый;
    Попытка
		Скл.Записать();
		ЭлементыФормы.Склады.ТекущаяСтрока.Склад = Скл.Ссылка;
		Скл.ПолучитьФорму().Открыть();
	Исключение
		Сообщить("Склад создать не удалось:"+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ПанельСкладыСоздатьВсе(Кнопка)
	Если Вопрос("Создать все элементы?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Стр из Склады Цикл
		Если не ЗначениеЗаполнено(Стр.Склад) тогда
			Скл = Справочники.Склады.СоздатьЭлемент();
			Скл.Наименование = Стр.СкладНаименование;
			Скл.ВидСклада = Перечисления.ВидыСкладов.Оптовый;
			Попытка
				Скл.Записать();
				Стр.Склад = Скл.Ссылка;
				Стр.Наименование1С=Скл.Наименование;
			Исключение
				Сообщить("Склад создать не удалось:"+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			КонецПопытки;		
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПанельСкладыЗаполнить(Кнопка)
	Если Вопрос("Заполнить соответствие по названию?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Склады Цикл
        Элемм = Справочники.Склады.ПустаяСсылка();
		Если не ЗначениеЗаполнено(Стр.Склад) тогда
			Элемм=Справочники.Склады.НайтиПоНаименованию(Стр.СкладНаименование,истина);
			Если Элемм.ЭтоГруппа тогда
				Элемм=Справочники.Склады.ПустаяСсылка();
			КонецЕсли;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемм) тогда
			Стр.Склад = Элемм.Ссылка;
			Стр.Наименование1С=Элемм.Наименование;
		КонецЕСли;	
	КонецЦикла;
КонецПроцедуры

Процедура ПанельСкладыОчистить(Кнопка)
	Если Вопрос("Очистить таблицу соответствия?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Склады Цикл
		Стр.Склад = "";
		Стр.Наименование1с="";
		Стр.Подразделение="";
	КонецЦикла;
КонецПроцедуры
  



