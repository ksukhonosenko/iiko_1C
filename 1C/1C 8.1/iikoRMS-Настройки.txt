Перем КаталогБазы;
Перем ТекущаяНастройка Экспорт;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	попытка
		ЕдиницаИзмренияДефолтная=ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная;
		ТаблицаЕденицыИзмерений.Очистить();
		для каждого еи из ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений цикл
			стр = ТаблицаЕденицыИзмерений.Добавить();
			стр.ЕдиницаИзмеренияАйко = еи.НазваниеАйко;// еи.Ключ;
			стр.ЕдиницаИзмерения1С = еи.Значение;
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при открытии формы: " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

// Процедура выполняет удаление из талици всех строк с заданным номером документа
//
// Параметры:
//  НомерДок - номер документа, для которого нужно удалить все строки
//  таб - таблица строкам документов 
//
Функция ФильтрДокумента(НомерДок, таб) Экспорт
	кво=таб.Количество()-1;
	Для ии=0 по кво цикл
		Если таб[ии].НомерДок=НомерДок тогда
			таб.Удалить(ии);
			ии = ии-1;
			кво=таб.Количество()-1;
		КонецЕсли;		
		Если ии=кво Тогда
			Возврат истина;
		КонецЕсли;
	КонецЦикла;
	Возврат истина;
КонецФункции

// Преобразовать строку в дату
// 
// Параметры:
//   Стро - строка
//
Функция получитьДату(Стро) Экспорт
	Стро=СтрЗаменить(СокрЛП(Стро),Символы.НПП,"");
	Год=Число(Сред(Стро,7,4));
	Месяц=Число(Сред(Стро,4,2));
	День=Число(Лев(Стро,2));
	Длинн=СтрДлина(Стро);
	Если Длинн=18 тогда
		Час= Число(Сред(Стро,12,1));
		Минута=Число(Сред(Стро,14,2));
		Секунда=Число(Сред(Стро,17,2));
	ИначеЕсли Длинн=10 тогда
		Час= 0;
		Минута=0;
		Секунда=0;
	Иначе
		Час= Число(Сред(Стро,12,2));
		Минута=Число(Сред(Стро,15,2));
		Секунда=Число(Сред(Стро,18,2));
	КонецЕсли;	
	ддд=Дата(Год,Месяц,День,час,Минута,Секунда);
	Возврат ддд;
КонецФункции

Функция ИсправленныйЮЛИНН(иннИзАйко) Экспорт   
	// ALEXV: Исправляем ИНН из IIKO - убираем начальные нули
	инн1 = СокрЛП(иннИзАйко);
	Пока Лев(инн1, 1) = "0" Цикл
		инн1= Сред(инн1, 2); 
	КонецЦикла;
	Возврат инн1;
КонецФункции

функция ДобитьПробелы(стр,числ) Экспорт
	Пока стрДлина(стр)<числ цикл
		стр="0"+стр;
	КонецЦикла;	
	Возврат стр;
КонецФункции

функция ТруКод(стр) Экспорт
	Возврат ДобитьПробелы(СокрЛП(стр),9);
КонецФункции

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//ТекущиеНастройки.ЕденицыИзмерений = новый Структура;
	//Для Каждого с из ТаблицаЕденицыИзмерений цикл
	//	ТекущиеНастройки.ЕденицыИзмерений.Вставить(
	//		с.ЕдиницаИзмерения1С,
	//	 	с.ЕдиницаИзмеренияАйко);
	//КонецЦикла;	 
	//Если не УниверсальныеМеханизмы.СохранитьНастройку(ТекущиеНастройки) Тогда
	//	Сообщить("Не удалось созранить настройки");
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПанельЕденицыИзмиренийЕдиницаСоздать(Кнопка)
	ТаблицаЕденицыИзмерений.Добавить();
КонецПроцедуры

Процедура ПанельЕденицыИзмиренийУдалитьИзмерение(Кнопка)
	Если ЗначениеЗаполнено(ЭлементыФормы.ТаблицаЕденицыИзмерений.ТекущаяСтрока) Тогда
		ТаблицаЕденицыИзмерений.Удалить(ЭлементыФормы.ТаблицаЕденицыИзмерений.ТекущаяСтрока);	
	КонецЕсли;
КонецПроцедуры

// Сохрание.загрузка таблиц соответсвия

Процедура КнопкаСохранитьНажатие(Элемент)
	ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Очистить();
	Для каждого стр из ТаблицаЕденицыИзмерений цикл
		старая=ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Найти(Стр.ЕдиницаИзмеренияАйко, "НазваниеАйко");
		Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения1С) и не ЗначениеЗаполнено(старая) Тогда 
			изм=ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Добавить();	
			изм.НазваниеАйко=СокрЛП(Стр.ЕдиницаИзмеренияАйко);
			изм.Значение=Стр.ЕдиницаИзмерения1С;
		КонецЕсли;
	КонецЦикла;
	ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная=ЕдиницаИзмренияДефолтная;
	СохранитьНастройки();
	Закрыть();
КонецПроцедуры

Функция СохранитьКонтрагентов(Контрагенты) Экспорт
	Ошибок=0;
	Для каждого стр из Контрагенты цикл
		Если не ЗначениеЗаполнено(Стр.Контрагент) Тогда
			Сообщить("Для загруженного контрагента "+стр.КНаименованиеИИКО+" не сопоставлен контрагент в 1с", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок +1;
		Иначе
			Если ПустаяСтрока(Стр.ККодИИКО) Тогда
				продолжить;
			КонецЕсли;
			строка=ТекущаяНастройка.СохраненнаяНастройка.Поставщики.Найти(СокрЛП(Стр.ККодИИКО), "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.Значение = Стр.Контрагент;
			Иначе
				новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.Поставщики.Добавить();
				новаяСтрока.КодАйко = СокрЛП(Стр.ККодИИКО);
				новаяСтрока.Значение = Стр.Контрагент;
			КонецЕсли;
		КонецЕсли
	КонецЦИкла;
	возврат Ошибок;
КонецФункции

Функция СохранитьСклады(Склады) Экспорт
	Ошибок=0;
	Для каждого стр из Склады цикл
		Если не ЗначениеЗаполнено(Стр.Склад) Тогда
			Сообщить("Для загруженного склада "+стр.СкладНаименование+" не сопоставлен склад в 1с", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок +1;
		Иначе
			Код=СокрЛП(Стр.СкладКод);
			Если ПустаяСтрока(Код) Тогда
				Код=Стр.СкладНаименование;
			КонецЕсли;
			строка=ТекущаяНастройка.СохраненнаяНастройка.Склады.Найти(Код, "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.Значение=Стр.Склад;
				строка.Подразделение=Стр.Подразделение;
			Иначе
				новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.Склады.Добавить();
				новаяСтрока.КодАйко=Код;
				новаяСтрока.Значение=Стр.Склад;
				новаяСтрока.Подразделение=Стр.Подразделение;
			КонецЕсли;
		КонецЕсли
	КонецЦИкла;
    возврат Ошибок;
КонецФункции

Процедура СохранитьКатегории(БухгалтерскаяКатегория) Экспорт
	Для каждого стр из БухгалтерскаяКатегория цикл
		Если не ЗначениеЗаполнено(Стр.Группа1С) Тогда
			продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Стр.КатегорияАйкоКод) Тогда
			продолжить;
		КонецЕсли;
		
		строка=ТекущаяНастройка.СохраненнаяНастройка.Категории.Найти(СокрЛП(Стр.КатегорияАйкоКод), "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			строка.Значение=Стр.Группа1С;
			строка.Аналитика=СокрЛП(Стр.Аналитика);
		Иначе
			новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.Категории.Добавить();
			новаяСтрока.КодАйко=СокрЛП(Стр.КатегорияАйкоКод);
			новаяСтрока.Значение=Стр.Группа1С;
			строка.Аналитика=СокрЛП(Стр.Аналитика);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СохранитьГруппировку(Группировка) Экспорт
	Ошибок=0;
	Для каждого стр из Группировка цикл
		Если не ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Сообщить("Для ставки НДС "+стр.СтавкаНДС+" не сопоставлена номенклатура в 1с!", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок +1;
			продолжить;
		КонецЕсли;
		кодАйко=СокрЛП(Стр.СтавкаНДС)+"-"+СокрЛП(Стр.Категория);
		строка=ТекущаяНастройка.СохраненнаяНастройка.Группировка.Найти(кодАйко, "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			строка.Значение=Стр.Номенклатура;
		Иначе
			новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.Группировка.Добавить();
			новаяСтрока.КодАйко=кодАйко;
			новаяСтрока.Значение=Стр.Номенклатура;
		КонецЕсли;
			
	КонецЦИкла;
	возврат Ошибок;
КонецФункции

Функция СохранитьНоменклатуру(Номенклатура) Экспорт
	Ошибок=0;
	Для каждого стр из Номенклатура цикл
		Если не ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Сообщить("Для загруженной номенклатуры "+стр.ННаименованиеИИКО+" не сопоставлена номенклатура в 1с", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок +1;
			Продолжить;
		КонецЕсли;;
		
		Если ПустаяСтрока(Стр.НКодИИКО) Тогда
			продолжить;
		КонецЕсли;
		
		кодАйко=СокрЛП(Стр.НКодИИКО);
		строка=ТекущаяНастройка.СохраненнаяНастройка.Номенклатура.Найти(кодАйко, "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			строка.Значение=Стр.Номенклатура;
		Иначе
			новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.Номенклатура.Добавить();
			новаяСтрока.КодАйко=кодАйко;
			новаяСтрока.Значение=Стр.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	возврат  Ошибок;
КонецФункции

Функция СохранитьФизЛица(ФизЛица)  Экспорт
	Если ФизЛица.Количество()=0 Тогда
		возврат 0;
	КонецЕсли;
	Ошибок=0;
	Для каждого стр из ФизЛица цикл
		Если не ЗначениеЗаполнено(Стр.Название1С) Тогда
			Сообщить("Для физ лица "+Стр.НазваниеАйко+" не сопоставлено физ. лицо в 1С!", СтатусСообщения.ОченьВажное);
			//Ошибок = Ошибок +1;
			продолжить;
		КонецЕсли;
		Если ПустаяСтрока(Стр.КодАйко) Тогда
			продолжить;
		КонецЕсли;
		
		кодАйко=СокрЛП(Стр.КодАйко);
		строка=ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Найти(кодАйко, "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			строка.Значение=стр.Название1С;
		Иначе
			новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Добавить();
			новаяСтрока.КодАйко=кодАйко;
			новаяСтрока.Значение=Стр.Название1С;
		КонецЕсли;
	КонецЦикла;
	Возврат Ошибок;
КонецФункции

Функция СохранитьТипыОплат(БезналичныеОплаты,ВидыОплаты,ВидыОплатыСчета) Экспорт
	Ошибок=0;
	Если БезналичныеОплаты="НеГрузить" Тогда
		Возврат 0;
	КонецЕсли;
	
	Если БезналичныеОплаты="ИзПриемаКассовойВыручки" Тогда	
		Для каждого стр из ВидыОплаты цикл
			Если не ЗначениеЗаполнено(Стр.ВидОплаты) Тогда
				Сообщить("Для Вида оплаты "+Стр.ВидОплатыИИКО+" не сопоставлен вид оплаты в 1с!", СтатусСообщения.ОченьВажное);
				Ошибок = Ошибок +1;
				продолжить;
			КонецЕсли;
			Если ПустаяСтрока(Стр.КодИИКО) Тогда
				продолжить;
			КонецЕсли;
			
			кодАйко=СокрЛП(Стр.КодИИКО);
			строка=ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Найти(кодАйко, "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.Значение=Стр.ВидОплаты;
			Иначе
				новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Добавить();
				новаяСтрока.КодАйко=кодАйко;
				новаяСтрока.Значение=Стр.ВидОплаты;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
	Если БезналичныеОплаты="ПоСчету" Тогда	
		//хб4.индексы.Добавить("IDXCODE","CODEIAC",истина);
		Для каждого стр из ВидыОплатыСчета цикл
			Если не ЗначениеЗаполнено(Стр.ВидОплаты) Тогда
				Сообщить("Для счета "+Стр.НазваниеАйко+" не сопоставлен вид оплаты в 1с!", СтатусСообщения.ОченьВажное);
				//Ошибок = Ошибок +1;
				продолжить;
			КонецЕсли;
			
			кодАйко=СокрЛП(Стр.КодАйко);
			строка=ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Найти(кодАйко, "КодАйкоСчет");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.Значение=Стр.ВидОплаты;
			Иначе
				новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Добавить();
				новаяСтрока.КодАйко=кодАйко;
				новаяСтрока.Значение=Стр.ВидОплаты;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
	
	Возврат Ошибок;
КонецФункции

Процедура СохранитьНастройки() Экспорт
	Результат=УниверсальныеМеханизмы.СохранитьНастройку(ТекущаяНастройка);
	Если не Результат Тогда
		Сообщить("Не удалось сохранить настройки");
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗагрузитьНастройки() Экспорт
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Версия", 2);
	ОбщиеНастройки.Вставить("ЕдиницаИзмренияДефолтная", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"));
	
	ЕдиницыИзмерений = Новый ТаблицаЗначений;
	ЕдиницыИзмерений.Колонки.Добавить("НазваниеАйко"); 
	ЕдиницыИзмерений.Колонки.Добавить("Значение"); 
	
	Поставщики = Новый ТаблицаЗначений;
	Поставщики.Колонки.Добавить("КодАйко"); 
	Поставщики.Колонки.Добавить("Значение");
	
	СкладыС = Новый ТаблицаЗначений;
	СкладыС.Колонки.Добавить("КодАйко"); 
	СкладыС.Колонки.Добавить("Значение");
	СкладыС.Колонки.Добавить("Подразделение");
	
	Категории = Новый ТаблицаЗначений;
	Категории.Колонки.Добавить("КодАйко"); 
	Категории.Колонки.Добавить("Значение");
	Категории.Колонки.Добавить("Аналитика");
	
	ГруппировкаС = Новый ТаблицаЗначений;
	ГруппировкаС.Колонки.Добавить("КодАйко"); 
	ГруппировкаС.Колонки.Добавить("Значение");
	
	НоменклатураС = Новый ТаблицаЗначений;
	НоменклатураС.Колонки.Добавить("КодАйко"); 
	НоменклатураС.Колонки.Добавить("Значение");
	
	ФизЛицаС = Новый ТаблицаЗначений;
	ФизЛицаС.Колонки.Добавить("КодАйко"); 
	ФизЛицаС.Колонки.Добавить("Значение");
	
	ТипыОплат = Новый ТаблицаЗначений;
	ТипыОплат.Колонки.Добавить("КодАйко"); 
	ТипыОплат.Колонки.Добавить("Значение");
	ТипыОплат.Колонки.Добавить("КодАйкоСчет");
	ТипыОплат.Колонки.Добавить("Игнорировать");
	
	СохраненнаяНастройка = Новый Структура;
	СохраненнаяНастройка.Вставить("ОбщиеНастройки", ОбщиеНастройки);
	СохраненнаяНастройка.Вставить("ЕдиницыИзмерений", ЕдиницыИзмерений);
	СохраненнаяНастройка.Вставить("Поставщики", Поставщики);
	СохраненнаяНастройка.Вставить("Склады", СкладыС);
	СохраненнаяНастройка.Вставить("Категории", Категории);
	СохраненнаяНастройка.Вставить("Группировка", ГруппировкаС);
	СохраненнаяНастройка.Вставить("Номенклатура", НоменклатураС);
	СохраненнаяНастройка.Вставить("ФизЛица", ФизЛицаС);
	СохраненнаяНастройка.Вставить("ТипыОплат", ТипыОплат);

	ТекущаяНастройка = Новый Структура;
	ТекущаяНастройка.Вставить("ВидНастройки", 0);
	ТекущаяНастройка.Вставить("ИмяОбъекта"             , "Обработка." + Строка(ЭтотОбъект));
	ТекущаяНастройка.Вставить("Пользователь"           , глЗначениеПеременной("глТекущийПользователь"));
	ТекущаяНастройка.Вставить("НаименованиеНастройки"  , "ТаблицыСоответствий.iikoRMS");
	ТекущаяНастройка.Вставить("ИспользоватьПриОткрытии", Истина);
	ТекущаяНастройка.Вставить("СохранятьАвтоматически" , Истина);
	ТекущаяНастройка.Вставить("СохраненнаяНастройка"   , СохраненнаяНастройка);
	
	ВостановтьНастройки();
КонецПроцедуры	

Функция ПолучитьНастройку()
	Перем СохраненнаяНастройка;
	Результат = УниверсальныеМеханизмы.ПолучитьНастройки(ТекущаяНастройка);	
	Попытка 
		Для каждого нн из УниверсальныеМеханизмы.ПолучитьНастройки(ТекущаяНастройка) Цикл
			Если нн.НаименованиеНастройки = ТекущаяНастройка.НаименованиеНастройки и
				нн.ИмяОбъекта = ТекущаяНастройка.ИмяОбъекта и
				нн.Пользователь = ТекущаяНастройка.Пользователь Тогда
				возврат нн;
				прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат неопределено;
КонецФункции

Процедура ВостановтьНастройки()
	соединение=СтрокаСоединенияИнформационнойБазы();
	КаталогБазы=Прав(соединение,СтрДлина(СтрокаСоединенияИнформационнойБазы())-6);
	КаталогБазы=Лев(КаталогБазы,СтрДлина(КаталогБазы)-2);
	
	ВостановленнаяНастройка = ПолучитьНастройку();
	Если не ЗначениеЗаполнено(ВостановленнаяНастройка) Тогда
		ЗагрузитьЕденицыИзмеренийИзДбф();
		ЗагрузитьПоставщиковИзДбф();
		ЗагрузитьСкладыИзДбф();
		ЗагрузитьКатегорииИзДбф();
		ЗагрузитьГруппировкуИзДбф();
		ЗагрузитьНоменклатуруИзДбф();
		ЗагрузитьФизЛицаИзДбф();
		ЗагрузитьТипыОплатИзДбф();
		СохранитьНастройки();
		возврат;
	КонецЕсли;	
	
	СохраненнаяНастойка=ВостановленнаяНастройка.СохраненнаяНастройка.Получить();
	
	Попытка
		ВостановитьЕденицыИзмерений(СохраненнаяНастойка);
	Исключение
		ЗагрузитьЕденицыИзмеренийИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьПоставщиков(СохраненнаяНастойка);
	Исключение
		ЗагрузитьПоставщиковИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьСклады(СохраненнаяНастойка);
	Исключение
		ЗагрузитьСкладыИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьКатегории(СохраненнаяНастойка);
	Исключение
		ЗагрузитьКатегорииИзДбф();
	КонецПопытки;

	Попытка
		ВостановитьГруппировку(СохраненнаяНастойка);
	Исключение
		ЗагрузитьГруппировкуИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьНоменклатуру(СохраненнаяНастойка);
	Исключение
		ЗагрузитьНоменклатуруИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьФизЛица(СохраненнаяНастойка);
	Исключение
		ЗагрузитьФизЛицаИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьТипыОплат(СохраненнаяНастойка);
	Исключение
		ЗагрузитьТипыОплатИзДбф();
	КонецПопытки;
	
	СохранитьНастройки();
КонецПроцедуры	

Процедура ВостановитьЕденицыИзмерений(СохраненнаяНастойка)
	//тип = ТипЗнч(СохраненнаяНастойка.ЕдиницыИзмерений);
	Если СохраненнаяНастойка.ЕдиницыИзмерений.Количество()=0 Тогда
		ЗагрузитьЕденицыИзмеренийИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений=СохраненнаяНастойка.ЕдиницыИзмерений;
		ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная=СохраненнаяНастойка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьЕденицыИзмеренийИзДбф()
	Путькфайлу=КаталогБазы+"\eizm.dbf";
	файл = новый файл(Путькфайлу);
	Если файл.Существует() Тогда
		хб4=новый xbase;
		Путькиндексу=КаталогБазы+"\eizm.cdx";
		хб4.ОткрытьФайл(Путькфайлу,Путькиндексу);
		Если хб4.Открыта() Тогда
			хб4.Переиндексировать();
			хб4.ТекущийИндекс=хб4.индексы.idxcode;
			хб4.Первая(); 
			Пока хб4.ВКонце()=0 Цикл 
				код = СокрЛП(хб4.ПолучитьЗначениеПоля("CODEIIKO"));
				измерение=Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(
					СокрЛП(хб4.ПолучитьЗначениеПоля("CODE1C")));
				Если не ПустаяСтрока(код) и ЗначениеЗаполнено(измерение) тогда
					изм=ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Добавить();	
					изм.НазваниеАйко=код;
					изм.Значение=измерение;
				КонецЕсли;
				хб4.Следующая();
			КонецЦикла;	
		хб4.ЗакрытьФайл();
    	КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

Процедура ВостановитьПоставщиков(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Поставщики.Количество()=0 Тогда
		ЗагрузитьПоставщиковИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Поставщики=СохраненнаяНастойка.Поставщики;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьПоставщиковИзДбф()
	хб1=новый xbase;
	Путькфайлу=КаталогБазы+"\kontr.dbf";
	Путькиндексу=КаталогБазы+"\kontr.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце()=0 Цикл
		Код1С=СокрЛП(хб1.CODES);
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(Код1С, истина);
		Если ЗначениеЗаполнено(Контрагент) Тогда 
			изм=ТекущаяНастройка.СохраненнаяНастройка.Поставщики.Добавить();	
			изм.КодАйко=СокрЛП(хб1.CODE);
			изм.Значение=Контрагент;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
       
	хб1.ЗакрытьФайл();
КонецПроцедуры	

Процедура ВостановитьСклады(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Склады.Количество()=0 Тогда
		ЗагрузитьСкладыИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Склады=СохраненнаяНастойка.Склады;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьСкладыИзДбф()
	хб1=новый xbase;
	Путькфайлу=КаталогБазы+"\sklad.dbf";
	Путькиндексу=КаталогБазы+"\sklad.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце()=0 Цикл
		Код1С=СокрЛП(хб1.CODES);
		Склад = Справочники.Склады.НайтиПоКоду(Код1С, истина);
		Если не ЗначениеЗаполнено(Склад) Тогда
			Склад = Справочники.Склады.НайтиПоНаименованию(Код1С, истина);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Склад) Тогда 
			изм=ТекущаяНастройка.СохраненнаяНастройка.Склады.Добавить();	
			изм.КодАйко=СокрЛП(хб1.CODE);
			изм.Значение=Склад;
			Если хб1.поля.Количество()=3 Тогда
				Подр=СокрЛП(хб1.ПолучитьЗначениеПоля("DEP"));
				Если ЗначениеЗаполнено(Подр) Тогда
					изм.Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Подр, истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	хб1.ЗакрытьФайл();
КонецПроцедуры

Процедура ВостановитьКатегории(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Категории.Количество()=0 Тогда
		ЗагрузитьКатегорииИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Категории=СохраненнаяНастойка.Категории;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьКатегорииИзДбф()
	хб1=новый xbase;
	Путькфайлу=КаталогБазы+"\categ.dbf";
	Путькиндексу=КаталогБазы+"\categ.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце()=0 Цикл
		Код1С=СокрЛП(хб1.CODE1C);
		Группа = Справочники.Номенклатура.НайтиПоКоду(Код1С, истина);
		Если ЗначениеЗаполнено(Группа) и Группа.ЭтоГруппа тогда
			стр=ТекущаяНастройка.СохраненнаяНастройка.Категории.Добавить();
			стр.КодАйко=СокрЛП(хб1.CODEIIKO);
			стр.Значение=Группа;
			Стр.Аналитика=СокрЛП(хб1.ANALIT);
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	хб1.ЗакрытьФайл();
КонецПроцедуры

Процедура ВостановитьГруппировку(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Группировка.Количество()=0 Тогда
		ЗагрузитьГруппировкуИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Группировка=СохраненнаяНастойка.Группировка;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьГруппировкуИзДбф()
	хб1=новый xbase;
	Путькфайлу=КаталогБазы+"\grupp.dbf";
	Путькиндексу=КаталогБазы+"\grupp.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце()=0 Цикл
		Код1С=СокрЛП(хб1.CODES);
		Товар=Справочники.Номенклатура.НайтиПоКоду(Код1С, истина);
		Если ЗначениеЗаполнено(Товар) и не Товар.ЭтоГруппа тогда
			стр=ТекущаяНастройка.СохраненнаяНастройка.Группировка.Добавить();
			стр.КодАйко=СокрЛП(хб1.CODE);
			стр.Значение=Товар;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	хб1.ЗакрытьФайл();
КонецПроцедуры

Процедура ВостановитьНоменклатуру(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Номенклатура.Количество()=0 Тогда
		ЗагрузитьНоменклатуруИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Номенклатура=СохраненнаяНастойка.Номенклатура;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьНоменклатуруИзДбф()
	хб1=новый xbase;
	Путькфайлу=КаталогБазы+"\nomendl.dbf";
	Путькиндексу=КаталогБазы+"\nomendl.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце()=0 Цикл
		Код1С=СокрЛП(хб1.CODES);
		Товар=Справочники.Номенклатура.НайтиПоКоду(Код1С, истина);
		Если ЗначениеЗаполнено(Товар) и не Товар.ЭтоГруппа тогда
			стр=ТекущаяНастройка.СохраненнаяНастройка.Номенклатура.Добавить();
			стр.КодАйко=СокрЛП(хб1.CODE);
			стр.Значение=Товар;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	хб1.ЗакрытьФайл();
КонецПроцедуры

Процедура ВостановитьФизЛица(СохраненнаяНастойка)
	Если СохраненнаяНастойка.ФизЛица.Количество()=0 Тогда
		ЗагрузитьФизЛицаИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.ФизЛица=СохраненнаяНастойка.ФизЛица;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьФизЛицаИзДбф()
	хб1=новый xbase;
	Путькфайлу=КаталогБазы+"\fislicho.dbf";
	Путькиндексу=КаталогБазы+"\fislicho.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце()=0 Цикл
		Код1С=СокрЛП(хб1.CODE1C);
		Значение=Справочники.ФизическиеЛица.НайтиПоКоду(Код1С, истина);
		Если ЗначениеЗаполнено(Значение) тогда
			стр=ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Добавить();
			стр.КодАйко=СокрЛП(хб1.CODEIIKO);
			стр.Значение=Значение;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	хб1.ЗакрытьФайл();
КонецПроцедуры

Процедура ВостановитьТипыОплат(СохраненнаяНастойка)
	Если СохраненнаяНастойка.ТипыОплат.Количество()=0 Тогда
		ЗагрузитьТипыОплатИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат=СохраненнаяНастойка.ТипыОплат;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьТипыОплатИзДбф()
	хб1=новый xbase;
	Путькфайлу=КаталогБазы+"\pkv2.dbf";
	Путькиндексу=КаталогБазы+"\pkv2.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	               
	хб1.Первая();
	Пока хб1.ВКонце()=0 Цикл
		Код1С=СокрЛП(хб1.CODE1C);
		Значение=Справочники.ВидыОплатОрганизаций.НайтиПоКоду(Код1С, истина);
		Если ЗначениеЗаполнено(Значение) тогда
			стр=ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Добавить();
			стр.КодАйко=СокрЛП(хб1.CODEIPT);
			стр.Значение=Значение;
			стр.КодАйкоСчет=СокрЛП(хб1.CODEIAC);
			стр.Игнорировать=СокрЛП(хб1.IGN);
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	хб1.ЗакрытьФайл();
КонецПроцедуры



